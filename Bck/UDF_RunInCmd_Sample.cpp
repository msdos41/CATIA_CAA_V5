// COPYRIGHT Dassault Systemes 2017
//===================================================================
//
// RunInCmd.cpp
// The state chart based command: RunInCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Dec 2017  Creation: Code generated by the CAA wizard  e-gaorupeng
//===================================================================
#include "RunInCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"
#include "CATIDescendants.h"
#include "CATFrmEditor.h"
#include "CATIPrtPart.h"
#include "CATIAlias.h"
#include "CATIBuildPath.h"
#include "CATICkeParm.h"
#include "CATLISTV_CATISpecObject.h"
#include "CATIUdfFactory.h"
#include "CATIPrtContainer.h"
#include "CATInit.h"
#include "CATIUdfInstantiate.h"
#include "CATICkeParmFactory.h"
#include "CATCkeGlobalFunctions.h"
#include "CATICkeRelation.h"
#include "CATIParmPublisher.h"
#include "CATError.h"
#include "CATIMechanicalRootFactory.h"
#include "CATSessionServices.h"
#include "CATDocumentServices.h"
#include "CATIProduct.h"
#include "CATIPrdObjectPublisher.h"
#include "CATIPrdProperties.h"
#include "CATUuid.h"
#include "CATCommandHeader.h"
#include "CATAfrCommandHeaderServices.h"
#include "CATIAPart.h"
#include "CATIAAnnotationSets.h"
#include "CATIAAnnotationSet.h"
#include "CATIATPSView.h"
#include "CATITPSView.h"
#include "CATAutoConversions.h"
#include "CATIATPSViewFactory.h"
#include "CATMecModAutoServices.h"
#include "CATLISTV_CATISpecObject.h"
#include "CATIGSMFactory.h"
#include "CATIGSMPlaneOffset.h"
#include "CATIAAnnotations.h"
#include "CATIAAnnotation.h"
#include "CATISpecAttrAccess.h"
#include "CATIACaptureFactory.h"
#include "CATICkeCheck.h"
#include "CATIACapture.h"
#include "CATIATPSViews.h"
#include "CATIATPSView.h"
#include "CATISpecAttrKey.h"
#include "CATITTRS.h"
#include "CATIDftView.h"
#include "CATITPSCapture.h"
#include "CATIAllowUserInfo.h"
#include "CATTime.h"
#include "CATTimeSpan.h"
#include "CATIGSMTool.h"
#include "CATIADrawingView.h"
#include "CATApplicationFrame.h"
#include "CATIAApplication.h"
#include "CATIASettingControllers.h"
#include "CATIAProduct.h"
#include "CATIADocument.h"
#include "CATIASelection.h"
#include "iostream.h"
#include "CATIVisProperties.h"
#include "CATIModelEvents.h"
#include "CATModify.h"

#define createPart "Create new parts"  
#define insidePart "Inside active part"  

#include "CATCreateExternalObject.h"
CATCreateClass( RunInCmd);

CATTime mstartT;

//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
RunInCmd::RunInCmd() :
	CATStateCommand ("RunInCmd", CATDlgEngOneShot, CATCommandModeShared) 
	//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
	,m_spCompent(NULL)
	,m_pDlgUdf(NULL)
	,m_iTspTextCount(0)
	,m_piaPartSetting(NULL)
	,m_pTxtAnnot(NULL)
	,isFirt(true)
	,m_Notify(NULL)
	,m_Agent(NULL)
	,m_initialState(NULL)
{
	if (CheckUserName()==FALSE)
	{
		RequestDelayedDestruction();
		return;
	}

	isreturn=FALSE;
	isCreated=FALSE;

	//变量初始化
	m_iTspTextCount=0;
	m_iTspViewCount=0;

	mActiveRootPrd=NULL_var;//当前激活的Prd
	mActiveFrmEditor=NULL;
	m_ReCount=0;
	m_NoReCount=0;
	m_lstAllTI.RemoveAll();
	mRootObject=NULL_var;//TI 最大的节点
	mTIEditor=NULL;
	mTIFrmEditor=NULL;
	mTIPartObject=NULL_var;//当前的TIpart
	mActivePartObject=NULL_var;//当前激活的part 
	msize=0;//TI的数量
	mTITemplatepath="";//TI Template的路径
	m_FirstTime=true;
	mInputGeoSetName="input";
	mOutputGeoSetName="output";
	m_ActiveUdfIni=NULL_var;
	m_backUdfIni=NULL_var;
	m_inputSet=NULL_var;
	m_outputSet=NULL_var;

	m_ConID="";
	m_ElementName="";
	m_Automation_Tool_Type="";
	m_UI_Type="";
	m_Part_Type=insidePart;
	m_TIStageID="";
	m_ProjectID="";
	m_TIStageName="";
	m_ProjectName="";

	m_lstSelect=NULL;
	m_lstEditor=NULL;
	m_lstlable=NULL;
	m_lstFrame=NULL;
	m_lstTabContainer=NULL;
	m_lstTabPage=NULL;

	m_lstSelectAgent=NULL;
	m_PathAgent=NULL;

	isNewEditor=FALSE;

	mBackPropety="";
	mstrlackParavalueMsg="";
	mstrError="";

	m_ErrorMsg.RemoveAll();
	m_Errorudf.RemoveAll();
	m_lstRepeatudf.RemoveAll();

	////获得当前窗口的根对象
	//CATIProduct_var spRootProduct = GetRootProduct();

	////获取
	//CreatePara(spRootProduct);

	//RequestDelayedDestruction();
	//return;

	cout << "**********************" << endl;
	cout << "* Start RunInCmd *" << endl;
	cout << "**********************" << endl << endl;

	_pGeelyCATProgressDlg = new GeelyCATProgressDlg();
	_pGeelyCATProgressDlg->Build();
	_pGeelyCATProgressDlg->SetVisibility(CATDlgShow);
	_pGeelyCATProgressDlg->SetLableTitle("the system is retrieving the necessary information from the CRP, please wait, this might take several minutes");

	CATUnicodeString strCommandPath;
	GetCommandUserPath("Run", strCommandPath);

	CATUnicodeString strStartTime=GetTimeofLocal();
	cout<<"Start Run time==="<<strStartTime<<endl;

	//mstartT = CATTime::GetCurrentLocalTime();

	CATUnicodeString strName = "CATMmuPartInfrastructureSettingCtrl";

	CATApplicationFrame *pApp = CATApplicationFrame::GetFrame();
	CATIAApplication *piaApp =NULL;
	pApp->QueryInterface(IID_CATIAApplication,(void **)&piaApp);

	CATIASettingControllers *piaSCs=NULL;
	piaApp->get_SettingControllers(piaSCs);

	BSTR bstrName;
	strName.ConvertToBSTR(&bstrName);

	CATIASettingController *pItem=NULL;
	piaSCs->Item(bstrName,pItem);
	if(pItem!=NULL)
		pItem->QueryInterface(IID_CATIAPartInfrastructureSettingAtt,(void **)&m_piaPartSetting);

	if(m_piaPartSetting!=NULL)
	{
		m_piaPartSetting->get_NamingMode(m_oldMod);
		m_piaPartSetting->put_NamingMode(catNoNamingCheck);
		m_piaPartSetting->Commit();
		m_piaPartSetting->SaveRepository();
	}

	CATISpecObject_var spActiveProduct=GetActiveProduct();
	if (spActiveProduct!=NULL_var)
	{
		if (IsProduct(spActiveProduct))
		{
			mActiveRootPrd=spActiveProduct;
		}
	}

	mActiveFrmEditor = CATFrmEditor::GetCurrentEditor();
	if (mActiveFrmEditor==NULL)
	{
		cout<<"GetCurrentEditor Failed"<<endl;
		RequestDelayedDestruction();
		isreturn=TRUE;
		return;
	}

	mTIFrmEditor=mActiveFrmEditor;

	CATUnicodeString strFloderName="TI Template";
	const char * cValue = "CATGraphicPath";
	char * oPath = NULL;
	CATLibStatus sStatus = CATGetEnvValue(cValue,&oPath);
	if ((sStatus ==CATLibError)||(oPath==NULL))
	{
		RequestDelayedDestruction();
		isreturn=TRUE;
		return;
	}

	CATUnicodeString usPath=CATUnicodeString(CATFindPath(strFloderName,oPath));
	if(usPath=="")
	{
		RequestDelayedDestruction();
		isreturn=TRUE;
		return;
	}

	mTITemplatepath=usPath;
	mTITemplatepath.Append("\\TI startpart.CATPart");
	if((_access(mTITemplatepath, 0))== -1 )
	{
		RequestDelayedDestruction();
		isreturn=TRUE;
		return;
	}

}
//CATBoolean RunInCmd::CreatePara(CATIProduct_var spRootProduct)
//{
//	CATISpecObject_var spiRootObject = NULL_var;
//	spiRootObject = spRootProduct;
//	if (spiRootObject == NULL_var)
//	{
//		cout<<"Get Object Failed"<<endl;
//		return FALSE;
//	}
//
//	CATIContainer_var spiContainer = NULL_var;
//	spiContainer = spiRootObject->GetFeatContainer();
//	if (spiContainer == NULL_var)
//	{
//		cout<<"GetFeatContainer Failed"<<endl;
//		return FALSE;
//	}
//
//	CATICkeParmFactory_var spCkeParmFactory = spiContainer;
//	if (spCkeParmFactory == NULL_var)
//	{
//		cout<<"Get CATICkeParmFactory Failed"<<endl;
//		return FALSE;
//	}
//
//	//获取External Parameters
//	CATISpecObject_var spParamSet = CATCkeGlobalFunctions::GetFunctionFactory()->GetCurrentSet(CATICkeFunctionFactory::Parameter,spiRootObject,CATCke::True);
//	if (spParamSet==NULL_var)
//	{
//		cout<<"get root para set failed"<<endl;
//		return FALSE;
//	}
//
//	//获得参数根节点
//	CATIParmPublisher_var spRootPublisher = spParamSet;
//	if (spRootPublisher==NULL_var)
//	{
//		cout<<"get root para set failed"<<endl;
//		return FALSE;
//	}
//
//	CATListOfCATUnicodeString ReplaceType_List;
//	ReplaceType_List.Append("Profile_Fit");
//	ReplaceType_List.Append("Profile_Design");
//
//	CATICkeParm_var spcke=spCkeParmFactory->CreateString( "1", ReplaceType_List[1]);
//	spcke->Rename("Replace_Type");
//	spRootPublisher->Append(spcke);
//
//	CATIParmManipulator_var spParmManip =spcke->CreateManipulator();
//
//	//CATIParmManipulator_var spVolatileManipulator = CATICkeParmFactory::CreateParmManipulator () ;
//
//	//CATIParmManipulator_var spParmManip = spCkeParmFactory->CreateParmManipulator();
//
//	spParmManip->SetEnumerateValues(&ReplaceType_List);
//
//	//spcke->SetManipulator (spParmManip);
//
//	return TRUE;
//
//}
//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
RunInCmd::~RunInCmd()
{
	_pGeelyCATProgressDlg->SetProgressPosition(100,"finish");

	//if (m_lstRepeatudf.Size()>0)
	//{
	//	CATUnicodeString strudfMsg;
	//	strudfMsg.Append("the current file has exist the udf:");
	//	for (int i=1;i<=m_lstRepeatudf.Size();i++)
	//	{
	//		strudfMsg.Append(m_lstRepeatudf[i]);
	//		if (i<m_lstRepeatudf.Size())
	//		{
	//			strudfMsg.Append(";");
	//		}
	//	}

	//	MessageBoxA(NULL,strudfMsg,"information",MB_OK);

	//}

	////if (m_Errorudf.Size()>0&&m_NowPart_Type==createPart)
	////{
	////	CATUnicodeString strudfMsg;
	////	strudfMsg.Append("the error udf:");
	////	strudfMsg.Append("\n");

	////	for (int i=1;i<=m_Errorudf.Size();i++)
	////	{
	////		CATUnicodeString str;
	////		str.Append("the udf--->");
	////		str.Append(m_Errorudf[i]);
	////		str.Append("--->lack the element--->");
	////		str.Append(m_ErrorMsg[i]);
	////		if (i<m_Errorudf.Size())
	////		{
	////			str.Append("\n");
	////		}

	////		strudfMsg.Append(str);
	////	}

	////	MessageBoxA(NULL,strudfMsg,"information",MB_OK);

	////}

	if (isNewEditor==TRUE&&mstrError!="")
	{
		MessageBoxA(NULL,mstrError,"information",MB_OK);
	}

	//CATTime EndTime = CATTime::GetCurrentLocalTime();

	//CATTimeSpan spIn = EndTime-mstartT;

	//CATUnicodeString strTimespan ;
	//strTimespan.BuildFromNum(spIn.GetTotalSeconds());

	//cout<<"execute this cmd need time==="<<strTimespan<<endl;

	// MessageBoxA(NULL,strTimespan,"总计",MB_OK);

	if (m_pDlgUdf != NULL) 
	{
		m_pDlgUdf->RequestDelayedDestruction();
		m_pDlgUdf=NULL;
	}

	if (_pGeelyCATProgressDlg != NULL) 
	{
		_pGeelyCATProgressDlg->RequestDelayedDestruction();
		_pGeelyCATProgressDlg=NULL;
	}

	if(m_piaPartSetting!=NULL)
	{
		m_piaPartSetting->put_NamingMode(m_oldMod);
		m_piaPartSetting->Commit();
		m_piaPartSetting->SaveRepository();
	}

	if (m_Agent!=NULL)
	{
		m_Agent->InitializeAcquisition();
		m_Agent=NULL;
	}

	//if (mActiveFrmEditor!=NULL)
	//{
	//	mActiveFrmEditor->Release();
	//	mActiveFrmEditor=NULL;
	//}

	CATUnicodeString strendTime=GetTimeofLocal();
	cout<<"end Run time==="<<strendTime<<endl;

	cout << "**********************" << endl;
	cout << "* End RunInCmd *" << endl;
	cout << "**********************" << endl << endl;

}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void RunInCmd::BuildGraph()
{
	m_Notify = new CATNotification();

	m_Agent = new CATDialogAgent("SelectionId");

	m_Agent->AcceptOnNotify(this,m_Notify);

	m_initialState = GetInitialState(" ");
	m_initialState -> AddDialogAgent (m_Agent);

	AddTransition( m_initialState, m_initialState,IsOutputSetCondition(m_Agent), Action ((ActionMethod) &RunInCmd::ActionOne));

	SendNotification(this,m_Notify);

}

void RunInCmd::SetCurrentGeoSet()
{
	//cout<<"SetCurrentGeoSet"<<endl;

	//获得udf的名称
	CATUnicodeString strudfName;
	if(m_spCompent->pRequement==NULL)
	{
		strudfName=m_spCompent->UdfName;
	}
	else
	{
		if(m_Automation_Tool_Type=="TI")
		{
			if(m_spCompent->pRequement->strTIName!="")
			{
				strudfName=m_spCompent->pRequement->strTIName;
			}
		}
		else
		{
			if(m_spCompent->pRequement->strFCName!="")
			{
				strudfName=m_spCompent->pRequement->strFCName;
			}
		}
	}

	m_inputSet=NULL_var;
	m_outputSet=NULL_var;
	CATIAlias_var spAlias=NULL_var;

	CATISpecObject_var spPart = GetActivePart(mTIPartObject);
	if (spPart==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return;
	}

	CATIPrtPart_var spPrtPart = spPart;
	if (spPrtPart==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return;
	}

	mInputGeoSetName.ToUpper();
	mOutputGeoSetName.ToUpper();

	CATISpecObject_var m_workSet=NULL_var;

	CATIDescendants_var spDes = spPart;
	CATListValCATISpecObject_var lstChildren;
	spDes->GetDirectChildren("CATIGSMTool",lstChildren);

	//获取input output几何集
	for(int ii=1;ii<=lstChildren.Size();ii++)
	{
		CATIAlias_var spAlias=lstChildren[ii];
		if (spAlias==NULL_var)
			continue;

		CATUnicodeString strName = spAlias->GetAlias();
		strName.ToUpper();

		if(strName==mInputGeoSetName)
		{
			m_inputSet = lstChildren[ii];
		}
		else if(strName==mOutputGeoSetName)
		{
			m_outputSet = lstChildren[ii];
		}
		else if (strName=="WORK")
		{
			m_workSet= lstChildren[ii];
		}
		else
		{
			continue;
		}
	}

	CATIContainer_var spContainer =spPart->GetFeatContainer();
	if (spContainer==NULL_var)
	{
		cout<<"Get TI Part Container Failed"<<endl;
		return ;
	}

	CATIMechanicalRootFactory_var spFac = spContainer;
	if (spFac==NULL_var)
	{
		cout<<"Get TI Part CATIMechanicalRootFactory Failed"<<endl;
		return ;
	}

	if (m_inputSet==NULL_var)
	{
		CATISpecObject_var spGsmSet=NULL_var;
		spFac->CreateGeometricalSet(mInputGeoSetName,spPart,spGsmSet);
		if (spGsmSet==NULL_var)
			return ;

		if(spGsmSet->GetFather()==NULL_var)
		{
			spDes->Append(spGsmSet);
		}

		m_inputSet=spGsmSet;

	}

	if (m_workSet==NULL_var)
	{
		CATISpecObject_var spGsmSet=NULL_var;
		spFac->CreateGeometricalSet("WORK",spPart,spGsmSet);
		if (spGsmSet==NULL_var)
			return ;

		if(spGsmSet->GetFather()==NULL_var)
		{
			spDes->Append(spGsmSet);
		}

		HideFeature(spGsmSet);

	}
	else
	{
		HideFeature(m_workSet);
	}

	if (m_outputSet==NULL_var)
	{
		CATISpecObject_var spGsmSet=NULL_var;
		spFac->CreateGeometricalSet(mOutputGeoSetName,spPart,spGsmSet);
		if (spGsmSet==NULL_var)
			return ;

		if(spGsmSet->GetFather()==NULL_var)
		{
			spDes->Append(spGsmSet);
		}

		m_outputSet=spGsmSet;

	}

	CATListOfCATUnicodeString lstGstName=m_spCompent->LstEmptyGsetName;
	lstGstName.RemoveDuplicates();

	for (int i=1;i<=lstGstName.Size();i++)
	{
		if (lstGstName[i]=="")
			continue;

		if (m_lstAllAddEmptyGst.Locate(lstGstName[i])>0)
			continue;

		//cout<<"The empty Gst Name=="<<lstGstName[i]<<endl;

		CATISpecObject_var spGset=NULL_var;
		GetGstByName(spPart,m_outputSet,lstGstName[i],spGset);
		if (spGset!=NULL_var)
			m_lstAllAddEmptyGst.Append(lstGstName[i]);

	}

	if (m_spCompent->Type!="")
	{
		//参数
		return;
	}

	if(m_spCompent->pRequement==NULL)
	{
		//输入
		spPrtPart->SetCurrentFeature(m_inputSet);

		HideFeature(m_inputSet);

		if (m_spCompent->AffectID!="")
		{
			CATUnicodeString strNameofGset;
			strNameofGset.Append(m_spCompent->AffectID);
			strNameofGset.Append("_");
			strNameofGset.Append(m_spCompent->AffectName);

			if (strudfName!="")
			{
				strNameofGset.Append("*");
			}

			//判断是否已经包含此几何集
			CATISpecObject_var spAffectGsmSet=NULL_var;
			GetGstByName(spPart,m_inputSet,strNameofGset,spAffectGsmSet);
			if(spAffectGsmSet==NULL_var)
			{
				//新建几何集
				spFac->CreateGeometricalSet(strNameofGset,spPart,spAffectGsmSet);
				if (spAffectGsmSet==NULL_var)
					return ;

				CATIMmiMechanicalFeature_var spMeaFea=spAffectGsmSet;
				if (spMeaFea==NULL_var)
					return ;

				spMeaFea->ChangeMechanicalFather(m_inputSet);

			}

			spPrtPart->SetCurrentFeature(spAffectGsmSet);

			////新建前置项的几何集
			//if (m_spCompent->AffectID!=m_spCompent->ID)
			//{
			strNameofGset="";
			strNameofGset.Append(m_spCompent->ID);
			strNameofGset.Append("_");
			strNameofGset.Append(m_spCompent->Name);
			if (strudfName!="")
			{
				strNameofGset.Append("*");
			}

			CATISpecObject_var spGsmSet=NULL_var;
			GetGstByName(spPart,spAffectGsmSet,strNameofGset,spGsmSet);
			if(spGsmSet==NULL_var)
			{
				//新建几何集
				spFac->CreateGeometricalSet(strNameofGset,spPart,spGsmSet);
				if (spGsmSet==NULL_var)
					return ;

				CATIMmiMechanicalFeature_var spMeaFea=spGsmSet;
				if (spMeaFea==NULL_var)
					return ;

				spMeaFea->ChangeMechanicalFather(spAffectGsmSet);

			}

			spPrtPart->SetCurrentFeature(spGsmSet);
			//}

			//else
			//{
			//	cout<<"affect items automation tools"<<endl;
			//	spPrtPart->SetCurrentFeature(spAffectGsmSet);
			//}

		}

	}
	else
	{
		spPrtPart->SetCurrentFeature(m_outputSet);

		if (m_spCompent->strGsetName!="")
		{
			CATUnicodeString strNameofGset;
			strNameofGset.Append(m_spCompent->strGsetName);
			if (m_spCompent->Path!="")
			{
				strNameofGset.Append("*");
			}

			//判断是否已经包含此几何集
			CATISpecObject_var spGsmSet=NULL_var;
			GetGstByName(spPart,m_outputSet,strNameofGset,spGsmSet);
			if(spGsmSet==NULL_var)
			{
				//新建几何集
				spFac->CreateGeometricalSet(strNameofGset,spPart,spGsmSet);
				if (spGsmSet==NULL_var)
					return ;

				CATIMmiMechanicalFeature_var spMeaFea=spGsmSet;
				if (spMeaFea==NULL_var)
					return ;

				spMeaFea->ChangeMechanicalFather(m_outputSet);

			}

			spPrtPart->SetCurrentFeature(spGsmSet);

		}

	}

	//获得当前激活的几何集
	CATISpecObject_var spCurrent=spPrtPart->GetCurrentFeature();

	//获得当前几何集下所有的几何集(是否包含与udf名称一致且为空的几何集)
	spDes = spCurrent;
	lstChildren.RemoveAll();
	spDes->GetDirectChildren("CATIGSMTool",lstChildren);
	for (int index=1;index<=lstChildren.Size();index++)
	{
		spAlias=lstChildren[index];

		//与udf名称一致的几何集
		if (spAlias->GetAlias()==strudfName)
		{
			spDes = lstChildren[index];
			CATListValCATISpecObject_var lst;
			spDes->GetDirectChildren("CATISpecObject",lst);
			if (lst.Size()==0)
			{
				//删除空的几何集
				spCurrent->RemoveComponent(lstChildren[index]); 
			}

		}
	}

	//RefeshObject(spPart);

}
void RunInCmd::OnCloseNotification (CATCommand *, CATNotification* , CATCommandClientData data)
{

	GoToNext();

}
void RunInCmd::GoToNext()
{
	if (m_pDlgUdf!=NULL)
	{
		m_pDlgUdf->RequestDelayedDestruction();
		m_pDlgUdf=NULL;
	}

	m_spCompent = m_spCompent->pNext;

	ActionOne( NULL);

}
CATBoolean RunInCmd::GetFatherForAutomationTools(ComponetStruct*pChildrenCompent,CATListOfCATUnicodeString &LstAddProductName,CATListOfCATUnicodeString &LstAddProductID)
{
	//cout<<"GetFatherForAutomationTools"<<endl;

	while (pChildrenCompent)
	{
		CATUnicodeString strID=pChildrenCompent->ID;
		CATUnicodeString strFatherID=pChildrenCompent->ItemFatherID;
		//cout<<"the Child ID=="<<strID<<endl;

		ComponetStruct*pFatherCompent=NULL;
		for (int i=0;i<mNoteComponetList.size();i++)
		{
			ComponetStruct*pCompent=new ComponetStruct;
			pCompent=mNoteComponetList[i];

			vector<ComponetStruct*> pChildrenList;//
			CATListOfCATUnicodeString LstChildrenID;

			pChildrenList=pCompent->pItemChildList;
			LstChildrenID=pCompent->LstChildrenItemID;

			if (LstChildrenID.Locate(strID)>0&&strFatherID==pCompent->ID)
			{
				//cout<<"add product find the Father ID=="<<pCompent->ID<<endl;

				pFatherCompent=new ComponetStruct;
				pFatherCompent=pCompent;

				CATUnicodeString strFatherID;
				strFatherID=pCompent->ID;

				LstAddProductName.Append(pCompent->ItemName);
				LstAddProductID.Append(pCompent->ID);

				break;
			}

		}

		pChildrenCompent=pFatherCompent;

	}


	return TRUE;
}
CATBoolean RunInCmd::AddTINote(CATListOfCATUnicodeString LstAddProductName,CATListOfCATUnicodeString LstAddProductID,CATIProduct_var &spTIProduct)
{
	//cout<<"AddTINote"<<endl;

	//cout<<"the add product size:"<<LstAddProductName.Size()<<endl;
	//for (int i=1;i<=LstAddProductName.Size();i++)
	//{
	//	cout<<"the add product Name is:"<<LstAddProductName[i]<<endl;
	//}

	HRESULT rc=E_FAIL;

	CATISpecObject_var spUpdateObject=mRootObject;

	CATIProduct_var spFatherObject=mRootObject;

	//添加最大的根节点
	CATUnicodeString strRootProductName=LstAddProductName[LstAddProductName.Size()];
	CATUnicodeString strTIPartName=LstAddProductName[1];

	CATUnicodeString strRootProductID=LstAddProductID[LstAddProductID.Size()];
	CATUnicodeString strTIPartID=LstAddProductID[1];

	//cout<<"RootProductName=="<<strRootProductName<<endl;
	//cout<<"TIPartName=="<<strTIPartName<<endl;

	CATDocument*  oNewTIPartDoc =NULL;

	if (LstAddProductName.Size()>1)
	{
		if (mRootObject==NULL_var)
		{
			//cout<<"the max note is null,nee create"<<endl;

			CATUnicodeString strPartnumber;
			GetPartNumber("XXXXXXXX",strRootProductName,strRootProductID,strPartnumber);

			if (mActiveRootPrd==NULL_var)
			{
				cout<<"the root product is null,new editor"<<endl;

				isNewEditor=TRUE;

				//根节点不是Product，则新建另一个Editor
				CATSession * ses = CATSession::GetPtrSession();
				if (ses==NULL)
				{
					cout<<"Get CATSession Failed"<<endl;
					return FALSE;
				}

				CATIIniInteractiveSession * ises = NULL;
				rc=ses->QueryInterface(IID_CATIIniInteractiveSession, (void **) &ises);
				if (FAILED(rc)||ises==NULL)
				{
					cout<<"QI CATIIniInteractiveSession Failed"<<endl;
					return FALSE;
				}

				//新建节点
				CATUnicodeString iDocumentType="CATProduct";
				rc=ises->New("CATProduct",&mTIEditor);
				if (FAILED(rc)||mTIEditor==NULL)
				{
					cout<<"New Root Product Failed"<<endl;
					return FALSE;
				}

				mTIFrmEditor=mTIEditor->GetEditor();
				if (mTIFrmEditor==NULL)
				{
					cout<<"GetEditor Root Product Failed"<<endl;
					return FALSE;
				}

				mActiveFrmEditor=mTIFrmEditor;

				//获取当前Editor的根节点
				CATDocument *pDocProduct = mTIFrmEditor->GetDocument();
				if (pDocProduct==NULL)
				{
					cout<<"GetDocument Root Product Failed"<<endl;
					return FALSE;
				}

				GetProductOfDocument(pDocProduct,mRootObject);

				spUpdateObject=mRootObject;
				spFatherObject=mRootObject;

				//////CATDocumentServices::Remove (*pDocProduct);

			}
			else
			{

				//新建子集Product
				CATDocument*  oNewDoc =NULL;
				rc = CATDocumentServices::New("Product", oNewDoc);
				if (FAILED(rc)||oNewDoc==NULL)
				{
					cout<<"New Product Failed"<<endl;
					return FALSE;
				}

				CATIProduct_var spAddChildrenPro=NULL_var;
				GetProductOfDocument(oNewDoc,spAddChildrenPro);
				if (spAddChildrenPro==NULL_var)
				{
					cout<<"GetProductOfDocument Failed"<<endl;
					return FALSE;
				}

				CATIProduct_var spRefFather=mActiveRootPrd->GetReferenceProduct();
				CATIProduct_var spChildren=spAddChildrenPro->GetReferenceProduct();
				if (spRefFather==NULL_var||spChildren==NULL_var)
				{
					cout<<"Get father and children reference Failed"<<endl;
					return FALSE;
				}

				CATIProduct_var spInsPrd=spRefFather->AddProduct(spChildren);
				if (spInsPrd==NULL_var)
				{
					cout<<"AddProduct Failed"<<endl;
					return FALSE;
				}

				spInsPrd->SetPrdInstanceName(strPartnumber);

				mRootObject=spAddChildrenPro;

				spUpdateObject=mRootObject;

				spFatherObject=mRootObject;

				if (mActiveRootPrd!=NULL_var)
				{
					RefeshObject(mActiveRootPrd);
				}

				//CATDocumentServices::Remove (*oNewDoc);

			}

			if (mRootObject==NULL_var)
			{
				cout<<"Get Root Product ObjectFailed"<<endl;
				return FALSE;
			}

			//命名根节点
			//mRootObject->SetPrdInstanceName(strPartnumber);
			mRootObject->SetPartNumber(strPartnumber);

		}

		if (mRootObject==NULL_var)
		{
			cout<<"Get Root Product ObjectFailed"<<endl;
			return FALSE;
		}
		else
		{
			//父级节点为Root
			spFatherObject=mRootObject;
			spUpdateObject->Update();
		}


		//获得根节点的所有子集
		CATListValCATBaseUnknown_var* LstAllChildren=NULL;
		LstAllChildren=mRootObject->GetAllChildren() ;

		//获取当前Editor的根节点  	//父级节点为上一级节点

		for (int i=(LstAddProductName.Size()-1);i>1;i--)
		{
			spUpdateObject=spFatherObject;

			CATUnicodeString strAddProductName=LstAddProductName[i];
			CATUnicodeString strAddProductID=LstAddProductID[i];

			//cout<<"the middle product name:"<<strAddProductName<<endl;

			CATUnicodeString strPartnumber;
			GetPartNumber("XXXXXXXX",strAddProductName,strAddProductID,strPartnumber);

			CATBoolean  isAdd=TRUE;

			if (LstAllChildren)
			{
				for (int j=1;j<=LstAllChildren->Size();j++)
				{
					CATIProduct_var spChildrenPro=(*LstAllChildren)[j];
					if (spChildrenPro==NULL_var)
					{
						cout<<"the children is null"<<endl;
						continue;
					}

					CATUnicodeString strInsatnceName;
					spChildrenPro->GetPrdInstanceName(strInsatnceName);
					strInsatnceName=spChildrenPro->GetPartNumber( ); 
					if (strInsatnceName==strPartnumber)
					{
						spFatherObject=spChildrenPro;
						isAdd=FALSE;
						break;
					}
				}
			}

			if (isAdd==TRUE)
			{
				//新建子集Product
				CATDocument*  oNewDoc =NULL;
				rc = CATDocumentServices::New("Product", oNewDoc);
				if (FAILED(rc)||oNewDoc==NULL)
				{
					cout<<"new product failed"<<endl;
					continue;
				}

				CATIProduct_var spAddChildrenPro=NULL_var;
				GetProductOfDocument(oNewDoc,spAddChildrenPro);
				if (spAddChildrenPro==NULL_var)
				{
					cout<<"GetProductOfDocument failed"<<endl;
					continue;
				}

				CATIProduct_var spRefFather=spFatherObject->GetReferenceProduct();
				CATIProduct_var spChildren=spAddChildrenPro->GetReferenceProduct();
				if (spRefFather==NULL_var||spChildren==NULL_var)
				{
					cout<<"Get father and children reference Failed"<<endl;
					continue;
				}

				CATIProduct_var spInsPrd=spRefFather->AddProduct(spChildren);
				if (spInsPrd==NULL_var)
				{
					cout<<"AddProduct Failed"<<endl;
					continue;
				}

				spInsPrd->SetPrdInstanceName(strPartnumber);
				spInsPrd->SetPartNumber(strPartnumber);

				spFatherObject=spAddChildrenPro;

				//CATDocumentServices::Remove (*oNewDoc);

			}
			else
			{
				//父级节点为上一级节点
				//cout<<"the product is exist:"<<strAddProductName<<endl;
			}

			spUpdateObject->Update();

		}

		spUpdateObject=spFatherObject;

		//添加 TI Part
		CATUnicodeString strTIPartnumber;
		GetPartNumber("XXXXXXXX",strTIPartName,strTIPartID,strTIPartnumber);

		//TI part  判断是否已经创建
		//获得父级节点下所有的子集
		CATBoolean  isAdd=TRUE;
		LstAllChildren=spFatherObject->GetAllChildren() ;
		if (LstAllChildren)
		{
			for (int j=1;j<=LstAllChildren->Size();j++)
			{
				CATIProduct_var spChildrenPro=(*LstAllChildren)[j];
				if (spChildrenPro==NULL_var)
				{
					cout<<"the children product is null"<<endl;
					continue;
				}

				CATUnicodeString strInsatnceName;
				spChildrenPro->GetPrdInstanceName(strInsatnceName);
				strInsatnceName=spChildrenPro->GetPartNumber( ); 
				if (strInsatnceName==strTIPartnumber)
				{
					spTIProduct=spChildrenPro;
					isAdd=FALSE;
					break;
				}
			}
		}

		if (isAdd==TRUE)
		{
			CATLISTV(CATUnicodeString)  iListOfStorageName;
			CATLISTP(CATDocument)  oListOfDocuments ;
			iListOfStorageName.Append(mTITemplatepath);

			//新建子集Product
			//CATUnicodeString iDocumentType="CATPart";
			//rc = CATDocumentServices::New("CATPart", oNewTIPartDoc);
			rc = CATDocumentServices::NewFrom(&iListOfStorageName, &oListOfDocuments, NULL);
			if (FAILED(rc)||oListOfDocuments.Size()==0)
			{
				cout<<"NewFrom part failed"<<endl;
				return FALSE;
			}

			oNewTIPartDoc=oListOfDocuments[1];

			GetProductOfDocument(oNewTIPartDoc,spTIProduct);
			if (spTIProduct==NULL_var)
			{
				cout<<"GetProductOfDocument failed"<<endl;
				return FALSE;
			}

			CATIProduct_var spRefFather=spFatherObject->GetReferenceProduct();
			CATIProduct_var spChildren=spTIProduct->GetReferenceProduct();
			if (spRefFather==NULL_var||spChildren==NULL_var)
			{
				cout<<"get father and children reference failed"<<endl;
				return FALSE;
			}

			CATIProduct_var spInsPrd=spRefFather->AddProduct(spChildren);
			if (spInsPrd==NULL_var)
			{
				cout<<"AddProduct failed"<<endl;
				return FALSE;
			}

			CATUnicodeString strPartnumber;
			GetPartNumber("XXXXXXXX",m_spCompent->ItemFatherName,m_spCompent->ItemFatherID,strPartnumber);

			spInsPrd->SetPrdInstanceName(strPartnumber);
			spInsPrd->SetPartNumber(strPartnumber);

			//CATDocumentServices::Remove (*oNewTIPartDoc);
		}
		else
		{
			//cout<<"the ti product is exist:"<<strTIPartnumber<<endl;	

			GetReferencePrdDocument(spTIProduct,oNewTIPartDoc);
			if (oNewTIPartDoc==NULL)
			{
				cout<<"GetReferencePrdDocument failed"<<endl;
				return FALSE;
			}
		}

		spUpdateObject->Update();

	}
	else if (LstAddProductName.Size()==1)
	{
		CATUnicodeString strTIPartnumber;
		GetPartNumber("XXXXXXXX",m_spCompent->ItemFatherName,m_spCompent->ItemFatherID,strTIPartnumber);

		if (mActiveRootPrd==NULL_var)
		{
			isNewEditor=TRUE;

			cout<<"the root product is null,new editor"<<endl;

			CATSession * ses = CATSession::GetPtrSession();
			if (ses==NULL)
			{
				cout<<"GetPtrSession Failed"<<endl;
				return FALSE;
			}

			CATIIniInteractiveSession * ises = NULL;
			rc=ses->QueryInterface(IID_CATIIniInteractiveSession, (void **) &ises);
			if (FAILED(rc)||ises==NULL)
			{
				cout<<"get CATIIniInteractiveSession failed"<<endl;
				return FALSE;
			}

			//新建节点
			CATUnicodeString iDocumentType="CATPart";
			rc=ises->NewFrom(mTITemplatepath,&mTIEditor);
			//rc=ises->New( "Part",&mTIEditor);
			if (FAILED(rc)||mTIEditor==NULL)
			{
				cout<<"NewFrom failed"<<endl;
				return FALSE;
			}

			mTIFrmEditor=mTIEditor->GetEditor();
			if (mTIFrmEditor==NULL)
			{
				cout<<"GetEditor failed"<<endl;
				return FALSE;
			}

			mActiveFrmEditor=mTIFrmEditor;

			//获取当前Editor的根节点
			oNewTIPartDoc = mTIFrmEditor->GetDocument();
			if (oNewTIPartDoc==NULL)
			{
				cout<<"GetDocument failed"<<endl;
				return FALSE;
			}

			GetProductOfDocument(oNewTIPartDoc,spTIProduct);
			if (spTIProduct==NULL_var)
			{
				cout<<"GetProductOfDocument failed"<<endl;
				return FALSE;
			}

			mRootObject=spTIProduct;

			//////CATDocumentServices::Remove (*oNewTIPartDoc);

		}
		else
		{
			CATLISTV(CATUnicodeString)  iListOfStorageName;
			CATLISTP(CATDocument)  oListOfDocuments ;
			iListOfStorageName.Append(mTITemplatepath);

			//CATUnicodeString iDocumentType="CATPart";
			//rc = CATDocumentServices::New("CATPart", oNewTIPartDoc);
			rc = CATDocumentServices::NewFrom(&iListOfStorageName, &oListOfDocuments, NULL);
			if (FAILED(rc)||oListOfDocuments.Size()==0)
			{
				cout<<"NewFrom failed"<<endl;
				return FALSE;
			}

			oNewTIPartDoc=oListOfDocuments[1];

			GetProductOfDocument(oNewTIPartDoc,spTIProduct);
			if (spTIProduct==NULL_var)
			{
				cout<<"GetProductOfDocument failed"<<endl;
				return FALSE;
			}

			CATIProduct_var spRefFather=mActiveRootPrd->GetReferenceProduct();
			CATIProduct_var spChildren=spTIProduct->GetReferenceProduct();
			if (spRefFather==NULL_var||spChildren==NULL_var)
			{
				cout<<"get father and children reference failed"<<endl;
				return FALSE;
			}

			CATIProduct_var spInsPrd=spRefFather->AddProduct(spChildren);
			if (spInsPrd==NULL_var)
			{
				cout<<"AddProduct failed"<<endl;
				return FALSE;
			}

			spInsPrd->SetPrdInstanceName(strTIPartnumber);

			mRootObject=spTIProduct;

			//CATDocumentServices::Remove (*oNewTIPartDoc);

			if (mActiveRootPrd!=NULL_var)
			{
				RefeshObject(mActiveRootPrd);
			}

		}

		//spTIProduct->SetPrdInstanceName(strTIPartnumber);
		spTIProduct->SetPartNumber(strTIPartnumber);
	}


	//获得TIProduct的 part
	CATIPrtPart_var opiPrtPart=NULL_var;
	GetRootElementOfPartDocument(oNewTIPartDoc,opiPrtPart);
	if (opiPrtPart==NULL_var)
	{
		cout<<"GetRootElementOfPartDocument failed"<<endl;
		return FALSE;
	}

	mTIPartObject=opiPrtPart;

	if (mRootObject!=NULL_var)
	{
		RefeshObject(mRootObject);
	}

	return TRUE;
}

CATBoolean RunInCmd::CreatePartNote(CATIProduct_var &spTIProduct)
{
	HRESULT rc=E_FAIL;

	CATUnicodeString strTIPartnumber;
	if (m_spCompent!=NULL)
	{
		GetPartNumber("XXXXXXXX",m_spCompent->ItemFatherName,m_spCompent->ItemFatherID,strTIPartnumber);
	}
	else
	{
		CATUnicodeString strTime=GetTimeofLocal();
		GetPartNumber("XXXXXXXX","Part",strTime,strTIPartnumber);
	}


	CATDocument*  oNewTIPartDoc =NULL;

	if (mActiveRootPrd==NULL_var)
	{
		isNewEditor=TRUE;

		//cout<<"the root product is null,new editor"<<endl;

		CATSession * ses = CATSession::GetPtrSession();
		if (ses==NULL)
			return FALSE;

		CATIIniInteractiveSession * ises = NULL;
		rc=ses->QueryInterface(IID_CATIIniInteractiveSession, (void **) &ises);
		if (FAILED(rc)||ises==NULL)
			return FALSE;

		//新建节点
		CATUnicodeString iDocumentType="CATPart";
		rc=ises->NewFrom( mTITemplatepath,&mTIEditor);
		//rc=ises->New( "Part",&mTIEditor);
		if (FAILED(rc)||mTIEditor==NULL)
			return FALSE;

		mTIFrmEditor=mTIEditor->GetEditor();
		if (mTIFrmEditor==NULL)
			return FALSE;

		mActiveFrmEditor=mTIFrmEditor;

		//获取当前Editor的根节点
		oNewTIPartDoc = mTIFrmEditor->GetDocument();
		if (oNewTIPartDoc==NULL)
			return FALSE;

		GetProductOfDocument(oNewTIPartDoc,spTIProduct);
		if (spTIProduct==NULL_var)
			return FALSE;

		////CATDocumentServices::Remove (*oNewTIPartDoc);

	}
	else
	{
		CATLISTV(CATUnicodeString)  iListOfStorageName;
		CATLISTP(CATDocument)  oListOfDocuments ;
		iListOfStorageName.Append(mTITemplatepath);

		//CATUnicodeString iDocumentType="CATPart";
		//rc = CATDocumentServices::New("CATPart", oNewTIPartDoc);
		rc = CATDocumentServices::NewFrom(&iListOfStorageName, &oListOfDocuments, NULL);
		if (FAILED(rc)||oListOfDocuments.Size()==0)
			return FALSE;

		oNewTIPartDoc=oListOfDocuments[1];

		GetProductOfDocument(oNewTIPartDoc,spTIProduct);
		if (spTIProduct==NULL_var)
			return FALSE;

		CATIProduct_var spRefFather=mActiveRootPrd->GetReferenceProduct();

		CATIProduct_var spChildren=spTIProduct->GetReferenceProduct();

		if (spRefFather==NULL_var||spChildren==NULL_var)
			return FALSE;

		CATIProduct_var spInsPrd=spRefFather->AddProduct(spChildren);
		if (spInsPrd==NULL_var)
			return FALSE;

		spInsPrd->SetPrdInstanceName(strTIPartnumber);

		//CATDocumentServices::Remove (*oNewTIPartDoc);

		RefeshObject(mActiveRootPrd);

	}

	mRootObject=spTIProduct;

	spTIProduct->SetPrdInstanceName(strTIPartnumber);
	spTIProduct->SetPartNumber(strTIPartnumber);

	//获得TIProduct的 part
	CATIPrtPart_var opiPrtPart=NULL_var;
	GetRootElementOfPartDocument(oNewTIPartDoc,opiPrtPart);
	if (opiPrtPart==NULL_var)
		return FALSE;

	mTIPartObject=opiPrtPart;

	RefeshObject(mRootObject);

	return TRUE;
}
void RunInCmd::GetPartNumber(CATUnicodeString strPartNumber,CATUnicodeString strTIName,CATUnicodeString strTIID,CATUnicodeString &ostrPartNumber)
{
	ostrPartNumber = strPartNumber+"_-_"+strTIName+"_"+strTIID+"_-_"+m_ProjectName+"_-_"+m_TIStageName;
	//ostrPartNumber = strPartNumber+"_-_"+strTIName+"_-_"+m_ProjectName+"_-_"+m_TIStageName;

}
CATBoolean RunInCmd::BulidTree()
{
	CATUnicodeString strStartTime=GetTimeofLocal();
	cout<<"start bulid tree time:"<<strStartTime<<endl;

	m_lstAllID.RemoveAll();
	m_lstAllPath.RemoveAll();
	m_lstAllUDFName.RemoveAll();
	m_lstAllAddEmptyGst.RemoveAll();

	m_ReCount=0;
	m_NoReCount=0;

	m_iTspTextCount = 0;
	m_pTxtAnnot=NULL;

	if (m_NowPart_Type==createPart&&m_Part_Type==insidePart)//sharepoint 端是inside part ,但catia 端激活的对象是Product
	{
		CATIProduct_var spTIProduct=NULL_var;
		CreatePartNote(spTIProduct);
		return TRUE;
	}


	for (int i=0;i<mAllComponetList.size();i++)//所有的自动化工具
	{
		m_lstAllID.RemoveAll();
		m_lstAllPath.RemoveAll();
		m_lstAllUDFName.RemoveAll();
		m_lstAllAddEmptyGst.RemoveAll();

		m_ReCount=0;
		m_NoReCount=0;

		m_spCompent=NULL;
		m_spCompent=mAllComponetList[i];

		//获取当前自动话工具的父级节点
		if (m_NowPart_Type==createPart)
		{
			if (m_spCompent==NULL)
				continue;

			if (m_UI_Type=="TI"||m_UI_Type=="Requirement")
			{
				CATListOfCATUnicodeString LstAddProductName;
				CATListOfCATUnicodeString LstAddProductID;
				GetFatherForAutomationTools(m_spCompent,LstAddProductName,LstAddProductID);
				if (LstAddProductName.Size()==0||LstAddProductID.Size()==0)
				{
					cout<<"GetFatherForAutomationTools Failed"<<endl;
					continue;
				}

				LstAddProductName.RemovePosition(1);
				LstAddProductID.RemovePosition(1);

				CATListOfCATUnicodeString iLstAddProductName;
				CATListOfCATUnicodeString iLstAddProductID;
				iLstAddProductName.Append(m_spCompent->ItemFatherName);
				iLstAddProductID.Append(m_spCompent->ItemFatherID);

				iLstAddProductName.Append(LstAddProductName);
				iLstAddProductID.Append(LstAddProductID);

				LstAddProductName.RemoveAll();
				LstAddProductID.RemoveAll();

				LstAddProductName=iLstAddProductName;
				LstAddProductID=iLstAddProductID;

				CATIProduct_var spTIProduct=NULL_var;
				if (AddTINote(LstAddProductName,iLstAddProductID,spTIProduct)==FALSE)
				{
					cout<<"Add TI Note Failed"<<endl;

					for (int i=1;i<=LstAddProductName.Size();i++)
					{
						cout<<"the add  failed product Name is:"<<LstAddProductName[i]<<endl;
					}

					continue;
				}

				CATUnicodeString strPrdProperty;
				CATUnicodeString strTIID=LstAddProductID[1];
				CATUnicodeString strTIName=LstAddProductName[1];

				strPrdProperty = "Project:"+m_ProjectID+";TIStage:"+m_TIStageID+";TIID:"+strTIID;
				//cout<<"strPrdProperty==="<<strPrdProperty<<endl;

				CATICkeParm_var spPar = GetPrdParameter(true,mTIPartObject,"SharePointProjectID");
				spPar->Valuate(strPrdProperty);
			}
			else
			{
				//Item Collector Requement 
				CATIProduct_var spTIProduct=NULL_var;
				CreatePartNote(spTIProduct);
				if (spTIProduct==NULL_var)
				{
					cout<<"AddTINote Failed"<<endl;
					continue;
				}

				CATICkeParm_var spPar = GetPrdParameter(true,mTIPartObject,"SharePointProjectID");
				spPar->Valuate(m_ConID);

				//cout<<"m_ConID==="<<m_ConID<<endl;

			}

		}
		else
		{
			CATICkeParm_var spPar = GetPrdParameter(true,mTIPartObject,"SharePointProjectID");

			CATUnicodeString mBackPropety="";
			if(spPar!=NULL_var)
				mBackPropety = spPar->Value()->AsString();

			if (mBackPropety=="")
			{
				spPar->Valuate(m_ConID);
			}
			else if (mBackPropety.SearchSubString("TIID")!=-1&&m_ConID.SearchSubString("TIID")!=-1)
			{
				CATListOfCATUnicodeString LstbackTIID;
				GetTIinfor(mBackPropety,LstbackTIID);

				CATListOfCATUnicodeString LstcurrentTIID;
				GetTIinfor(m_ConID,LstcurrentTIID);

				CATListOfCATUnicodeString lstAllTI;
				lstAllTI.Append(LstbackTIID);
				lstAllTI.Append(LstcurrentTIID);
				lstAllTI.RemoveDuplicates();

				m_ConID="";

				m_ConID = "Project:"+m_ProjectID+";TIStage:"+m_TIStageID;
				m_ConID.Append(";TIID:");
				for (int i=1;i<=lstAllTI.Size();i++)
				{
					m_ConID.Append(lstAllTI[i]);

					if (i<lstAllTI.Size())
						m_ConID.Append("_");
				}

			}
			else if (mBackPropety.SearchSubString("TIID")==-1&&m_ConID.SearchSubString("TIID")!=-1)
			{
				//原来的不是TI，当前的为TI，加上TIID属性
				spPar->Valuate(m_ConID);
			}
			else if (mBackPropety.SearchSubString("TIID")!=-1&&m_ConID.SearchSubString("TIID")==-1)
			{
				//原来的为TI，现在的不是TI，不需要修改
			}
			else
			{
				spPar->Valuate(m_ConID);
			}

			//cout<<"m_ConID==="<<m_ConID<<endl;

		}

	}


	CATUnicodeString strendTime=GetTimeofLocal();
	cout<<"end bulid tree time:"<<strendTime<<endl;

	return TRUE;
}
void RunInCmd::GetInformationfromsharepoint()
{
	//CATUnicodeString strReadeStartTime=GetTimeofLocal();
	//cout<<"start get information time:"<<strReadeStartTime<<endl;

	//获得配置文件Config.INI SharePoint下的参数
	//WebHost SharePointHost TargetValueSettingList ItemList 
	//ItemCollectorList RequiremenCollectorList CatiaUIList  
	//RequirementsList TaxonomyHiddenList DIGEST

	ReadIni();


	//获取参数

	CATUnicodeString strTitle;
	GetLastContainerUI(strTitle,m_UI_Type,m_ConID,m_ElementName,m_Automation_Tool_Type,m_Part_Type,m_TIStageID,m_ProjectID,m_TIStageName,m_ProjectName);
	m_NowPart_Type=m_Part_Type;

	if (m_UI_Type==""||m_Automation_Tool_Type==""||m_TIStageID==""||m_ProjectID=="")
	{
		MessageBoxA(NULL,"Get information from catia ui failed","Error",MB_OK);
		RequestDelayedDestruction();
		isreturn=TRUE;
		return;
	}

	_pGeelyCATProgressDlg->SetProgressPosition(5,"the system is retrieving the necessary information from the CRP, please wait, this might take several minutes");

	mActivePartObject= GetActivePart(mTIPartObject);
	if (m_Part_Type==insidePart)
	{
		CATISpecObject_var spActivePrd=GetActiveProduct();
		if (spActivePrd!=NULL_var)
		{
			//判断当前激活的对象是否为Part
			if (IsProduct(spActivePrd))
			{
				MessageBoxA(NULL,"It is not possible to generate the geometry in the active part since the active part is a product, the geometry will therefore be generated in a new part inside the product","information",MB_OK);
				m_NowPart_Type=createPart;
			}

		}

		if (m_NowPart_Type==insidePart)
		{
			mTIPartObject=mActivePartObject;

			//获得当前激活Part对应的product
			CATIPrtPart_var spTIPrtPart=mActivePartObject;
			mRootObject=spTIPrtPart->GetProduct();

			//获得当前Part的属性
			CATICkeParm_var spPrdPara = GetPrdParameter(false,mTIPartObject,"SharePointProjectID");
			CATUnicodeString mBackPropety="";
			if(spPrdPara!=NULL_var)
				mBackPropety = spPrdPara->Value()->AsString();

			if(mBackPropety!="")
			{
				CATUnicodeString strProject;
				CATUnicodeString strTIStage;

				GetPropertyinfor(mBackPropety,strProject,strTIStage);
				if (m_ProjectID!=strProject||m_TIStageID!=strTIStage)
				{
					MessageBoxA(NULL,"the project and stage you want to open is different to current project and stage, please open another part to excute","Error",MB_OK);
					RequestDelayedDestruction();
					isreturn=TRUE;
					return;
				}
				else
				{
					////判断原来文档类型及现在的文档类型是否匹配
					//if ()
					//{
					//}
				}

			}

			//获取External Parameters
			CATISpecObject_var spParamSet = CATCkeGlobalFunctions::GetFunctionFactory()->GetCurrentSet(CATICkeFunctionFactory::Parameter,GetActivePart(mTIPartObject),CATCke::True);
			if (spParamSet==NULL_var)
			{
				cout<<"get root para set failed"<<endl;
				RequestDelayedDestruction();
				isreturn=TRUE;
				return;
			}

			//获得参数根节点
			CATIParmPublisher_var spParmPublisher = spParamSet;
			if (spParmPublisher==NULL_var)
			{
				RequestDelayedDestruction();
				isreturn=TRUE;
				return;
			}

			//获得根节点参数集下的External Parameters
			CATBaseUnknown_var spExternalParamSet=NULL_var;
			GetParamSetFromParamRootByName(spParmPublisher,"External Parameters", spExternalParamSet);
			if (spExternalParamSet==NULL_var)
			{
				//创建External Parameters参数集
				CreateParaSet(spParmPublisher,"External Parameters",spExternalParamSet);
				if (spExternalParamSet==NULL_var)
				{
					cout<<"get root External Parameters set failed"<<endl;
					RequestDelayedDestruction();
					isreturn=TRUE;
					return;
				}
			}

			CATBaseUnknown_var spiParamSetpredecessors=NULL_var;
			GetParamSetFromParamRootByName(spExternalParamSet,"Parameters used by predecessors", spiParamSetpredecessors);
			if (spiParamSetpredecessors==NULL_var)
			{
				CreateParaSet(spExternalParamSet,"Parameters used by predecessors",spiParamSetpredecessors);
				if (spiParamSetpredecessors==NULL_var)
				{
					cout<<"get rootParameters used by predecessors set failed"<<endl;
					RequestDelayedDestruction();
					isreturn=TRUE;
					return;
				}
			}

			//更新
			GetActivePart(mTIPartObject)->Update();

		}

	}

	mAllComponetList.clear();
	mNoteComponetList.clear();

	GetCoponetAndParameters(mAllComponetList,
		m_ConID,
		m_ElementName,
		strTitle,
		m_Automation_Tool_Type,
		m_UI_Type,
		m_Part_Type,
		m_TIStageID,
		m_ProjectID,
		m_TIStageName,
		m_ProjectName);

	GetNoteStructComponet(mNoteComponetList);

	int sizeofNote=mNoteComponetList.size();
	cout<<"size of note in sharepoint=="<<sizeofNote<<endl;

	int sizeofTI=mAllComponetList.size();
	cout<<"size of TI automation tools=="<<sizeofTI<<endl;

	_pGeelyCATProgressDlg->SetProgressPosition(15,"get automation tools");


	if(sizeofTI<=0)
	{
		isreturn=TRUE;
		MessageBoxA(NULL,"There is an error to receive information from SharePoint","Error",MB_OK);
		RequestDelayedDestruction();
		return;
	}

	if (isreturn)
		return;

	//cout<<"BuildGraph"<<endl;

	_pGeelyCATProgressDlg->SetProgressPosition(20,"build specification tree");

	//构建结构树
	BulidTree();

	if (mActiveRootPrd!=NULL_var)
	{
		RefeshObject(mActiveRootPrd);
	}
	else if (mRootObject!=NULL_var)
	{
		RefeshObject(mRootObject);
	}

	//实例化自动化工具
	m_spCompent=mAllComponetList[0];

	pesent=int(80/(mAllComponetList.size()));
	cout<<"the pesent is "<<pesent<<endl;

	m_FirstTime=false;

}
CATBoolean RunInCmd::ActionOne( void *data )
{
	//cout<<"ActionOne"<<endl;

	m_Agent->InitializeAcquisition();

	if (m_FirstTime)
	{
		GetInformationfromsharepoint();
	}

	if(m_spCompent==NULL)
	{
		isCreated=FALSE;

		//检查OutPUT几何集下的元素是否发布
		CheckOutPut();

		//HideViews();

		msize++;

		//SetTxts();

		if(m_UI_Type=="TI"&&m_ReCount>0&&m_ReCount==m_NoReCount)
		{
			MessageBoxA(NULL,"no requirement linked to this TI has an automation tool available","Error",MB_OK);
		}

		m_lstAllID.RemoveAll();
		m_lstAllPath.RemoveAll();
		m_lstAllUDFName.RemoveAll();
		m_lstAllAddEmptyGst.RemoveAll();

		m_ReCount=0;
		m_NoReCount=0;

		m_iTspTextCount = 0;
		m_pTxtAnnot=NULL;

		if (msize>=mAllComponetList.size())
		{
			cout<<"ActionOne the total size of automation tools is :"<<msize<<endl;
			RequestDelayedDestruction();
			return TRUE;
		}

		m_spCompent=mAllComponetList[msize];

	}

	CATUnicodeString strErro;

	CATTry
	{
		if(m_lstAllID.Locate(m_spCompent->ID)<=0)
		{
			//获得udf的名称

			CATUnicodeString strudfName;
			if(m_spCompent->pRequement==NULL)
			{
				strudfName=m_spCompent->UdfName;
			}
			else
			{
				if(m_Automation_Tool_Type=="TI")
				{
					if(m_spCompent->pRequement->strTIName!="")
					{
						strudfName=m_spCompent->pRequement->strTIName;
					}
				}
				else
				{
					if(m_spCompent->pRequement->strFCName!="")
					{
						strudfName=m_spCompent->pRequement->strFCName;
					}
				}
			}

			CATBoolean isfind=FALSE;
			if (m_spCompent->Path!=""&&strudfName!="")
			{
				//判断是否已实例化udf
				if (m_lstAllPath.Locate(m_spCompent->Path)>0)
				{
					for (int i=1;i<=m_lstAllPath.Size();i++)
					{
						if (m_lstAllPath[i]==m_spCompent->Path)
						{
							if (m_lstAllUDFName[i]==strudfName)
							{
								isfind=TRUE;
								break;
							}
						}
					}
				}
			}
			else
			{
				isfind=FALSE;
			}

			if (isfind==TRUE)
			{
				cout<<"**************************************************************************"<<endl;
				cout<<"Udf  has same name and same path in current document:"<<strudfName<<endl;
				cout<<"**************************************************************************"<<endl;
			}
			else
			{
				int progress=20+msize*pesent;
				_pGeelyCATProgressDlg->SetProgressPosition(progress,m_spCompent->Name);

				strErro= InitOne();

				if (strudfName!=""&&m_spCompent->Path!="")
				{
					m_lstAllID.Append(m_spCompent->ID);
					m_lstAllPath.Append(m_spCompent->Path);
					m_lstAllUDFName.Append(strudfName);

				}


			}

		}

	}
	CATCatch(CATError,error)
	{
		//MessageBoxA(NULL,"Update error,please check the parameter value or input element！","Error",MB_OK);
	}
	CATEndTry;

	if(strErro=="")
	{
		////实例化下一个UDF
		//SendNotification(this,m_Notify);
		//m_spCompent = m_spCompent->pNext;

		GoToNext();

	}
	else
	{
		//MessageBoxA(NULL,strErro,"Error",MB_OK);

		if(strErro.SearchSubString("execution error, reason: cannot find input element for udf")>=0||strErro.SearchSubString("cannot find input parameter value in sharepoint for udf")>=0)
		{
			//显示UDF界面
			ShowUdfDlg();
		}
		else
		{
			//实例化下一个UDF
			GoToNext();

			//SendNotification(this,m_Notify);
			//m_spCompent = m_spCompent->pNext;

		}

	}

	return TRUE;
}

void RunInCmd::ShowUdfDlg()
{
	//cout<<"ShowUdfDlg start"<<endl;

	//获取External Parameters
	CATISpecObject_var spParamSet = CATCkeGlobalFunctions::GetFunctionFactory()->GetCurrentSet(CATICkeFunctionFactory::Parameter,GetActivePart(mTIPartObject),CATCke::True);
	if (spParamSet==NULL_var)
	{
		cout<<"GetCurrentSet Failed"<<endl;
		return;
	}

	//获得参数根节点
	CATIParmPublisher_var spParmPublisher = spParamSet;
	if (spParmPublisher==NULL_var)
	{
		cout<<"Get CATIParmPublisher Failed"<<endl;
		return;
	}

	//获得根节点参数集下的External Parameters
	CATBaseUnknown_var spExternalParamSet=NULL_var;
	GetParamSetFromParamRootByName(spParmPublisher,"External Parameters", spExternalParamSet);
	if (spExternalParamSet==NULL_var)
	{
		//创建External Parameters参数集
		CreateParaSet(spParmPublisher,"External Parameters",spExternalParamSet);
		if (spExternalParamSet==NULL_var)
		{
			cout<<"Get External Parameters Failed"<<endl;
			return;
		}
	}

	CATBaseUnknown_var spiParamSetpredecessors=NULL_var;
	GetParamSetFromParamRootByName(spExternalParamSet,"Parameters used by predecessors", spiParamSetpredecessors);
	if (spiParamSetpredecessors==NULL_var)
	{
		CreateParaSet(spExternalParamSet,"Parameters used by predecessors",spiParamSetpredecessors);
		if (spiParamSetpredecessors==NULL_var)
		{
			cout<<"Get Parameters used by predecessors Failed"<<endl;
			return;
		}
	}

	CATISpecObject_var spObjPart = GetActivePart(mTIPartObject);
	if(spObjPart==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return;
	}

	CATICkeParmFactory_var spParFac = spObjPart->GetFeatContainer();
	if(spParFac==NULL_var)
	{
		cout<<"GetFeatContainer Failed"<<endl;
		return;
	}

	CATPathElement* pActElement =GetTIPartPathElement(mTIPartObject);

	//cout<<"udf dlg name==="<<m_spCompent->Name<<endl;

	if (m_pDlgUdf!=NULL)
	{
		m_pDlgUdf->RequestDelayedDestruction();
		m_pDlgUdf=NULL;
	}

	CATUnicodeString strTitle;
	strTitle.Append(m_spCompent->Name);
	strTitle.Append("(id:");
	strTitle.Append(m_spCompent->ID);
	strTitle.Append(")");

	m_pDlgUdf = new CATDlgDialog((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(),"DlgUdf",CATDlgWndAutoResize|CATDlgWndBtnOKCancel|CATDlgGridLayout);//CATDlgWndNoResize
	m_pDlgUdf->SetTitle(strTitle);
	m_pDlgUdf->SetOKSensitivity(CATDlgEnable);
	m_pDlgUdf->SetGridColumnResizable(0,1);
	m_pDlgUdf->SetVisibility(CATDlgShow);

	CATListOfCATUnicodeString * pListOfInputRole = NULL ;
	CATListValCATBaseUnknown_var * pListOfInput = NULL  ;
	m_ActiveUdfIni->GetOldInputs(pListOfInput,pListOfInputRole);
	if (pListOfInputRole==NULL||pListOfInputRole->Size()==0)
	{
		cout<<"Get active udf Inputs is null:"<<m_spCompent->Name<<endl;

		GoToNext();

		return;
	}

	//cout<<"the udf input size==="<<pListOfInputRole->Size()<<endl;

	m_lstSelect=NULL;
	m_lstEditor=NULL;
	m_lstSelectAgent=NULL;
	m_PathAgent=NULL;

	m_lstSelect = new CATDlgSelectorList*[pListOfInputRole->Size()];
	m_lstEditor =  new CATDlgEditor*[pListOfInputRole->Size()];
	m_lstSelectAgent = new CATDialogAgent*[pListOfInputRole->Size()];

	CATDialogState **UdfState = new CATDialogState*[pListOfInputRole->Size()];

	m_PathAgent = new CATPathElementAgent*[pListOfInputRole->Size()];

	CATAcquisitionFilter **pFilters = new CATAcquisitionFilter *[pListOfInputRole->Size()];
	int iColCount = 1;

	if(pListOfInputRole->Size()>10&&pListOfInputRole->Size()<=20)
		iColCount =2;
	else if(pListOfInputRole->Size()>20)
		iColCount =3;

	int iRow = 0;
	int iCol = 0;
	CATDlgFrame* pFrm = NULL;
	CATDlgTabContainer *pTabCon=NULL;
	if(pListOfInputRole->Size()<=60)
	{
		pFrm = new CATDlgFrame(m_pDlgUdf, "frm", CATDlgGridLayout);
	}
	else
	{
		pTabCon = new CATDlgTabContainer(m_pDlgUdf, "Tab");
		pTabCon -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
		CATDlgTabPage* pPage = new CATDlgTabPage(pTabCon, "Page1", CATDlgGridLayout);
		pFrm = new CATDlgFrame(pPage, "frm", CATDlgGridLayout);
	}

	pFrm -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
	pFrm->SetTitle("Inputs");
	pFrm->SetGridColumnResizable(1,1);

	if (mstrlackParavalueMsg!="")
	{
		CATUnicodeString title;
		CATUnicodeString errorinfor;

		CATListOfCATUnicodeString LstSplitUnicode=SplitUnicode(mstrlackParavalueMsg,"-->");
		if (LstSplitUnicode.Size()==2)
		{
			title=LstSplitUnicode[1];
			errorinfor=LstSplitUnicode[2];

			//cout<<"lable title:"<<title<<endl;
			//cout<<"errorinfor:"<<errorinfor<<endl;

			CATDlgLabel *label = new CATDlgLabel(m_pDlgUdf, "label");
			label -> SetGridConstraints(1,0, 1, 1, CATGRID_4SIDES);
			label->SetTitle(title);

			int size=2;

			//已逗号分隔
			LstSplitUnicode.RemoveAll();
			LstSplitUnicode=SplitUnicode(errorinfor,",");
			for (int i=1;i<=LstSplitUnicode.Size();i++)
			{
				//每个lable写四个
				CATUnicodeString strmsg;
				strmsg.Append(LstSplitUnicode[i]);

				if ((i+1)<=LstSplitUnicode.Size())
				{			
					strmsg.Append(",");
					strmsg.Append(LstSplitUnicode[i+1]);
				}

				if ((i+2)<=LstSplitUnicode.Size())
				{	
					strmsg.Append(",");
					strmsg.Append(LstSplitUnicode[i+2]);
				}

				//if ((i+3)<=LstSplitUnicode.Size())
				//{	
				//	strmsg.Append(",");
				//	strmsg.Append(LstSplitUnicode[i+3]);
				//}

				CATDlgLabel *label = new CATDlgLabel(m_pDlgUdf, "label");
				label -> SetGridConstraints(size,0, 1, 1, CATGRID_4SIDES);
				label->SetTitle(strmsg);

				i=i+3;

				size++;
			}

		}


	}

	m_ActiveUdfInputs.RemoveAll();

	//当前激活文档查找参数，创建参数界面
	for(int ii=1;ii<=pListOfInputRole->Size();ii++)
	{
		if(ii>1&&(ii-1)%60==0)
		{			
			CATString strIndes = "Page2";
			if(ii==121)
				strIndes = "Page3";
			else if(ii==181)
				strIndes = "Page4";
			else if(ii==241)
				strIndes = "Page5";
			else if(ii==301)
				strIndes = "Page6";
			else if(ii==361)
				strIndes = "Page7";
			else if(ii>361)
				strIndes = "Page++";

			CATDlgTabPage* pPage = new CATDlgTabPage(pTabCon, strIndes, CATDlgGridLayout);
			pFrm = new CATDlgFrame(pPage, "frm", CATDlgGridLayout);
			pFrm -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
			pFrm->SetTitle("Inputs");
		}

		CATUnicodeString strName=(*pListOfInputRole)[ii];

		if(strName.SearchSubString("`")==0)
			strName.ReplaceAll("`","");

		CATUnicodeString strEncod =changrEncod(strName);

		//int iIndex = m_spCompent->Parameters.Locate(strEncod);
		//if(iIndex==0)
		//	iIndex = m_spCompent->Parameters.Locate(strName);

		CATListOfCATUnicodeString lstParaName=m_spCompent->Parameters;
		if (lstParaName.Size()==0)
		{
			cout<<"this Compent has no input parameters,the id is:"<<m_spCompent->ID<<endl;
		}

		int iIndex=0;
		GetIndex( lstParaName,strEncod,iIndex);
		if(iIndex==0)
			GetIndex( lstParaName,strName,iIndex);

		//在当前激活文档查找参数
		CATPathElement* pInput = GetUdfInput((*pListOfInputRole)[ii]);
		if (pInput==NULL)
		{
			//cout<<"udf dlf GetUdfInput failed,need create"<<endl;
		}

		m_ActiveUdfInputs.Append(pInput);

		CATICkeParm_var spPar = ((*pListOfInput)[ii]);

		bool isParm=false;

		CATIType_var spType=NULL_var;
		CATUnicodeString strType ;
		if(spPar!=NULL_var)
		{
			spType = spPar->Type();

			strType =spType->Name();

			if(strType!="Surface"&&strType!="Plane"&&strType!="Curve"&&strType!="Line"&&strType!="Point")
				isParm =true;
		}

		//cout<<"Para type:"<<strType<<endl;

		if(isParm==true&&pInput==NULL)		
		{
			//没有查找到参数则创建(为参数，新建参数)
			CATUnicodeString strName = (*pListOfInputRole)[ii];
			strName.ReplaceAll("`","");

			CATDlgLabel *label = new CATDlgLabel(pFrm, "label");
			label -> SetGridConstraints(iRow,iCol*2, 1, 1, CATGRID_4SIDES);
			label->SetTitle(" "+(*pListOfInputRole)[ii]+": ");

			m_lstSelect[ii-1]=NULL;

			CATDlgStyle pStyle=NULL;
			m_lstEditor[ii-1] = new CATDlgEditor(pFrm,"Edit",pStyle);
			m_lstEditor[ii-1] -> SetGridConstraints(iRow,iCol*2+1, 1, 1, CATGRID_4SIDES);
			m_lstEditor[ii-1] -> SetVisibleTextWidth(10);
			//m_lstEditor[ii-1] -> SetGridColumnResizable(1,1);
			//m_lstEditor[ii-1] -> SetGridRowResizable(1,1);

			//create param
			CATICkeParm_var spNewParam = spParFac->CreateLiteral(spType,strName);

			if(iIndex>0)
			{
				if(m_spCompent->ParametersValue[iIndex]=="notfound")
				{
					spNewParam->Valuate(spPar->Value());
				}
				else
				{
					CATUnicodeString strValue = m_spCompent->ParametersValue[iIndex];
					if(strType=="Integer")
					{
						int iValue=0;
						strValue.ConvertToNum(&iValue);
						spNewParam->Valuate(iValue);
					}
					else if(strType=="Real")
					{
						double dValue=0;
						strValue.ConvertToNum(&dValue);
						spNewParam->Valuate(dValue);
					}
					else if(strType=="double")
					{
						double dValue=0;
						strValue.ConvertToNum(&dValue);

						if (strValue.SearchSubString("mm")==-1)
						{
							spNewParam->Valuate(dValue/1000);
						}
						else
						{
							spNewParam->Valuate(strValue);
						}
					}
					else if (strType=="LENGTH")
					{
						if (strValue.SearchSubString("mm")==-1)
						{
							strValue.Append("mm");
						}

						spNewParam->Valuate(strValue);
					}
					else if (strType=="ANGLE")
					{
						if (strValue.SearchSubString("deg")==-1)
						{
							strValue.Append("deg");
						}

						spNewParam->Valuate(strValue);
					}
					else
					{
						spNewParam->Valuate(strValue);
					}

				}
			}
			else
			{
				spNewParam->Valuate(spPar->Value());
			}

			m_lstEditor[ii-1]->SetText(spPar->Value()->AsString());

			if (m_spCompent->pRequement==NULL)
			{
				//输入几何集的参数
				spParmPublisher=spiParamSetpredecessors;
			}
			else
			{
				//输出几何集的参数
				spParmPublisher=spExternalParamSet;
			}

			spParmPublisher->Append(spNewParam);

			CATIBuildPath *pBuildPath = NULL;
			spNewParam->QueryInterface(IID_CATIBuildPath,(void **)&pBuildPath);

			if(pBuildPath!=NULL)
			{
				CATPathElement *pRes=NULL;
				pBuildPath->ExtractPathElement(pActElement,&pRes);

				m_ActiveUdfInputs[ii]=pRes;
			}

			m_lstSelectAgent[ii-1] =NULL;

			UdfState[ii-1] = NULL;

			m_PathAgent[ii-1] = NULL;

			pFilters[ii-1] =NULL;
		}
		else
		{
			//查找到参数
			m_lstEditor[ii-1]=NULL;

			CATDlgLabel *label = new CATDlgLabel(pFrm, "label");
			label -> SetGridConstraints(iRow,iCol*2, 1, 1, CATGRID_4SIDES);
			label->SetTitle(" "+(*pListOfInputRole)[ii]+": ");

			m_lstSelect[ii-1] = new CATDlgSelectorList(pFrm,"Select");
			m_lstSelect[ii-1] -> SetGridConstraints(iRow,iCol*2+1, 1, 1, CATGRID_4SIDES);
			m_lstSelect[ii-1]->SetVisibleTextHeight(1);
			m_lstSelect[ii-1] -> SetVisibleTextWidth(15);
			//m_lstSelect[ii-1] -> SetGridColumnResizable(1,1);
			//m_lstSelect[ii-1] -> SetGridRowResizable(1,1);

			if(pInput==NULL)
				m_lstSelect[ii-1]->SetLine("please select...");
			else
				m_lstSelect[ii-1]->SetLine((*pListOfInputRole)[ii]);

			m_lstSelectAgent[ii-1] = new CATDialogAgent("OK");
			m_lstSelectAgent[ii-1]->AcceptOnNotify(m_lstSelect[ii-1],m_lstSelect[ii-1]->GetListSelectNotification());

			CATString strCString = (*pListOfInputRole)[ii];
			strCString = "Please select "+strCString;

			UdfState[ii-1] = AddDialogState(strCString);

			m_PathAgent[ii-1] = new CATPathElementAgent(strCString);
			m_PathAgent[ii-1]->SetBehavior(CATDlgEngWithPSO | CATDlgEngWithPrevaluation);
			m_PathAgent[ii-1]->AddElementType(IID_CATISpecObject);

			pFilters[ii-1] = Filter((FilterMethod)&RunInCmd::FilterSelect,(void *)ii);
			m_PathAgent[ii-1]->SetFilter(pFilters[ii-1]);
		}

		iCol++;

		if(iColCount<=iCol)
		{
			iCol=0;
			iRow++;
		}
	}

	for(int ii=1;ii<=pListOfInputRole->Size();ii++)
	{
		if(m_lstSelect[ii-1]==NULL)
			continue;

		m_initialState -> AddDialogAgent (m_lstSelectAgent[ii-1]);

		for(int jj=1;jj<=pListOfInputRole->Size();jj++)
		{
			if(m_lstSelect[jj-1]==NULL)
				continue;

			if(ii==jj)
				UdfState[ii-1] -> AddDialogAgent (m_PathAgent[ii-1]);
			else
				UdfState[ii-1] -> AddDialogAgent (m_lstSelectAgent[jj-1]);
		}
	}

	for(int ii=1;ii<=pListOfInputRole->Size();ii++)
	{
		if(m_lstSelect[ii-1]==NULL)
			continue;

		CATDiaAction* pAction = Action ((ActionMethod) &RunInCmd::ActionClick);

		pAction->SetData((void *)ii);

		AddTransition( m_initialState, UdfState[ii-1], IsOutputSetCondition(m_lstSelectAgent[ii-1]),pAction);
					
	}

	for(int ii=1;ii<=pListOfInputRole->Size();ii++)
	{
		if(m_lstSelect[ii-1]==NULL)
			continue;

		for(int jj=1;jj<=pListOfInputRole->Size();jj++)
		{
			if(m_lstSelect[jj-1]==NULL)
				continue;

			CATDiaAction* pActionClick = Action ((ActionMethod) &RunInCmd::ActionClick);
			pActionClick->SetData((void *)jj);

			CATDiaAction* pActionSelect = Action ((ActionMethod) &RunInCmd::ActionSelect);
			pActionSelect->SetData((void *)jj);

			if(ii==jj)
				AddTransition( UdfState[ii-1], m_initialState, IsOutputSetCondition(m_PathAgent[ii-1]),pActionSelect);			
			else
				AddTransition( UdfState[ii-1], UdfState[jj-1], IsOutputSetCondition(m_lstSelectAgent[jj-1]),pActionClick);
							
		}

	}

	if (m_spCompent->isshowudfdlg)
	{
		cout<<"need excude udf dlg ok action"<<endl;

		AddAnalyseNotificationCB (m_pDlgUdf, 
			m_pDlgUdf->GetDiaCANCELNotification(),
			(CATCommandMethod)&RunInCmd::OnCloseNotification,
			NULL);

		AddAnalyseNotificationCB (m_pDlgUdf, 
			m_pDlgUdf->GetWindCloseNotification(),
			(CATCommandMethod)&RunInCmd::OnCloseNotification,
			NULL);

		AddAnalyseNotificationCB (m_pDlgUdf, 
			m_pDlgUdf->GetDiaOKNotification(),
			(CATCommandMethod)&RunInCmd::OnUdfOKNotification,
			NULL);
	}
	else
	{
		cout<<"not need excude udf dlg ok action"<<endl;
	}

	for(int ii =1;ii<=m_ActiveUdfInputs.Size();ii++)
	{
		if(m_ActiveUdfInputs[ii]==NULL_var)
		{
			if(m_lstSelect[ii-1]==NULL)
				continue;

			int iInedex=0;
			m_lstSelect[ii-1]->SetSelect(&iInedex,1,0);

			m_pDlgUdf->SetOKSensitivity(CATDlgDisable);

			CATUnicodeString strLabel = (*pListOfInputRole)[ii];
			m_ErrorMsg.Append(strLabel);
			m_Errorudf.Append(m_spCompent->Name);
			//break;
		}
	}

	CATBoolean isfirst=FALSE;
	for(int ii=1;ii<=m_ActiveUdfInputs.Size();ii++)
	{
		if(m_lstSelect[ii-1]==NULL)
			continue;

		CATUnicodeString  oString;
		m_lstSelect[ii-1]->GetLine(oString, 0);
		if (oString=="please select..."&&isfirst==FALSE)
		{
			isfirst=TRUE;
			int iInedex=0;
			m_lstSelect[ii-1]->SetSelect(&iInedex,1,0);

		}
		else
		{
			m_lstSelect[ii-1]->ClearSelect();

		}
	}

	m_pDlgUdf->SetVisibility(CATDlgShow);

	//if (m_Part_Type==createPart&&isNewEditor==TRUE)

	if (isNewEditor==TRUE)
	{
		cout<<m_spCompent->Name<<"<------------>automation run this udf dlg ok action"<<endl;

		OnUdfOKNotification (this, NULL , NULL);
	}

	//cout<<"ShowUdfDlg end"<<endl;

}
CATPathElement*  RunInCmd::GetTIPartPathElement(CATISpecObject_var spTIPartObject)
{
	CATIPrtPart_var spTIPrtPart=spTIPartObject;

	CATPathElement * pTargetContext =NULL;

	GetPathElementFromObject(pTargetContext, mActiveFrmEditor,spTIPartObject);

	return pTargetContext;
}
CATBoolean  RunInCmd::FilterSelect(CATDialogAgent * iAgent,void * data)
{
	int iIndex = (int)data;

	CATPathElementAgent *pPathElement = m_PathAgent[iIndex-1];
	if (pPathElement==NULL)
		return FALSE;

	CATPathElement *pElem = pPathElement->GetValue();
	if(pElem==NULL)
		return FALSE;

	CATPathElement *newElem=NULL;
	if(SUCCEEDED(m_ActiveUdfIni->FilterInput(iIndex,pElem,&newElem))&&newElem!=NULL)
		return TRUE;

	return FALSE;
}
CATBoolean  RunInCmd::ActionSelect(void * data)
{
	int iIndex = (int)data;

	CATPathElementAgent *pPathElement = m_PathAgent[iIndex-1];
	if (pPathElement==NULL)
		return FALSE;

	CATPathElement *pElem = pPathElement->GetValue();

	m_PathAgent[iIndex-1]->InitializeAcquisition();
	if(pElem==NULL)
		return FALSE;

	CATPathElement *newElem=NULL;

	if(SUCCEEDED(m_ActiveUdfIni->FilterInput(iIndex,pElem,&newElem))&&newElem!=NULL)
	{
		CATUnicodeString strName="no Name";

		CATBaseUnknown* pSel=newElem->FindElement(IID_CATBaseUnknown);

		CATIAlias_var spAlias = pSel;
		if(spAlias!=NULL_var)
			strName = spAlias->GetAlias();

		m_lstSelect[iIndex-1]->ClearLine();

		m_lstSelect[iIndex-1]->SetLine(strName);

		m_ActiveUdfInputs[iIndex] = newElem;

		bool isFind = false;
		for(int ii =1;ii<=m_ActiveUdfInputs.Size();ii++)
		{
			if(m_lstSelect[ii-1]==NULL)
				continue;

			if(m_ActiveUdfInputs[ii]==NULL_var)
			{
				int iInedex=0;
				m_lstSelect[ii-1]->SetSelect(&iInedex,1,0);
				isFind = true;
				break;
			}
			//else
			//{
			//	m_lstSelect[ii-1]->ClearSelect();
			//}
		}

		if(!isFind)
		{
			m_pDlgUdf->SetOKSensitivity(CATDlgEnable);
		}
	}

	return TRUE;
}
CATBoolean  RunInCmd::ActionClick(void * data)
{
	int iIndex = (int)data;

	m_lstSelectAgent[iIndex-1]->InitializeAcquisition();

	for(int ii=1;ii<=m_ActiveUdfInputs.Size();ii++)
	{
		if(m_lstSelect[ii-1]==NULL)
			continue;

		if(iIndex!=ii)
			m_lstSelect[ii-1]->ClearSelect();
	}

	return TRUE;
}
void RunInCmd::OnUdfOKNotification (CATCommand *, CATNotification* , CATCommandClientData data)
{
	//cout<<"OnUdfOKNotification start"<<endl;

	HRESULT rc=E_FAIL;

	if (m_pDlgUdf)
	{
		//防止点击多次
		m_pDlgUdf->SetVisibility(CATDlgHide);
	}

	CATBoolean  isreturn=FALSE;

	//udf 的名称
	CATUnicodeString strUdfName;
	if(m_spCompent->pRequement==NULL)
	{
		strUdfName=m_spCompent->UdfName;
	}
	else
	{
		if(m_Automation_Tool_Type=="TI")
		{
			if(m_spCompent->pRequement->strTIName!="")
			{
				strUdfName=m_spCompent->pRequement->strTIName;
			}
		}
		else
		{
			if(m_spCompent->pRequement->strFCName!="")
			{
				strUdfName=m_spCompent->pRequement->strFCName;
			}
		}
	}

	if (m_spCompent->isshowudfdlg==FALSE)
	{
		cout<<"should not OnUdfOKNotification----------->"<<m_spCompent->Name<<endl;

		isreturn=TRUE;

		//return;
	}

	if (isreturn==TRUE)
	{
		GoToNext();
	}
	else
	{
		if (m_pDlgUdf==NULL||m_ActiveUdfInputs.Size()==0||m_ActiveUdfIni==NULL_var)
		{
			cout<<"get udf Dlg input error"<<endl;

			isreturn=TRUE;

			//return;
		}

		if (isreturn==TRUE)
		{
			GoToNext();
		}
		else
		{
			m_spCompent->ispressudfdlgok=TRUE;

			CATListOfCATUnicodeString * pListOfInputRole = NULL ;
			CATListValCATBaseUnknown_var * pListOfInput = NULL  ;
			m_ActiveUdfIni->GetOldInputs(pListOfInput,pListOfInputRole);
			if (pListOfInputRole==NULL||pListOfInputRole->Size()==0)
			{
				cout<<"Get active udf Inputs is null"<<endl;

				isreturn=TRUE;

				//return;
			}

			//cout<<"the udf input size==="<<pListOfInputRole->Size()<<endl;
			//cout<<"m_ActiveUdfInputs.Size()==="<<m_ActiveUdfInputs.Size()<<endl;

			if (isreturn==TRUE)
			{
				GoToNext();
			}
			else
			{
				for(int ii=1;ii<=m_ActiveUdfInputs.Size();ii++)
				{
					CATPathElement *pInput = (CATPathElement*)(CATBaseUnknown*)m_ActiveUdfInputs[ii];
					rc=m_ActiveUdfIni->SetNewInput(ii,pInput);
					if (FAILED(rc))
					{
						cout<<"SetNewInput Failed--->OnUdfOKNotification"<<endl;
					}

					if(m_lstEditor[ii-1]!=NULL&&pInput!=NULL)
					{
						CATUnicodeString strValue=m_lstEditor[ii-1]->GetText();

						CATICkeParm_var spPar = (CATICkeParm_var)pInput->FindElement(IID_CATICkeParm);

						CATIType_var spType = spPar->Type();

						CATUnicodeString strType =spType->Name();

						//cout<<"Para Type:"<<strType<<endl;

						if(strType=="Integer")
						{
							int iValue=0;
							strValue.ConvertToNum(&iValue);
							spPar->Valuate(strValue);
						}
						else if(strType=="Real")
						{
							double dValue=0;
							strValue.ConvertToNum(&dValue);
							spPar->Valuate(strValue);

						}
						else if(strType=="double")
						{
							double dValue=0;
							strValue.ConvertToNum(&dValue);

							if (strValue.SearchSubString("mm")==-1)
							{
								spPar->Valuate(dValue/1000);
							}
							else
							{
								spPar->Valuate(strValue);
							}

						}
						else if(strType=="LENGTH")
						{
							if (strValue.SearchSubString("mm")==-1)
							{
								strValue.Append("mm");
							}
							spPar->Valuate(strValue);

						}
						else if(strType=="ANGLE")
						{
							if (strValue.SearchSubString("deg")==-1)
							{
								strValue.Append("deg");
							}
							spPar->Valuate(strValue);
						}
						else
						{
							spPar->Valuate(strValue);
						}	

						//获取参数的名称
						CATUnicodeString strName = spPar->InternalRole();
						if(strName.SearchSubString("`")==0)
							strName.ReplaceAll("`","");

						CATUnicodeString strEncod =changrEncod(strName);

						//int iIndex = m_spCompent->Parameters.Locate(strEncod);
						//if(iIndex==0)
						//	iIndex = m_spCompent->Parameters.Locate(strName);

						CATListOfCATUnicodeString lstParaName=m_spCompent->Parameters;
						if (lstParaName.Size()==0)
						{
							cout<<"this Compent has no input parameters,the id is:"<<m_spCompent->ID<<endl;
						}

						int iIndex=0;
						GetIndex( lstParaName,strEncod,iIndex);
						if(iIndex==0)
							GetIndex( lstParaName,strName,iIndex);

						if(iIndex>0)
						{
							//cout<<"Para name :"<<strName<<endl;
							CATIAllowUserInfo_var spUIn = spPar;
							spUIn->SetComment("ItemID:"+m_spCompent->ParametersID[iIndex]+";Type:In");
						}

					}
				}

				CATListValCATBaseUnknown_var *pListOfParam=NULL;
				CATListOfCATUnicodeString *pListOfParamRole=NULL;
				HRESULT rc = m_ActiveUdfIni->GetParameters(pListOfParam,pListOfParamRole);
				if ( FAILED(rc) || ( NULL ==pListOfParam ) || ( NULL== pListOfParamRole ) )
				{
					//无参数
				}
				else
				{
					CATICkeParmFactory* piFact = NULL;
					for(int ii=1;ii<=pListOfParamRole->Size();ii++)
					{
						CATICkeParm_var spParam = GetParameter((*pListOfParamRole)[ii],mTIPartObject);
						if(spParam==NULL_var)
							continue;

						if(piFact==NULL)
						{
							CATISpecObject_var spObj = spParam;
							spObj->GetFeatContainer()->QueryInterface(IID_CATICkeParmFactory, (void**) &piFact);
						}

						CATCkeListOf(Parm) paramList;
						paramList.Append (spParam);

						CATICkeParm_var spParamInput = (*pListOfParam)[ii];
						CATICkeRelation_var spFormula = piFact->CreateFormula ("VolumeFormula","","",spParamInput,&paramList,"a1",NULL_var,CATCke::False);
						CATISpecObject_var spRelationSet = CATCkeGlobalFunctions::GetFunctionFactory()->GetCurrentSet(CATICkeFunctionFactory::Relation,GetActivePart(mTIPartObject),CATCke::True);
						if (!!spRelationSet)
						{
							CATIParmPublisher_var spParmPublisher = spRelationSet;
							if (!!spParmPublisher)
							{
								spParmPublisher->Append(spFormula);
							}
						}
					}
				}


				CATIPrtPart_var spPrtPart = GetActivePart(mTIPartObject);
				if (spPrtPart==NULL_var)
				{
					cout<<"GetActivePart Failed"<<endl;
					return;
				}

				CATISpecObject_var spPartObject=spPrtPart;
				if (spPartObject==NULL_var)
				{
					cout<<"GetActivePart Failed"<<endl;
					return;
				}

				rc = m_ActiveUdfIni->Instantiate(spPrtPart->GetCurrentFeature());
				if ( FAILED(rc) )
				{
					CATUnicodeString strMsg;
					strMsg.Append("execution error, reason: error during the execution of the Instantiate udf--->");
					strMsg.Append(strUdfName);
					MessageBoxA(NULL,strMsg,"Error",MB_OK);

					isreturn=TRUE;

					//return;
				}

				m_ActiveUdfIni->EndInstantiate();
				m_ActiveUdfIni->Reset();

				if (isreturn==TRUE)
				{
					GoToNext();
				}
				else
				{
					CATTry
					{
						spPartObject->Update();
					
					}
					CATCatch(CATError,error)
					{
						//MessageBoxA(NULL,"Update error,please check the parameter value or input element！","Error",MB_OK);

						isreturn=TRUE;

						//return;
					}
					CATEndTry;

					if (isreturn==TRUE)
					{
						GoToNext();
					}
					else
					{
						CATIDescendants_var spTargetGSDBody2=spCurrentFea;
						spTargetGSDResult2.RemoveAll();
						spTargetGSDBody2->GetDirectChildren("CATISpecObject",spTargetGSDResult2);
						originnum2=spTargetGSDResult2.Size();

						cout<<"After udf size="<<originnum2<<endl;

						CATListValCATBaseUnknown_var ListOutputFea;
						for (int i=originnum1+1;i<=originnum2;i++)
						{
							ListOutputFea.Append(spTargetGSDResult2[i]);
						}

						//获得udf的输出，修改输出几何集的名称为udf的名称
						SetudfOutputName(ListOutputFea,strUdfName);

						//当前udf output元素中查找annotation plane
						SetTSP(ListOutputFea);

						m_pDlgUdf->RequestDelayedDestruction();
						m_pDlgUdf = NULL;

						//输出参数设置
						CATListValCATISpecObject_var lstParameters;
						CATListValCATISpecObject_var lstCkecks;
						CATIDescendants_var spDesPart = spPrtPart;
						spDesPart->GetAllChildren("CATICkeParm",lstParameters);
						spDesPart->GetAllChildren("CATICkeCheck",lstCkecks);

						for(int jj=1;jj<=lstParameters.Size();jj++)
						{
							CATISpecObject_var spFind = lstParameters[jj];

							CATIAllowUserInfo_var spUIn = spFind;

							CATIAlias_var spAlias = spFind;

							CATUnicodeString strChildName=spAlias->GetAlias();

							strChildName.ReplaceAll("`","");

							if(strChildName!="")
							{
								int iIndex =  strChildName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
								if(iIndex>=0)
									strChildName = strChildName.SubString(iIndex+1,strChildName.GetLengthInChar()-iIndex-1);
							}
							else
								continue;

							if(spUIn==NULL_var||strChildName.SearchSubString("_Actual")<0)
								continue;

							strChildName.ReplaceSubString("_Actual","");

							CATUnicodeString strEncod =changrEncod(strChildName);

							CATListOfCATUnicodeString lstoutputParaName=m_spCompent->OutPutName;
							if (lstoutputParaName.Size()==0)
							{
								cout<<"this Compent has no output parameters,the id is:"<<m_spCompent->ID<<endl;
							}

							int ii=0;
							GetIndex( lstoutputParaName,strEncod,ii);
							if(ii==0)
								GetIndex( lstoutputParaName,strChildName,ii);

							//int ii = m_spCompent->OutPutName.Locate(strEncod);
							//if(ii==0)
							//	ii = m_spCompent->OutPutName.Locate(strChildName);

							//int iIndex = m_spCompent->Parameters.Locate(strEncod);
							//if(iIndex==0)
							//	iIndex = m_spCompent->Parameters.Locate(strChildName);

							CATListOfCATUnicodeString lstParaName=m_spCompent->Parameters;
							if (lstParaName.Size()==0)
							{
								cout<<"this Compent has no input parameters,the id is:"<<m_spCompent->ID<<endl;
							}

							int iIndex=0;
							GetIndex( lstParaName,strEncod,iIndex);
							if(iIndex==0)
								GetIndex( lstParaName,strChildName,iIndex);

							if(ii>0)
							{
								spUIn->SetComment("ItemID:"+m_spCompent->OutPutID[ii]+";Type:Out");

								CATUnicodeString strValue;

								CATICkeParm_var spParm = spFind;

								CATUnicodeString str = spParm->Value()->AsString();

								double dValue=0;

								if(str.ConvertToNum(&dValue))
									strValue.BuildFromNum(dValue);

								if(strValue!="")
									UploadActaulTaget(m_spCompent->OutPutID[ii],strValue);
							}
							else if(iIndex>0)
							{
								CATUnicodeString strComment = spUIn->GetComment();

								if(strComment.SearchSubString(";Type:Out")<0&&strComment.SearchSubString("ItemID:")<0)
								{
									spUIn->SetComment("ItemID:"+m_spCompent->ParametersID[iIndex]+";Type:Out");

									CATUnicodeString strValue;

									CATICkeParm_var spParm = spFind;

									CATUnicodeString str = spParm->Value()->AsString();

									double dValue=0;

									if(str.ConvertToNum(&dValue))
										strValue.BuildFromNum(dValue);

									if(strValue!="")
										UploadActaulTaget(m_spCompent->ParametersID[iIndex],strValue);
								}
							}
						}


						for(int jj=1;jj<=lstCkecks.Size();jj++)
						{
							CATISpecObject_var spFind = lstCkecks[jj];

							CATIAllowUserInfo_var spUIn = spFind;

							CATIAlias_var spAlias = spFind;

							CATUnicodeString strChildName=spAlias->GetAlias();

							strChildName.ReplaceAll("`","");

							if(strChildName!="")
							{
								int iIndex =  strChildName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
								if(iIndex>=0)
									strChildName = strChildName.SubString(iIndex+1,strChildName.GetLengthInChar()-iIndex-1);
							}
							else
								continue;

							CATUnicodeString strEncod =changrEncod(strChildName);

							int ii = m_spCompent->OutPutName.Locate(strEncod);

							if(ii==0)
								ii = m_spCompent->OutPutName.Locate(strChildName);

							if(spUIn!=NULL_var&&ii>0)
							{
								spUIn->SetComment("ItemID:"+m_spCompent->OutPutID[ii]+";Type:Out");

								CATUnicodeString strValue;
								CATICkeCheck_var spCheck = spFind;
								if(spCheck!=NULL_var)
								{
									CATICkeParm_var spParm = spCheck->GetResultParameter();
									int iValue = spParm->Value()->AsBoolean();
									if(iValue)
										strValue = "Pass";
									else
										strValue = "Not Pass";

									UploadResultTaget(m_spCompent->OutPutID[ii],strValue);
								}
							}
						}


						m_lstAllID.Append(m_spCompent->ID);
						m_lstAllPath.Append(m_spCompent->Path);
						m_lstAllUDFName.Append(strUdfName);

						GoToNext();

						//////实例化下一个UDF
						//SendNotification(this,m_Notify);

						//m_spCompent = m_spCompent->pNext;

						//if(m_spCompent==NULL)
						//{
						//	//检查OutPUT几何集下的元素是否发布
						//	CheckOutPut();

						//	HideViews();

						//	int progress=20+msize*pesent;
						//	_pGeelyCATProgressDlg->SetProgressPosition(progress);

						//	msize++;

						//	if(m_UI_Type=="TI"&&m_ReCount>0&&m_ReCount==m_NoReCount)
						//	{
						//		MessageBoxA(NULL,"no requirement linked to this TI has an automation tool available","Error",MB_OK);
						//	}

						//	SetTxts();

						//	m_lstAllID.RemoveAll();
						//	m_lstAllPath.RemoveAll();
						//	m_lstAllUDFName.RemoveAll();
						//	m_lstAllAddEmptyGst.RemoveAll();

						//	m_ReCount=0;
						//	m_NoReCount=0;

						//	m_iTspTextCount = 0;
						//	m_pTxtAnnot=NULL;

						//	if (msize>=mAllComponetList.size())
						//	{
						//		cout<<"OnUdfOKNotification the total size of automation tools is :"<<msize<<endl;
						//		RequestDelayedDestruction();
						//		return ;
						//	}

						//	m_spCompent=mAllComponetList[msize];

						//}
					}


				}


			}

		}



	}


	//cout<<"OnUdfOKNotification end"<<endl;

}
//
void RunInCmd::CreateParametersnotinCAD()
{
	if (m_spCompent==NULL)
		return;

	CATListValCATUnicodeString LstParaName=m_spCompent->LstRequirmentNameNotInCAD;
	CATListValCATUnicodeString LstParaID=m_spCompent->LstRequirmentIDNotInCAD;

	if (LstParaName.Size()==0||LstParaID.Size()==0)
		return  ;


	//获取External Parameters
	CATISpecObject_var spParamSet = CATCkeGlobalFunctions::GetFunctionFactory()->GetCurrentSet(CATICkeFunctionFactory::Parameter,GetActivePart(mTIPartObject),CATCke::True);
	if (spParamSet==NULL_var)
	{
		cout<<"get root para set failed"<<endl;
		return;
	}

	//获得参数根节点
	CATIParmPublisher_var spParmPublisher = spParamSet;
	if (spParmPublisher==NULL_var)
	{
		return;
	}

	//获得根节点参数集下的External Parameters
	CATBaseUnknown_var spNotInCADParamSet=NULL_var;
	GetParamSetFromParamRootByName(spParmPublisher,"Requirements not included in CAD", spNotInCADParamSet);
	if (spNotInCADParamSet==NULL_var)
	{
		//创建External Parameters参数集
		CreateParaSet(spParmPublisher,"Requirements not included in CAD",spNotInCADParamSet);
		if (spNotInCADParamSet==NULL_var)
		{
			cout<<"get root Requirements not included in CAD Parameters set failed"<<endl;
			return;
		}
	}

	CATISpecObject_var spObjPart = GetActivePart(mTIPartObject);
	if (spObjPart==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return ;
	}

	CATICkeParmFactory_var spParFac = spObjPart->GetFeatContainer();
	if(spParFac==NULL_var)
	{
		cout<<"GetFeatContainer Failed"<<endl;
		return ;
	}

	for (int i=1;i<=LstParaName.Size();i++)
	{
		CATUnicodeString  iParameterName=LstParaName[i]; 
		CATUnicodeString  iParameterValue=LstParaID[i];

		CATBaseUnknown_var oSpiParam=NULL_var;
		GetParamFromParamSetByName(spNotInCADParamSet,iParameterName,oSpiParam,TRUE);
		if (oSpiParam!=NULL_var)
			continue;

		//判断是否有这个参数
		CATICkeParm_var spCkePara=spParFac->CreateString(  iParameterName,  iParameterValue) ;
		if (spCkePara==NULL_var)
			continue;
		
		CATIAllowUserInfo_var spUIn = spCkePara;

		spUIn->SetComment("ItemID:"+iParameterValue+";Type:In");

		CATIParmPublisher_var spParmPublisher=spNotInCADParamSet;
		spParmPublisher->Append(spCkePara);
	}

}

bool RunInCmd::CheckOutPut()
{
	CATIPrtPart_var spTIPrtPart = GetActivePart(mTIPartObject);
	if (spTIPrtPart==NULL_var)
		return false;

	CATIDescendants_var spDes = spTIPrtPart;
	if (spDes==NULL_var)
		return false;

	CATListValCATISpecObject_var lstObjects;
	if(spDes!=NULL_var)
		spDes->GetDirectChildren("CATIMmiGeometricalSet",lstObjects);

	CATISpecObject_var spObjOutPut=NULL_var;
	for(int ii=1;ii<=lstObjects.Size();ii++)
	{
		CATIAlias_var spAlias = lstObjects[ii];
		CATUnicodeString strName = spAlias->GetAlias();
		strName.ToUpper();
		if(strName.Compare("OUTPUT")>0)
		{
			spObjOutPut = lstObjects[ii];
			break;
		}
	}

	if(spObjOutPut==NULL_var)
	{
		cout<<"Get OutPut Gst Failed"<<endl;
		return false;
	}

	bool isFinErro=false;
	CATListValCATISpecObject_var lstChildren;
	spDes = spObjOutPut;
	spDes->GetAllChildren("CATISpecObject",lstChildren);

	CATIPrdObjectPublisher_var spPublisher = spTIPrtPart->GetProduct();
	if (spPublisher==NULL_var)
	{
		cout<<"Get OutPut Publisher Failed"<<endl;
		return false;
	}

	CATIProduct_var spPrd=spTIPrtPart->GetProduct();
	if (spPrd==NULL_var)
	{
		cout<<"Get OutPut Product Failed"<<endl;
		return false;
	}

	for(int ii=1;ii<=lstChildren.Size();ii++)
	{
		//获得元素的父级
		CATIMmiGeometricalSet_var spTool = lstChildren[ii]->GetFather();
		if(spTool==NULL_var)
			continue;

		spTool = lstChildren[ii];
		if(spTool!=NULL_var)
			continue;

		CATILinkableObject_var spLink = lstChildren[ii];
		if (spLink==NULL_var)
			continue;

		CATIConnector_var spConctor = spPrd->GetConnector(spLink);
		if (spConctor==NULL_var)
		{
			//发布元素
			PublishSpecObject(lstChildren[ii]);
			continue;
		}
		else
		{
			CATListValCATUnicodeString *lstNamse=NULL;
			if(spPublisher->IsPublished(spConctor,lstNamse))
				continue;
			else
			{
				//发布元素
				PublishSpecObject(lstChildren[ii]);
			}

		}

	}

	return true;
}
void RunInCmd::OpenDocument(CATUnicodeString strPath,int trytimes,CATDocument *&pDoc)
{
	for (int i=trytimes;i>=1;i--)
	{
		CATDocumentServices::OpenDocument(strPath,pDoc);
		if (pDoc==NULL)
		{
			cout<<"等待1S再次尝试打开文档=="<<strPath<<endl;
			Sleep(1000); 
			continue;
		}
		else
		{
			break;
		}
	}
}
CATUnicodeString RunInCmd::InitOne()
{
	CreateParametersnotinCAD();

	if (	m_spCompent->pRequement!=NULL)
	{
		if (m_spCompent->pRequement->strRequementIsIncludedInCAD=="NO")
		{
			return "";
		}	
	}

	//cout<<"InitOne"<<endl;

	if (m_Part_Type==createPart)
	{
		//获取TI Part
		if (m_spCompent!=NULL)
		{
			CATUnicodeString strPartnumber;
			GetPartNumber("XXXXXXXX",m_spCompent->ItemFatherName,m_spCompent->ItemFatherID,strPartnumber);
			//cout<<"TI Partnumber==="<<strPartnumber<<endl;

			if (GetTIPartOfProduct(strPartnumber)==FALSE)
				return "Get TI Part Failed";
		}
	}

	CATISpecObject_var spPartObject = GetActivePart(mTIPartObject);
	if (spPartObject==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return "GetActivePart Failed";
	}

	CATIPrtPart_var spPrtPart = spPartObject;
	if (spPrtPart==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return "GetActivePart Failed";
	}

	//设置几何集为当前工作对象
	SetCurrentGeoSet();

	//udf 的名称
	CATUnicodeString strudfName;
	if(m_spCompent->pRequement==NULL)
	{
		strudfName=m_spCompent->UdfName;
	}
	else
	{
		if(m_Automation_Tool_Type=="TI")
		{
			if(m_spCompent->pRequement->strTIName!="")
			{
				strudfName=m_spCompent->pRequement->strTIName;
			}
		}
		else
		{
			if(m_spCompent->pRequement->strFCName!="")
			{
				strudfName=m_spCompent->pRequement->strFCName;
			}
		}
	}

	//cout<<"udf part document path==="<<m_spCompent->Path<<endl;
	if (m_spCompent->Path==""||strudfName=="")
	{
		return "";

		//CATUnicodeString strErrorMsg;
		//strErrorMsg.Append("Error,Case:Catia Document: ");
		//strErrorMsg.Append((m_spCompent->Path));
		//strErrorMsg.Append(" cannot be found");
		//return strErrorMsg;
	}

	//获取当前part已经实例化的所有udf
	if (isUdfFeatureInstance(strudfName,spPrtPart))
	{
		m_lstRepeatudf.Append(strudfName);

		cout<<"********************************************************"<<endl;
		cout<<"Udf Feature has Instance in current document:"<<strudfName<<endl;
		cout<<"*********************************************************"<<endl;

		return "";
	}


	//错误信息
	CATUnicodeString strErro;
	mstrlackParavalueMsg="";

	//打开文档，尝试五次	//打开UDF文档
	CATDocument *pDocument = NULL;
	int trytimes=5;
	OpenDocument(m_spCompent->Path,trytimes,pDocument);
	if(pDocument!=NULL)
	{
		//锁定文档
		CATLockDocument(*pDocument);

		if(m_spCompent->pRequement==NULL)
		{
			strErro = InitUdf(pDocument,2,strudfName);
		}
		else
		{
			m_ReCount++;
			if(m_Automation_Tool_Type=="TI")
			{
				if(strudfName!="")
				{
					strErro = InitUdf(pDocument,2,strudfName);
				}
				else
					m_NoReCount++;
			}
			else
			{
				if(strudfName!="")
				{
					strErro = InitUdf(pDocument,2,strudfName);

				}
				else
					m_NoReCount++;
			}
		}

		if(strErro!="")
		{
			cout<<"The error part path==="<<m_spCompent->Path<<endl;
			cout<<"The error udf name==="<<strudfName<<endl;
			cout<<"Init udf error==="<<strErro<<endl;
			cout<<"show dlg name==="<<m_spCompent->Name<<endl;

			mstrlackParavalueMsg=strErro;
			mstrlackParavalueMsg.ReplaceAll("execution error, reason: ","");
			
			if (strErro!="")
			{
				if (mstrError!="")
					mstrError.Append("\n");
				mstrError.Append(strErro);

				mstrError.ReplaceAll("execution error, reason: ","");

			}

			return strErro;
		}
		else
		{
			//输出参数设置

			CATIDescendants_var spDesPart = spPartObject;

			CATListValCATISpecObject_var lstParameters;
			CATListValCATISpecObject_var lstCkecks;
			spDesPart->GetAllChildren("CATICkeParm",lstParameters);
			spDesPart->GetAllChildren("CATICkeCheck",lstCkecks);

			for(int jj=1;jj<=lstParameters.Size();jj++)
			{
				CATISpecObject_var spFind = lstParameters[jj];

				CATIAllowUserInfo_var spUIn = spFind;

				CATIAlias_var spAlias = spFind;

				CATUnicodeString strChildName=spAlias->GetAlias();
				strChildName.ReplaceAll("`","");

				if(strChildName!="")
				{
					int iIndex =  strChildName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);

					if(iIndex>=0)
						strChildName = strChildName.SubString(iIndex+1,strChildName.GetLengthInChar()-iIndex-1);
				}
				else
					continue;

				if(spUIn==NULL_var||strChildName.SearchSubString("_Actual")<0)
					continue;

				strChildName.ReplaceSubString("_Actual","");

				CATUnicodeString strEncod =changrEncod(strChildName);

				CATListOfCATUnicodeString lstoutputParaName=m_spCompent->OutPutName;
				if (lstoutputParaName.Size()==0)
				{
					cout<<"this Compent has no output parameters,the id is:"<<m_spCompent->ID<<endl;
				}

				int ii=0;
				GetIndex( lstoutputParaName,strEncod,ii);
				if(ii==0)
					GetIndex( lstoutputParaName,strChildName,ii);

				//int ii = m_spCompent->OutPutName.Locate(strEncod);
				//if(ii==0)
				//	ii = m_spCompent->OutPutName.Locate(strChildName);

				//int iIndex = m_spCompent->Parameters.Locate(strEncod);
				//if(iIndex==0)
				//	iIndex = m_spCompent->Parameters.Locate(strChildName);

				CATListOfCATUnicodeString lstParaName=m_spCompent->Parameters;
				if (lstParaName.Size()==0)
				{
					cout<<"this Compent has no input parameters,the id is:"<<m_spCompent->ID<<endl;
				}

				int iIndex=0;
				GetIndex( lstParaName,strEncod,iIndex);
				if(iIndex==0)
					GetIndex( lstParaName,strChildName,iIndex);

				if(ii>0)
				{
					spUIn->SetComment("ItemID:"+m_spCompent->OutPutID[ii]+";Type:Out");

					CATUnicodeString strValue;

					CATICkeParm_var spParm = spFind;

					CATUnicodeString str = spParm->Value()->AsString();

					double dValue=0;
					if(str.ConvertToNum(&dValue))
						strValue.BuildFromNum(dValue);

					if(strValue!="")
						UploadActaulTaget(m_spCompent->OutPutID[ii],strValue);
				}
				else if(iIndex>0)
				{
					CATUnicodeString strComment = spUIn->GetComment();

					if(strComment.SearchSubString(";Type:Out")<0&&strComment.SearchSubString("ItemID:")<0)
					{
						spUIn->SetComment("ItemID:"+m_spCompent->ParametersID[iIndex]+";Type:Out");

						CATUnicodeString strValue;

						CATICkeParm_var spParm = spFind;

						CATUnicodeString str = spParm->Value()->AsString();

						double dValue=0;
						if(str.ConvertToNum(&dValue))
							strValue.BuildFromNum(dValue);

						if(strValue!="")
							UploadActaulTaget(m_spCompent->ParametersID[iIndex],strValue);
					}
				}
			}

			for(int jj=1;jj<=lstCkecks.Size();jj++)
			{
				CATISpecObject_var spFind = lstCkecks[jj];

				CATIAllowUserInfo_var spUIn = spFind;

				CATIAlias_var spAlias = spFind;

				CATUnicodeString strChildName=spAlias->GetAlias();
				strChildName.ReplaceAll("`","");

				if(strChildName!="")
				{
					int iIndex =  strChildName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
					if(iIndex>=0)
						strChildName = strChildName.SubString(iIndex+1,strChildName.GetLengthInChar()-iIndex-1);
				}
				else
					continue;

				CATUnicodeString strEncod =changrEncod(strChildName);

				int ii = m_spCompent->OutPutName.Locate(strEncod);

				if(ii==0)
					ii = m_spCompent->OutPutName.Locate(strChildName);

				if(spUIn!=NULL_var&&ii>0)
				{
					spUIn->SetComment("ItemID:"+m_spCompent->OutPutID[ii]+";Type:Out");

					CATUnicodeString strValue;

					CATICkeCheck_var spCheck = spFind;
					if(spCheck!=NULL_var)
					{
						CATICkeParm_var spParm = spCheck->GetResultParameter();

						int iValue = spParm->Value()->AsBoolean();

						if(iValue)
							strValue = "Pass";
						else
							strValue = "Not Pass";

						UploadResultTaget(m_spCompent->OutPutID[ii],strValue);
					}
				}
			}


		}

		CATUnLockDocument(*pDocument);

		//CATDocumentServices::Remove (*pDocument);

	}
	else
	{
		CATUnicodeString strErrorMsg;
		strErrorMsg.Append("Error,Case:Catia Document: ");
		strErrorMsg.Append((m_spCompent->Path));
		strErrorMsg.Append(" cannot be opened");
		return strErrorMsg;
	}

	return "";
}
CATListValCATISpecObject_var RunInCmd::GetChildrenByName(CATISpecObject_var spFather,CATUnicodeString strName)
{
	CATIDescendants_var spDes = spFather;

	CATListValCATISpecObject_var lstChildren;
	spDes->GetAllChildren("CATISpecObject",lstChildren);

	CATListValCATISpecObject_var lstRes;
	for(int ii=1;ii<=lstChildren.Size();ii++)
	{
		CATIAlias_var spAlias = lstChildren[ii];

		CATUnicodeString strChildName = spAlias->GetAlias();

		CATUnicodeString strParmName = strChildName;
		strParmName.ReplaceAll("`","");

		CATICkeParm_var spPara = lstChildren[ii];
		if(spPara!=NULL_var)
		{
			int iIndex =  strParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
			if(iIndex>=0)
				strParmName = strParmName.SubString(iIndex+1,strParmName.GetLengthInChar()-iIndex-1);
		}

		if(strName==strChildName||strName==strParmName)
			lstRes.Append(lstChildren[ii]);

	}

	return lstRes;
}
CATISpecObject_var RunInCmd::GetChildByName(CATISpecObject_var spFather,CATUnicodeString strName)
{
	CATIDescendants_var spDes = spFather;
	if (spDes==NULL_var)
		return NULL_var;

	CATListValCATISpecObject_var lstChildren;
	spDes->GetAllChildren("CATISpecObject",lstChildren);
	for(int ii=1;ii<=lstChildren.Size();ii++)
	{
		CATIAlias_var spAlias = lstChildren[ii];

		CATUnicodeString strChildName = spAlias->GetAlias();

		if(strName==strChildName)
			return lstChildren[ii];
	}

	return NULL_var;
}
void RunInCmd::GetAnnotationPlane(CATISpecObject_var spFather,CATUnicodeString strName,CATListValCATISpecObject_var &LstPlane)
{
	CATIDescendants_var spDes = spFather;
	if (spDes==NULL_var)
		return ;

	CATListValCATISpecObject_var lstChildren;
	spDes->GetAllChildren("CATISpecObject",lstChildren);
	for(int ii=1;ii<=lstChildren.Size();ii++)
	{
		CATIAlias_var spAlias = lstChildren[ii];

		CATUnicodeString strChildName = spAlias->GetAlias();

		if(strName==strChildName)
			LstPlane.Append(lstChildren[ii]);
	}

}
CATISpecObject_var RunInCmd::GetLastChildByName(CATISpecObject_var spFather,CATUnicodeString strName)
{
	if (spFather==NULL_var)
		return NULL_var;

	strName.ToUpper();

	//annotation plane
	CATISpecObject_var spRes;

	CATIDescendants_var spDes = spFather;

	CATListValCATISpecObject_var lstChildren;
	spDes->GetAllChildren("CATISpecObject",lstChildren);

	for(int ii=1;ii<=lstChildren.Size();ii++)
	{
		CATIAlias_var spAlias = lstChildren[ii];
		if (spAlias==NULL_var)
			continue;

		CATUnicodeString strChildName = spAlias->GetAlias();
		strChildName.ToUpper();

		if(strName==strChildName)
		{
			spRes  = lstChildren[ii]; 
			break;
		}

	}

	return spRes;
}
CATUnicodeString RunInCmd::InitUdf(CATDocument *pUdfDoc,int iUdfType,CATUnicodeString strUdfName)
{
	//cout<<"Init Udf Name==="<<strUdfName<<endl;
	HRESULT rc=E_FAIL;

	CATIAlias_var spAlias=NULL_var;

	//获取当前激活文档下标注视图及文本数量(实例化之前的)
	ReadTSP();

	if(strUdfName=="")
		iUdfType=0;

	CATInit *pInitOnDoc = NULL ;
	pUdfDoc->QueryInterface(IID_CATInit,(void **) &pInitOnDoc);
	if (pInitOnDoc==NULL)
	{
		cout<<"QI CATInit Failed"<<endl;
		return "QI CATInit Failed";
	}

	//获取CATIPrtContainer
	CATIPrtContainer *piPrtCont = NULL ;
	piPrtCont = (CATIPrtContainer*)pInitOnDoc->GetRootContainer("CATIPrtContainer");
	if(piPrtCont==NULL)
	{
		cout<<"execution error, reason: file type is not CATPart"<<endl;
		return "execution error, reason: file type is not CATPart";
	}

	//获取CATIPrtPart
	CATISpecObject_var  spudfPartObject= piPrtCont->GetPart();
	if (spudfPartObject==NULL_var)
	{
		cout<<"GetPart Failed"<<endl;
		return "GetPart Failed";
	}

	CATIPrtPart_var  spUdfPart=spudfPartObject;
	if (spUdfPart==NULL_var)
	{
		cout<<"GetPrtPart Failed"<<endl;
		return "GetPrtPart Failed";
	}

	//spAlias=spUdfPart;

	//cout<<"UDF Part Name =="<<spAlias->GetAlias()<<endl;

	//获取CATIUdfFactory
	CATIUdfFactory *pIUdfFactory = NULL ;
	piPrtCont->QueryInterface(IID_CATIUdfFactory,(void **) &pIUdfFactory);
	if (pIUdfFactory==NULL)
	{
		cout<<"Get CATIUdfFactory Failed"<<endl;
		return "Get CATIUdfFactory Failed";
	}

	//获取Udf 的特征列表
	CATListValCATISpecObject_var* lstUdfs = NULL;
	CATListValCATISpecObject_var* lstPcs = NULL;
	lstUdfs = pIUdfFactory->GetUserFeatureList();
	lstPcs = pIUdfFactory->GetPowerCopyList();

	CATListValCATISpecObject_var lstNeed;
	lstNeed.RemoveAll();
	if(iUdfType==0)
	{
		//UDF和PowerCopy
		if(lstUdfs!=NULL)
			for(int ii=1;ii<=lstUdfs->Size();ii++)
				lstNeed.Append((*lstUdfs)[ii]);

		if(lstPcs!=NULL)
			for(int ii=1;ii<=lstPcs->Size();ii++)
				lstNeed.Append((*lstPcs)[ii]);
	}
	else if(iUdfType==1)
	{
		//UDF
		if(lstUdfs!=NULL)
			for(int ii=1;ii<=lstUdfs->Size();ii++)
				lstNeed.Append((*lstUdfs)[ii]);
	}
	else if(iUdfType==2)
	{
		//PowerCopy
		if(lstPcs!=NULL)
			for(int ii=1;ii<=lstPcs->Size();ii++)
				lstNeed.Append((*lstPcs)[ii]);
	}

	int length=strUdfName.GetLengthInChar();
	//cout<<length<<endl;

	//根据名称匹配UDF，若输入名称为空，则取列表的第一个
	CATIUdfInstantiate_var spUdfIni=NULL_var;
	if(strUdfName=="")
	{
		if(lstNeed.Size()>0)
			spUdfIni=lstNeed[1];
	}
	else
	{
		//循环查找模板
		for(int ii =1;ii<=lstNeed.Size();ii++)
		{
			spAlias = lstNeed[ii];

			CATUnicodeString strName = spAlias->GetAlias();
			//cout<<"udf Name Under Part ==="<<strName<<endl;

			int length=strName.GetLengthInChar();
			//cout<<length<<endl;

			if(strName==strUdfName)
			{
				spUdfIni=lstNeed[ii];
				break;
			}
		}
	}


	//没有查询到模板，则查询
	if(spUdfIni==NULL_var)
	{
		CATUnicodeString strMsg;

		//获得UDF所在的Product
		CATIProduct_var spPrd = spUdfPart->GetProduct();
		if (spPrd==NULL_var)
		{
			strMsg="execution error, reason: cannot find any udf part in this Catia model";
			strMsg.Append("--->the udf name--->");
			strMsg.Append(strUdfName);
			strMsg.Append(" please check in sharepoint");
			return strMsg;
		}

		//根据名称查找UDF
		CATISpecObject_var spUdf = GetChildByName(spUdfPart,spPrd->GetPartNumber());
		if(spUdf==NULL_var)
		{
			strMsg="execution error, reason: cannot find any udf or powercopy in this Catia model";
			strMsg.Append("--->the udf name--->");
			strMsg.Append(strUdfName);
			strMsg.Append(" please check in sharepoint");
			return strMsg;
		}

		spUdf->QueryInterface(IID_CATIUdfInstantiate,(void **) &spUdfIni);
		if(spUdfIni==NULL_var)
		{
			strMsg="execution error, reason: cannot find any udf or powercopy in this Catia model";
			strMsg.Append("--->the udf name--->");
			strMsg.Append(strUdfName);
			strMsg.Append(" please check in sharepoint");
			return strMsg;
		}
	}

	//获取当前激活的文档
	CATIPrtPart_var spPrtPart = GetActivePart(mTIPartObject);
	if (spPrtPart==NULL_var)
		return "execution error, reason: cannot find Catia active model";

	spCurrentFea=spPrtPart->GetCurrentFeature( );

	originnum1=0;
	CATIDescendants_var spTargetGSDBody1=spCurrentFea;
	CATListValCATISpecObject_var spTargetGSDResult1;
	spTargetGSDResult1.RemoveAll();
	spTargetGSDBody1->GetDirectChildren("CATISpecObject",spTargetGSDResult1);
	if (spTargetGSDResult1==NULL ||spTargetGSDResult1.Size()==0)
	{
		originnum1=0;
	}
	else
	{
		originnum1=spTargetGSDResult1.Size();
	}

	cout<<"before udf size="<<originnum1<<endl;

	CATPathElement PathFirstInstantiate1(spPrtPart); 

	//将UDF实例化到当前激活的文档
	CATPathElement * FirstUIactiveObject1 = NULL ;
	CATBaseUnknown_var FirstDest1 = NULL_var ; 
	rc = spUdfIni->SetDestinationPath(&PathFirstInstantiate1,FirstUIactiveObject1,FirstDest1);
	if ( FAILED(rc) )
	{
		cout<<"execution error, reason: there is error when executing SetDestinationPath"<<endl;
		return "execution error, reason: there is error when executing SetDestinationPath";
	}

	CATTry
	{
		mTIPartObject->Update();
	}
	CATCatch(CATError,error)
	{
	}
	CATEndTry;

	//赋值给全局变量
	m_ActiveUdfIni=NULL_var;
	m_ActiveUdfIni = spUdfIni;

	//获取External Parameters
	CATISpecObject_var spParamSet = CATCkeGlobalFunctions::GetFunctionFactory()->GetCurrentSet(CATICkeFunctionFactory::Parameter,GetActivePart(mTIPartObject),CATCke::True);
	if (spParamSet==NULL_var)
		return "Get Root para Set Failed";

	//获得参数根节点
	CATIParmPublisher_var spParmPublisher = spParamSet;
	if (spParmPublisher==NULL_var)
		return "Get Root para Set Failed";

	//获得根节点参数集下的External Parameters
	CATBaseUnknown_var spExternalParamSet=NULL_var;
	GetParamSetFromParamRootByName(spParmPublisher,"External Parameters", spExternalParamSet);
	if (spExternalParamSet==NULL_var)
	{
		//创建External Parameters参数集
		CreateParaSet(spParmPublisher,"External Parameters",spExternalParamSet);
		if (spExternalParamSet==NULL_var)
		{
			return "Get External Parameters Failed";
		}
	}

	CATBaseUnknown_var spiParamSetpredecessors=NULL_var;
	GetParamSetFromParamRootByName(spExternalParamSet,"Parameters used by predecessors", spiParamSetpredecessors);
	if (spiParamSetpredecessors==NULL_var)
	{
		CreateParaSet(spExternalParamSet,"Parameters used by predecessors",spiParamSetpredecessors);
		if (spiParamSetpredecessors==NULL_var)
		{
			return "Get Parameters used by predecessors Set Failed";
		}
	}

	//获得UDF的输入
	CATListOfCATUnicodeString * pListOfInputRole = NULL ;//UDF输入元素的名称
	CATListValCATBaseUnknown_var * pListOfInput = NULL  ;//UDF输入元素
	rc = spUdfIni->GetOldInputs(pListOfInput,pListOfInputRole);
	if ( FAILED(rc) || ( NULL ==pListOfInput ) || ( NULL== pListOfInputRole ) )
	{
		//无输入
	}
	else
	{
		m_spCompent->isshowudfdlg=TRUE;

		CATUnicodeString strNotValue,strNotInput;
		for(int ii=1;ii<=pListOfInputRole->Size();ii++)
		{
			CATUnicodeString strParaName=(*pListOfInputRole)[ii];
			CATUnicodeString strParaID;
			GetParaID(strParaName,strParaID);
			if (strParaID!="")
			{
				strParaName.Append("(item id:");
				strParaName.Append(strParaID);
				strParaName.Append(")");
			}

			//获得UDF的输入元素的路径(判断当前激活文档下是否有相同名称的参数)
			CATPathElement* pInput = GetUdfInput((*pListOfInputRole)[ii]);//根据名称查找输入参数

			CATICkeParm_var spPar = (*pListOfInput)[ii];//参数类型
			if(pInput==NULL)
			{
				//cout<<"not find udf input element:"<<(*pListOfInputRole)[ii]<<endl;

				//若根据名称没有查找到参数，则直接判断参数的类型
				if(spPar!=NULL_var)
				{
					//cout<<"udf input element is parameter"<<endl;

					CATIType_var spType = spPar->Type();
					CATUnicodeString strType =spType->Name();
					//cout<<"Para type is :"<<strType<<endl;

					if(strType!="Surface"&&strType!="Plane"&&strType!="Curve"&&strType!="Line"&&strType!="Point")
					{
						//参数不为Surface，Plane，Curve，Line，Point，创建参数
						pInput = CreateUdfParamterInput((*pListOfInputRole)[ii],spPar,spExternalParamSet,spiParamSetpredecessors);
						if(pInput==NULL)
						{
    						cout<<"udf input element is  parameter and not create sucess or not find parameter value in list"<<endl;

							if(strNotValue!="")
								strNotValue+=",";
							strNotValue=strNotValue+strParaName;
						}
						else
						{
							//设置新的输入
							rc=spUdfIni->SetNewInput(ii,pInput);
							if (FAILED(rc))
							{
								cout<<strParaName<<"--->"<<"SetNewInput Failed"<<endl;
							}

						}

					}
					else
					{
						cout<<"udf input element is not parameter and not find"<<endl;

						if(strNotInput!="")
							strNotInput+=",";
						strNotInput=strNotInput+strParaName;
					}
				}
				else
				{
					if(strNotInput!="")
						strNotInput+=",";
					strNotInput=strNotInput+strParaName;

				}
			}
			else
			{
				//设置新的输入
				rc=spUdfIni->SetNewInput(ii,pInput);
				if (FAILED(rc))
				{
					cout<<strParaName<<"<--->"<<"SetNewInput Failed"<<endl;
				}
			}

			if (NULL!=pInput)
			{
				pInput->Release();
				pInput=NULL;
			}
		}

		if(strNotValue!=""&&strNotInput=="")
			return "execution error, reason: cannot find input parameter value in sharepoint for udf:"+strUdfName+"-->"+strNotValue;
		else if(strNotValue==""&&strNotInput!="")
			return "execution error, reason: cannot find input element for udf:"+strUdfName+"-->"+strNotInput;
		else if(strNotValue!=""&&strNotInput!="")
			return "execution error, reason: cannot find input element for udf:"+strUdfName+"-->"+strNotInput+"\n and cannot find input parameter value in sharepoint for udf:"+strUdfName+"-->"+strNotValue;
	}

	CATICkeParmFactory* piFact = NULL;

	CATListValCATBaseUnknown_var *pListOfParam=NULL;
	CATListOfCATUnicodeString *pListOfParamRole=NULL;
	rc = spUdfIni->GetParameters(pListOfParam,pListOfParamRole);
	if ( FAILED(rc) || ( NULL ==pListOfParam ) || ( NULL== pListOfParamRole ) )
	{
		//无参数
	}
	else
	{
		for(int ii=1;ii<=pListOfParamRole->Size();ii++)
		{
			CATICkeParm_var spParam = GetParameter((*pListOfParamRole)[ii],mTIPartObject);
			if(spParam==NULL_var)
				continue;

			if(piFact==NULL)
			{
				CATISpecObject_var spObj = spParam;
				spObj->GetFeatContainer()->QueryInterface(IID_CATICkeParmFactory, (void**) &piFact);
			}

			if (piFact==NULL)
				continue;

			CATCkeListOf(Parm) paramList;
			paramList.Append (spParam);

			CATICkeParm_var spParamInput = (*pListOfParam)[ii];
			if (spParamInput==NULL_var)
				continue;

			CATICkeRelation_var spFormula = piFact->CreateFormula ("VolumeFormula","","",spParamInput,&paramList,"a1",NULL_var,CATCke::False);
			if (spFormula==NULL_var)
				continue;

			CATISpecObject_var spRelationSet = CATCkeGlobalFunctions::GetFunctionFactory()->GetCurrentSet(CATICkeFunctionFactory::Relation,GetActivePart(mTIPartObject),CATCke::True);
			if (spRelationSet==NULL_var)
				continue;

			CATIParmPublisher_var spParmPublisher = spRelationSet;
			if (spParmPublisher==NULL_var)
				continue;

			spParmPublisher->Append(spFormula);


		}

	}

	rc = spUdfIni->Instantiate(spPrtPart->GetCurrentFeature());
	if ( FAILED(rc) )
	{
		return "execution error, reason: error during the execution of the Instantiate command..";
	}

	spUdfIni->EndInstantiate();
	spUdfIni->Reset();

	spCurrentFea->Update();

	CATTry
	{
		mTIPartObject->Update();

	}
	CATCatch(CATError,error)
	{
		//return "Update error,please check the parameter value or input element！";
		return "";
	}
	CATEndTry;

	CATIDescendants_var spTargetGSDBody2=spCurrentFea;
	spTargetGSDResult2.RemoveAll();
	spTargetGSDBody2->GetDirectChildren("CATISpecObject",spTargetGSDResult2);
	originnum2=spTargetGSDResult2.Size();
	cout<<"After udf size="<<originnum2<<endl;

	CATListValCATBaseUnknown_var ListOutputFea;
	for (int i=originnum1+1;i<=originnum2;i++)
	{
		ListOutputFea.Append(spTargetGSDResult2[i]);
	}

	//获得udf的输出，修改输出几何集的名称为udf的名称
	SetudfOutputName(ListOutputFea,strUdfName);

	//当前udf output元素中查找annotation plane
	SetTSP(ListOutputFea);

	if (NULL !=pInitOnDoc)
	{
		pInitOnDoc->Release();
		pInitOnDoc=NULL;
	}

	if (NULL !=piPrtCont)
	{
		piPrtCont->Release();
		piPrtCont=NULL;
	}

	if (NULL !=pIUdfFactory)
	{
		pIUdfFactory->Release();
		pIUdfFactory=NULL;
	}

	if (NULL !=lstUdfs)
	{
		delete lstUdfs ;
		lstUdfs = NULL ;
	}

	if (NULL !=lstPcs)
	{
		delete lstPcs ;
		lstPcs = NULL ;
	}

	if ( NULL != FirstUIactiveObject1 ) 
	{
		FirstUIactiveObject1->Release();
		FirstUIactiveObject1 = NULL ;
	}

	if (NULL!=piFact)
	{
		piFact->Release();
		piFact=NULL;
	}

	if (NULL !=pListOfParam)
	{
		delete pListOfParam ;
		pListOfParam = NULL ;
	}

	if (NULL !=pListOfParamRole)
	{
		delete pListOfParamRole ;
		pListOfParamRole = NULL ;
	}

	return "";
}

CATBoolean RunInCmd::GetTIPartOfProduct(CATUnicodeString strTIPartNumberName)
{
	//cout<<"GetTIPartOfProduct"<<endl;
	strTIPartNumberName.ToUpper();

	if (m_Part_Type==insidePart)
	{
		mTIPartObject=mActivePartObject;
		return TRUE;
	}

	if (mRootObject==NULL_var)
	{
		cout<<"GetTIPartOfProduct mRootObject==NULL_var "<<endl;
		return FALSE;
	}

	CATIProduct_var spTIObjectPrd=NULL_var;

	CATListValCATBaseUnknown_var* LstAllChildren=NULL;
	LstAllChildren=mRootObject->GetAllChildren();
	if (LstAllChildren!=NULL)
	{
		for (int i=1;i<=LstAllChildren->Size();i++)
		{
			CATIProduct_var spChildrenPrd=(*LstAllChildren)[i];
			if (spChildrenPrd==NULL_var)
				continue;

			if (IsProduct(spChildrenPrd))
				continue;

			CATUnicodeString strInstanceName;
			spChildrenPrd->GetPrdInstanceName(strInstanceName);
			strInstanceName=spChildrenPrd->GetPartNumber(); 
			strInstanceName.ToUpper();
			if (strInstanceName==strTIPartNumberName)
			{
				spTIObjectPrd=spChildrenPrd;
				//cout<<"Find TI Part=="<<strTIPartInstanceName<<endl;
				break;
			}

		}

	}

	if (spTIObjectPrd==NULL_var)
	{
		//cout<<"TI Part is root element:"<<strTIPartNumberName<<endl;
		spTIObjectPrd=mRootObject;
	}

	ActivePart(spTIObjectPrd);

	CATIPrtContainer_var  spiCont=NULL_var;
	CATISpecObject_var spPrtPart=NULL_var;
	GetPrtContFromPrd(spTIObjectPrd, spiCont,spPrtPart);

	if (spPrtPart!=NULL_var)
		mTIPartObject=spPrtPart;

	return TRUE;
}
void RunInCmd::GetParaID(CATUnicodeString strName,CATUnicodeString &strID)
{
	if(strName.SearchSubString("`")==0)
		strName.ReplaceAll("`","");

	CATUnicodeString strEncod =changrEncod(strName);

	CATListOfCATUnicodeString lstParaName=m_spCompent->Parameters;
	if (lstParaName.Size()==0)
	{
		cout<<"this Compent has no parameters,the id is:"<<m_spCompent->ID<<endl;
	}

	int iIndex=0;
	GetIndex( lstParaName,strEncod,iIndex);
	if(iIndex==0)
		GetIndex( lstParaName,strName,iIndex);

	if(iIndex>0)
	{
		CATListOfCATUnicodeString lstParaID=m_spCompent->ParametersID;
		if (lstParaID.Size()<iIndex)
		{
			cout<<"this Compent has no parameters id ,the para name is:"<<strName<<endl;
			return;
		}

		strID=lstParaID[iIndex];
	}
}
CATPathElement *RunInCmd::CreateUdfParamterInput(CATUnicodeString strName,
												 CATICkeParm_var oldPar,
												 CATBaseUnknown_var spExternalParamSet,
												 CATBaseUnknown_var spiParamSetpredecessors)
{
	if(strName.SearchSubString("`")==0)
		strName.ReplaceAll("`","");

	CATUnicodeString strEncod =changrEncod(strName);

	CATListOfCATUnicodeString lstParaName=m_spCompent->Parameters;
	if (lstParaName.Size()==0)
	{
		cout<<"this Compent has no parameters,the id is:"<<m_spCompent->ID<<endl;
	}

	int iIndex=0;
	GetIndex( lstParaName,strEncod,iIndex);
	if(iIndex==0)
		GetIndex( lstParaName,strName,iIndex);

	if(iIndex>0)
	{
		if(m_spCompent->ParametersValue[iIndex]=="notfound")
		{
			cout<<"the find index:"<<iIndex<<endl;
			cout<<"not find parameter value in list:"<<strName<<"--->Item ID:"<<m_spCompent->ParametersID[iIndex]<<endl;
			return NULL;
		}
	}
	else
	{
		cout<<"not find parameter name in list:"<<strName<<"---->please check if this item has predecessors item,the item id is："<<m_spCompent->ID<<endl;
		return NULL;
	}

	//int iIndex = m_spCompent->Parameters.Locate(strEncod);
	//if(iIndex==0)
	//	iIndex = m_spCompent->Parameters.Locate(strName);

	CATIType_var spType = oldPar->Type();

	CATUnicodeString strType =spType->Name();

	if(strType=="Surface"||strType=="Plane"||strType=="Curve"||strType=="Line"||strType=="Point")
	{
		cout<<"Element Type is Surface Plane Curve Line Point"<<endl;
		return NULL;
	}

	CATISpecObject_var spObjPart = GetActivePart(mTIPartObject);
	if (spObjPart==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return NULL;
	}

	CATICkeParmFactory_var spParFac = spObjPart->GetFeatContainer();
	if(spParFac==NULL_var)
	{
		cout<<"GetFeatContainer Failed"<<endl;
		return NULL;
	}

	CATICkeParm_var spNew = spParFac->CreateLiteral(spType,strName);
	if(spNew!=NULL_var)
	{
		CATICkeInst_var spOldCkeIns=oldPar->Value();
		CATUnicodeString strOldValue=spOldCkeIns->AsString( );
		//cout<<"old value in template model:"<<strOldValue<<endl;

		spNew->Valuate(oldPar->Value());

		if(iIndex>0)
		{
			if(m_spCompent->ParametersValue[iIndex]!="notfound")
			{
				CATUnicodeString strValue = m_spCompent->ParametersValue[iIndex];

				//cout<<"Para Name is:"<<strName<<endl;
				//cout<<"Para Value in sharePoint:"<<strValue<<endl;
				//cout<<"Para type:"<<strType<<endl;

				if(strType=="Integer")
				{
					int iValue=0;
					strValue.ConvertToNum(&iValue);
					spNew->Valuate(iValue);
				}
				else if(strType=="Real")
				{
					double dValue=0;
					strValue.ConvertToNum(&dValue);
					spNew->Valuate(dValue);
				}
				else if(strType=="double")
				{
					double dValue=0;
					strValue.ConvertToNum(&dValue);

					if (strValue.SearchSubString("mm")==-1)
					{
						spNew->Valuate(dValue/1000);
					}
					else
					{
						spNew->Valuate(strValue);
					}
				}
				else if(strType=="LENGTH")
				{
					if (strValue.SearchSubString("mm")==-1)
					{
						strValue.Append("mm");
					}
					spNew->Valuate(strValue);

				}
				else if(strType=="ANGLE")
				{
					if (strValue.SearchSubString("deg")==-1)
					{
						strValue.Append("deg");
					}
					spNew->Valuate(strValue);
				}
				else
				{
					spNew->Valuate(strValue);
				}
			}

			CATIAllowUserInfo_var spUIn = spNew;

			spUIn->SetComment("ItemID:"+m_spCompent->ParametersID[iIndex]+";Type:In");
		}
		else
		{
			cout<<strName<<"--->not find value in sharePoint"<<endl;
		}

		CATIParmPublisher_var spParmPublisher=NULL_var;
		if (m_spCompent->pRequement==NULL)
		{
			//输入几何集的参数
			spParmPublisher=spiParamSetpredecessors;
		}
		else
		{
			//输出几何集的参数
			spParmPublisher=spExternalParamSet;
		}

		spParmPublisher->Append(spNew);

		//CATFrmEditor *mActiveFrmEditor = CATFrmEditor::GetCurrentEditor();

		//CATPathElement ActElement = mActiveFrmEditor->GetUIActiveObject();

		CATPathElement* pActElement =GetTIPartPathElement(mTIPartObject);

		CATIBuildPath *pBuildPath = NULL;
		spNew->QueryInterface(IID_CATIBuildPath,(void **)&pBuildPath);
		if(pBuildPath!=NULL)
		{
			CATPathElement *pRes=NULL;
			pBuildPath->ExtractPathElement(pActElement,&pRes);

			if (NULL!=pBuildPath)
			{
				pBuildPath->Release();
				pBuildPath=NULL;
			}

			return pRes;

		}
	}

	return NULL;
}
CATPathElement *RunInCmd::GetInputPathElement(CATISpecObject_var spPrtObject,CATUnicodeString strName)
{
	//cout<<"UDF Input Name=="<<strName<<endl;

	CATIAlias_var spAlias=NULL_var;

	//获得当前激活对象
	CATIDescendants_var spDes = GetActivePart(spPrtObject);
	if (spDes==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return NULL;
	}

	//获得当前激活对象下所有的子集
	CATListValCATISpecObject_var lstChildren;
	lstChildren.RemoveAll();
	spDes->GetAllChildren("CATISpecObject",lstChildren);

	CATPathElement* pActElement =GetTIPartPathElement(spPrtObject);

	//参数的名称
	CATUnicodeString strParamName = strName.SubString(1,strName.GetLengthInChar()-2);
	//cout<<"Param Name==="<<strParamName<<endl;

	for(int ii=1;ii<=lstChildren.Size();ii++)
	{
		CATIGSMTool_var spTool = lstChildren[ii];//几何集
		if(spTool!=NULL_var)
			continue;

		spAlias = lstChildren[ii];
		if (spAlias==NULL_var)
			continue;

		CATUnicodeString strChildName = spAlias->GetAlias();
		//cout<<"strChildName==="<<strChildName<<endl;

		//参数的名称：获取最后一个\\后的字符
		CATICkeParm_var spPara = lstChildren[ii];
		if(spPara!=NULL_var)
		{
			int iIndex =  strChildName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
			if(iIndex>=0)
				strChildName = strChildName.SubString(iIndex+1,strChildName.GetLengthInChar()-iIndex-1);
		}

		if(strChildName==strName||(strParamName==strChildName&&spPara!=NULL_var))
		{
			//cout<<"find input udf element"<<endl;

			CATIBuildPath *pBuildPath = NULL;
			lstChildren[ii]->QueryInterface(IID_CATIBuildPath,(void **)&pBuildPath);
			if(pBuildPath!=NULL)
			{
				CATPathElement *pRes=NULL;
				pBuildPath->ExtractPathElement(pActElement,&pRes);
				if (pRes==NULL)
				{
					cout<<"Get UDF input: "<<strName<<"ExtractPathElement Failed"<<endl;
				}
				return pRes;
			}
		}
	}

	return NULL;

}
CATISpecObject_var RunInCmd::GetInputobject(CATISpecObject_var spPrtObject,CATUnicodeString strName)
{
	//cout<<"UDF Input Name=="<<strName<<endl;

	CATIAlias_var spAlias=NULL_var;

	//获得当前激活对象
	CATIDescendants_var spDes = GetActivePart(spPrtObject);
	if (spDes==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return NULL_var;
	}

	//获得当前激活对象下所有的子集
	CATListValCATISpecObject_var lstChildren;
	lstChildren.RemoveAll();
	spDes->GetAllChildren("CATISpecObject",lstChildren);

	CATISpecObject_var spObject=NULL_var;

	//参数的名称
	CATUnicodeString strParamName = strName.SubString(1,strName.GetLengthInChar()-2);
	//cout<<"Param Name==="<<strParamName<<endl;

	for(int ii=1;ii<=lstChildren.Size();ii++)
	{
		CATIGSMTool_var spTool = lstChildren[ii];//几何集
		if(spTool!=NULL_var)
			continue;

		spAlias = lstChildren[ii];
		if (spAlias==NULL_var)
			continue;

		CATUnicodeString strChildName = spAlias->GetAlias();
		//cout<<"strChildName==="<<strChildName<<endl;

		//参数的名称：获取最后一个\\后的字符
		CATICkeParm_var spPara = lstChildren[ii];
		if(spPara!=NULL_var)
		{
			int iIndex =  strChildName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
			if(iIndex>=0)
				strChildName = strChildName.SubString(iIndex+1,strChildName.GetLengthInChar()-iIndex-1);
		}

		if(strChildName==strName||(strParamName==strChildName&&spPara!=NULL_var))
		{
			//cout<<"find input udf element"<<endl;
			spObject=lstChildren[ii];
			break;
		}
	}

	return spObject;

}
CATPathElement *RunInCmd::GetUdfInput(CATUnicodeString strName)
{
	//cout<<"GetUdfInput"<<endl;

	//cout<<"udf input name==="<<strName<<endl;

	CATPathElement *pRes=NULL;

	pRes=GetInputPathElement(mTIPartObject,strName);

	if (m_Part_Type==createPart&&pRes==NULL)
	{
		//去其他part下查找

		if (mRootObject==NULL_var)
			return NULL;

		CATListValCATBaseUnknown_var* LstAllChildren=NULL;
		LstAllChildren=mRootObject->GetAllChildren() ;
		if (LstAllChildren==NULL||LstAllChildren->Size()==0)
			return NULL;

		CATISpecObject_var spsourceobject=NULL_var;

		CATISpecObject_var spSoursePart=NULL_var;

		CATISpecObject_var spTargetPart=mTIPartObject;

		for (int j=1;j<=LstAllChildren->Size();j++)
		{
			CATIProduct_var spChildrenPro=(*LstAllChildren)[j];
			if (spChildrenPro==NULL_var)
				continue;

			//如果是Product则跳过
			if (IsProduct(spChildrenPro))
				continue;

			CATIPrtContainer_var  spiCont=NULL_var;
			CATISpecObject_var spPrtPart=NULL_var;
			GetPrtContFromPrd(spChildrenPro,spiCont,spPrtPart);
			if (spPrtPart==NULL_var)
				continue;

			if (spPrtPart->IsEqual(mTIPartObject))
				continue;

			spsourceobject=GetInputobject(spPrtPart,strName);
			if (spsourceobject!=NULL_var)
			{
				//cout<<"find element "<<strName<<" in other part"<<endl;
				spSoursePart=spPrtPart;
				break;
			}

		}

		CATICkeParm_var spPara=spsourceobject;

		if (spsourceobject!=NULL_var&&spPara==NULL_var)//只拷贝几何元素，不拷贝参数
		{
			//获取目标part下的External References几何集
			CATISpecObject_var sptargetobject=NULL_var;
			GetGstByName(mTIPartObject,mTIPartObject,"External References",sptargetobject);
			if (sptargetobject==NULL_var)
				sptargetobject=mTIPartObject;

			//拷贝元素到目标part
			CATISpecObject_var spPastedObject=NULL_var;
			CopyElement(spsourceobject,sptargetobject, spPastedObject,TRUE);
			if (spPastedObject==NULL_var)
				return pRes;

			cout<<"copy element "<<strName<<" sucess "<<endl;

			CATIBuildPath *pBuildPath = NULL;
			spPastedObject->QueryInterface(IID_CATIBuildPath,(void **)&pBuildPath);
			if(pBuildPath==NULL)
				return pRes;

			CATPathElement* pActElement =GetTIPartPathElement(mTIPartObject);

			pBuildPath->ExtractPathElement(pActElement,&pRes);

		}

	}

	return pRes;

}
void RunInCmd::ReadTSP()
{
	//cout<<"ReadTSP"<<endl;

	//文本标注数量
	m_iTspTextCount = 0;

	CATIPrtPart_var sprtPart = mTIPartObject;
	if (sprtPart==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return;
	}

	CATISpecObject_var spProduct=sprtPart->GetProduct();
	if (sprtPart==NULL_var)
	{
		cout<<"GetProduct Failed"<<endl;
		return;
	}

	CATIProduct_var spiProductOnPart=spProduct;
	if (spiProductOnPart==NULL_var)
	{
		cout<<"GetProduct Failed"<<endl;
		return;
	}

	piViewListback=NULL;
	ViewSetCountback=0;
	iopCaptureListback=NULL;
	CaptureCountback=0;
	iopTPSListback=NULL;
	TPSCountback=0;
	Get3DMarksFromPart(spiProductOnPart,piViewListback,ViewSetCountback,iopCaptureListback,CaptureCountback,iopTPSListback,TPSCountback);
	m_iTspTextCount=TPSCountback;
	m_iTspViewCount=ViewSetCountback;


	////获取当前激活的Part
	//CATIAPart_var spLinkPart = GetActivePart(mTIPartObject);
	//if (spLinkPart==NULL_var)
	//{
	//	cout<<"GetActivePart Failed"<<endl;
	//	return;
	//}

	////获取annotation列表
	//CATIACollection * oAnnotationSets=NULL;
	//spLinkPart->get_AnnotationSets(oAnnotationSets);
	//if(oAnnotationSets==NULL)
	//{
	//	if(isFirt)
	//	{
	//		m_iTspViewCount = 0;
	//		isFirt = false;
	//	}

	//	return;
	//}

	//CATIAAnnotationSets	*pSets=NULL;
	//oAnnotationSets->QueryInterface(IID_CATIAAnnotationSets,(void **)&pSets);
	//if(pSets==NULL)
	//{
	//	if(isFirt)
	//	{
	//		m_iTspViewCount = 0;
	//		isFirt = false;
	//	}
	//	return;
	//}

	////获得annotation的数量
	//long iCount=0;
	//pSets->get_Count(iCount);
	//if(iCount==0)
	//{
	//	if(isFirt)
	//	{
	//		m_iTspViewCount = 0;
	//		isFirt = false;
	//	}
	//	return;
	//}

	////
	//CATVariant vVariant;
	//BuildVariant(iCount,vVariant);

	//CATIAAnnotationSet	*pSet=NULL;
	//CATIABase			*pBase=NULL;
	//pSets->Item(vVariant,pBase);
	//if(pBase==NULL)
	//{
	//	if(isFirt)
	//	{
	//		m_iTspViewCount = 0;
	//		isFirt = false;
	//	}
	//	return;
	//}

	//pBase->QueryInterface(IID_CATIAAnnotationSet,(void **)&pSet);
	//if(pSet==NULL)
	//{
	//	if(isFirt)
	//	{
	//		m_iTspViewCount = 0;
	//		isFirt = false;
	//	}
	//	return;
	//}

	////获得annotation文本标注
	//CATIAAnnotations *pAnns=NULL;
	//pSet->get_Annotations(pAnns);
	//if(pAnns==NULL)
	//{
	//	if(isFirt)
	//	{
	//		m_iTspViewCount = 0;
	//		isFirt = false;
	//	}
	//	return;
	//}

	////获得annotation 文本标注的数量
	//pAnns->get_Count(iCount);
	//m_iTspTextCount = iCount;

	////获得View列表
	//CATIATPSViews *pViews = NULL;
	//pSet->get_TPSViews(pViews);
	//if(pViews==NULL)
	//{
	//	if(isFirt)
	//	{
	//		m_iTspViewCount = 0;
	//		isFirt = false;
	//	}
	//	return;
	//}

	//pViews->get_Count(iCount);
	//if(isFirt)
	//	m_iTspViewCount = iCount;

	//isFirt = false;

}
void RunInCmd::HideViews()
{
	//cout<<"HideViews"<<endl;

	//获取当前激活的Part
	CATIAPart_var spLinkPart = GetActivePart(mTIPartObject);
	if (spLinkPart==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return;
	}

	//获取annotation列表
	CATIACollection * oAnnotationSets=NULL;
	spLinkPart->get_AnnotationSets(oAnnotationSets);
	if(oAnnotationSets==NULL)
	{
		cout<<"get_AnnotationSets Failed"<<endl;
		return;
	}

	CATIAAnnotationSets	*pSets=NULL;
	oAnnotationSets->QueryInterface(IID_CATIAAnnotationSets,(void **)&pSets);
	if(pSets==NULL)
	{
		cout<<"Get CATIAAnnotationSets Failed"<<endl;
		return;
	}

	//获得annotation的数量
	long iCount=0;
	pSets->get_Count(iCount);
	if(iCount==0)
	{
		cout<<"iCount==0"<<endl;
		return;
	}

	//
	CATVariant vVariant;
	BuildVariant(iCount,vVariant);

	CATIABase			*pBase=NULL;
	pSets->Item(vVariant,pBase);
	if(pBase==NULL)
	{
		cout<<"Item CATIABase Failed"<<endl;
		return;
	}

	CATIAAnnotationSet	*pSet=NULL;
	pBase->QueryInterface(IID_CATIAAnnotationSet,(void **)&pSet);
	if(pSet==NULL)
	{
		cout<<"CATIAAnnotationSet Failed"<<endl;
		return;
	}

	//获得View列表
	CATIATPSViews *pViews = NULL;
	pSet->get_TPSViews(pViews);
	if(pViews==NULL)
	{
		cout<<"get_TPSViews Failed"<<endl;
		return;
	}

	pViews->get_Count(iCount);
	//cout<<"Thew View Count:"<<iCount<<endl;

	for(long ii = 1;ii<=iCount;ii++)
	{
		CATVariant vVariant;
		BuildVariant(ii,vVariant);

		CATIABase*pBase=NULL;
		pViews->Item(vVariant,pBase);
		if (pBase==NULL)
			continue;

		CATISpecObject_var spObj=pBase;
		if (spObj==NULL_var)
			continue;

		HideFeature(spObj);

	}

}
void RunInCmd::SetTSP(CATListValCATBaseUnknown_var ListOutputFea)
{
	//cout<<"SetTSP"<<endl;

	HRESULT rc=E_FAIL;

	CATIPrtPart_var sprtPart = mTIPartObject;
	if (sprtPart==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return;
	}

	CATISpecObject_var spProduct=sprtPart->GetProduct();
	if (sprtPart==NULL_var)
	{
		cout<<"GetProduct Failed"<<endl;
		return;
	}

	CATIProduct_var spiProductOnPart=spProduct;
	if (spiProductOnPart==NULL_var)
	{
		cout<<"GetProduct Failed"<<endl;
		return;
	}

	CATITPSViewList*  piViewList=NULL;
	unsigned int ViewSetCount=0;
	CATITPSCaptureList* iopCaptureLis=NULL;
	unsigned int CaptureCount=0;
	CATITPSList* piTPSList=NULL;
	unsigned int TPSCount=0;
	Get3DMarksFromPart(spiProductOnPart,piViewList,ViewSetCount,iopCaptureLis,CaptureCount,piTPSList,TPSCount);
	if (TPSCountback==TPSCount)
	{
		//cout<<"has not annotation text"<<endl;
		return;
	}

	//获得几何几下名称为Annotation Plane的元素
	CATListValCATISpecObject_var LstPlane;
	GetAnnotationPlane(ListOutputFea[1],"Annotation Plane",LstPlane);
	//cout<<"New add annotation plane size:"<<LstPlane.Size()<<endl;
	if (LstPlane.Size()==0)
	{
		return;
	}

	//创建View
	CATISpecObject_var spPlaneObject=LstPlane[1];
	CATITPSView*oTPSView=NULL;
	CreateAnnotationViewFromPart(spiProductOnPart,spPlaneObject,oTPSView);
	if (oTPSView==NULL)
	{
		cout<<"CreateAnnotationViewFromPart failed"<<endl;
		return;
	}

	CATIATPSView *pView = NULL;
	oTPSView->QueryInterface(IID_CATIATPSView,(void **)&pView);
	if(pView==NULL)
	{
		cout<<"QI CATIATPSView Failed"<<endl;
		return;

	}

	HideFeature(oTPSView);

	//将View赋名称
	CATIAlias_var spAliasView = pView;
	spAliasView->SetAlias(m_spCompent->Name);

	//更新View
	CATISpecObject_var spObjVIew = oTPSView;
	spObjVIew->Update();

	CATITPSCapture*oTPSCapture=NULL;
	CreateCaptureFromPart(spiProductOnPart,oTPSCapture);
	if (oTPSCapture==NULL)
	{
		cout<<"CreateCaptureFromPart failed"<<endl;
		return;
	}

	CATIACapture *pCap= NULL;
	oTPSCapture->QueryInterface(IID_CATIACapture,(void **)&pCap);
	if(pCap==NULL)
	{
		cout<<"QI CATIACapture Failed"<<endl;
		return;

	}

	//将Capture赋名称
	CATIAlias_var spAliasCap = pCap;
	spAliasCap->SetAlias(m_spCompent->Name);

	CATISpecAttrAccess *pAcces=NULL;
	pCap->QueryInterface(IID_CATISpecAttrAccess,(void **)&pAcces);
	if (pAcces==NULL)
	{
		cout<<"Capture QI CATISpecAttrAccess Failed"<<endl;
		return;

	}

	//获得Capture的属性
	CATISpecAttrKey* pKeyActiveView = pAcces->GetAttrKey("ActiveView");
	CATISpecAttrKey* pKeyActiveViewSaved = pAcces->GetAttrKey("ActiveViewSaved");
	CATISpecAttrKey* pKeyCapturedViews = pAcces->GetAttrKey("CapturedViews");

	CATISpecObject_var spView = pView;

	if(pKeyCapturedViews)
		pAcces->SetSpecObject(pKeyCapturedViews,spView);

	if(pKeyActiveView)
		pAcces->SetSpecObject(pKeyActiveView,spView);

	if(pKeyActiveViewSaved)
		pAcces->SetBoolean(pKeyActiveViewSaved,true);

	//更新Capture
	CATISpecObject_var spCap = pCap;
	if (spCap!=NULL_var)
	{
		spCap->Update();
	}

	//CATListOfCATUnicodeString LstText;
	//for (unsigned int indexlist = TPSCountback; indexlist < TPSCount ; indexlist++)
	//{
	//	CATITPSComponent* piTPSCompOnSet = NULL;

	//	if (SUCCEEDED(piTPSList->Item (indexlist, &piTPSCompOnSet)))
	//	{
	//		CATITPSText *piTPSText = NULL;
	//		if (piTPSCompOnSet && SUCCEEDED(piTPSCompOnSet->QueryInterface(IID_CATITPSText,(void **)&piTPSText)))
	//		{
	//			wchar_t* oText=NULL;
	//			rc=piTPSText-> GetText(&oText);
	//			if (FAILED(rc)||oText==NULL)
	//				continue;

	//			CATUnicodeString strTextName;
	//			strTextName.BuildFromWChar(oText);

	//			cout<<"New add text:"<<strTextName<<endl;

	//			LstText.Append(strTextName);


	//			piTPSText->Release();
	//			piTPSText=NULL;
	//		}

	//		if (piTPSCompOnSet)
	//		{
	//			piTPSCompOnSet->Release();
	//			piTPSCompOnSet=NULL;
	//		}
	//	}
	//}

	//获取text
	CATIAPart_var spLinkPart = GetActivePart(mTIPartObject);
	if (spLinkPart==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return;
	}

	CATIACollection * oAnnotationSets=NULL;
	spLinkPart->get_AnnotationSets(oAnnotationSets);
	if(oAnnotationSets==NULL)
		return;

	CATIAAnnotationSets	*pSets=NULL;
	oAnnotationSets->QueryInterface(IID_CATIAAnnotationSets,(void **)&pSets);
	if(pSets==NULL)
		return;

	long iCount=0;
	pSets->get_Count(iCount);
	if(iCount==0)
		return;

	//cout<<"iCount=="<<iCount<<endl;

	CATVariant vVariant;
	BuildVariant(iCount,vVariant);

	CATIABase*pBase=NULL;
	pSets->Item(vVariant,pBase);
	if(pBase==NULL)
		return;

	CATIAAnnotationSet	*pSet=NULL;
	pBase->QueryInterface(IID_CATIAAnnotationSet,(void **)&pSet);
	if(pSet==NULL)
		return;

	CATIAAnnotations *pAnns=NULL;
	pSet->get_Annotations(pAnns);
	if(pAnns==NULL)
		return;

	pAnns->get_Count(iCount);
	if(m_iTspTextCount == iCount)
		return;

	CATIAAnnotation *pAnn=NULL;
	for(long ii = m_iTspTextCount+1;ii<=iCount;ii++)
	{
		BuildVariant(ii,vVariant);

		pAnns->Item(vVariant,pBase);
		if (pBase==NULL)
			continue;

		pBase->QueryInterface(IID_CATIAAnnotation,(void **)&pAnn);
		if (pAnn==NULL)
			continue;

		pAnn->TransfertToView(pView);

		CATIAText * oText=NULL;
		pAnn->Text(oText);
		if (oText==NULL)
			continue;

		CATBSTR Text;
		oText->get_Text(Text);

		CATUnicodeString strText;
		strText.BuildFromBSTR(Text);
		//cout<<"New add text:"<<strText<<endl;

		CATISpecObject_var spObj=pAnn;
		if (spObj==NULL_var)
			continue;

		if ( m_spCompent->pRequement==NULL)
		{
			HideAnnotation(spObj);
		}

	}


	//TxtAnot *pnewTxt = new TxtAnot();
	//if(m_pTxtAnnot==NULL)
	//	m_pTxtAnnot=pnewTxt;
	//else
	//{
	//	TxtAnot *plastTxt =m_pTxtAnnot;
	//	while(plastTxt)
	//	{
	//		if(plastTxt->pNext==NULL)
	//		{
	//			plastTxt->pNext = pnewTxt;
	//			pnewTxt->pLast = plastTxt;
	//			break;
	//		}
	//		else
	//			plastTxt = plastTxt->pNext;
	//	}
	//}

	//CATIAPart_var spLinkPart = GetActivePart(mTIPartObject);
	//if (spLinkPart==NULL_var)
	//{
	//	cout<<"GetActivePart Failed"<<endl;
	//	return;
	//}

	//CATIACollection * oAnnotationSets=NULL;
	//spLinkPart->get_AnnotationSets(oAnnotationSets);
	//if(oAnnotationSets==NULL)
	//	return;

	//CATIAAnnotationSets	*pSets=NULL;
	//oAnnotationSets->QueryInterface(IID_CATIAAnnotationSets,(void **)&pSets);
	//if(pSets==NULL)
	//	return;

	//long iCount=0;
	//pSets->get_Count(iCount);
	//if(iCount==0)
	//	return;

	////cout<<"iCount=="<<iCount<<endl;

	//CATVariant vVariant;
	//BuildVariant(iCount,vVariant);

	//CATIABase*pBase=NULL;
	//pSets->Item(vVariant,pBase);
	//if(pBase==NULL)
	//	return;

	//CATIAAnnotationSet	*pSet=NULL;
	//pBase->QueryInterface(IID_CATIAAnnotationSet,(void **)&pSet);
	//if(pSet==NULL)
	//	return;

	//CATIAAnnotations *pAnns=NULL;
	//pSet->get_Annotations(pAnns);
	//if(pAnns==NULL)
	//	return;

	//pAnns->get_Count(iCount);
	//if(m_iTspTextCount == iCount)
	//	return;

	////获得几何几下名称为Annotation Plane的元素
	//CATISpecObject_var spPalne=NULL_var;
	//if (ListOutputFea.Size()==1)
	//{
	//	spPalne = GetLastChildByName(ListOutputFea[1],"Annotation Plane");//annotation plane
	//}

	//if (spPalne==NULL_var)
	//{
	//	spPalne = GetLastChildByName(mTIPartObject,"Annotation Plane");//annotation plane
	//}

	//if (spPalne==NULL_var)
	//{
	//	cout<<"Get annotation plane Failed"<<endl;
	//}

	////给Txt赋值
	//pnewTxt->Plane = spPalne;
	//pnewTxt->strName = m_spCompent->Name;
	//pnewTxt->IsRequement = m_spCompent->pRequement!=NULL;

	//CATIAAnnotation *pAnn=NULL;
	//for(long ii = m_iTspTextCount+1;ii<=iCount;ii++)
	//{
	//	BuildVariant(ii,vVariant);

	//	pAnns->Item(vVariant,pBase);
	//	if (pBase==NULL)
	//		continue;

	//	pBase->QueryInterface(IID_CATIAAnnotation,(void **)&pAnn);
	//	if (pAnn==NULL)
	//		continue;

	//	CATISpecObject_var spObj=pAnn;
	//	if (spObj==NULL_var)
	//		continue;

	//	pnewTxt->ListTxts.Append(spObj);

	//}

}
void RunInCmd::SetTxts()
{
	//cout<<"SetTxts"<<endl;

	HRESULT rc=E_FAIL;

	CATIAlias_var spAlias=NULL_var;

	CATIAPart_var spLinkPart = GetActivePart(mTIPartObject);
	if (spLinkPart==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return;
	}

	CATIPrtPart_var sprtPart = spLinkPart;
	if (sprtPart==NULL_var)
	{
		cout<<"GetActivePart Failed"<<endl;
		return;
	}

	CATISpecObject_var spProduct=sprtPart->GetProduct();
	if (sprtPart==NULL_var)
	{
		cout<<"GetProduct Failed"<<endl;
		return;
	}

	CATIProduct_var spiProductOnPart=spProduct;
	if (spiProductOnPart==NULL_var)
	{
		cout<<"GetProduct Failed"<<endl;
		return;
	}

	CATIACollection * oAnnotationSets=NULL;
	spLinkPart->get_AnnotationSets(oAnnotationSets);
	if(oAnnotationSets==NULL)
		return;

	CATIAAnnotationSets	*pSets=NULL;
	oAnnotationSets->QueryInterface(IID_CATIAAnnotationSets,(void **)&pSets);
	if(pSets==NULL)
		return;

	long iCount=0;
	pSets->get_Count(iCount);
	if(iCount==0)
		return;

	CATVariant vVariant;
	BuildVariant(iCount,vVariant);

	CATIABase*pBase=NULL;
	pSets->Item(vVariant,pBase);
	if(pBase==NULL)
		return;

	CATIAAnnotationSet*pSet=NULL;
	pBase->QueryInterface(IID_CATIAAnnotationSet,(void **)&pSet);
	if(pSet==NULL)
		return;

	CATIAAnnotations *pAnns=NULL;
	pSet->get_Annotations(pAnns);
	if(pAnns==NULL)
		return;

	CATIDescendants_var spTool = sprtPart->GetCurrentFeature();//当前激活的几何集
	if (spTool==NULL_var)
		return;

	TxtAnot *plastTxt =m_pTxtAnnot;
	while(plastTxt)
	{
		//原标注信息的参考平面
		CATISpecObject_var spPlaneObject=plastTxt->Plane;

		if(spPlaneObject!=NULL_var&&plastTxt->ListTxts.Size()>0)
		{

			CATITPSView*oTPSView=NULL;
			CreateAnnotationViewFromPart(spiProductOnPart,spPlaneObject,oTPSView);
			if (oTPSView==NULL)
			{
				cout<<"CreateAnnotationViewFromPart failed"<<endl;
				continue;
			}

			CATIATPSView *pView = NULL;
			oTPSView->QueryInterface(IID_CATIATPSView,(void **)&pView);
			if(pView==NULL)
			{
				cout<<"QI CATIATPSView Failed"<<endl;
				continue;

			}

			HideFeature(oTPSView);

			//将View赋名称
			CATIAlias_var spAliasView = pView;
			spAliasView->SetAlias(plastTxt->strName);

			CATIAAnnotation *pAnn=NULL;
			for(long ii = 1;ii<=plastTxt->ListTxts.Size();ii++)
			{
				plastTxt->ListTxts[ii]->QueryInterface(IID_CATIAAnnotation,(void **)&pAnn);
				if (pAnn==NULL)
					continue;

				//将Annotation 放到View
				pAnn->TransfertToView(pView);

				//隐藏Annotation
				if(plastTxt->IsRequement==false)
					HideFeature(plastTxt->ListTxts[ii]);
			}

			//更新View
			CATISpecObject_var spObjVIew = oTPSView;
			spObjVIew->Update();

			CATITPSCapture*oTPSCapture=NULL;
			CreateCaptureFromPart(spiProductOnPart,oTPSCapture);
			if (oTPSCapture==NULL)
			{
				cout<<"CreateCaptureFromPart failed"<<endl;
				continue;
			}

			CATIACapture *pCap= NULL;
			oTPSCapture->QueryInterface(IID_CATIACapture,(void **)&pCap);
			if(pCap==NULL)
			{
				cout<<"QI CATIACapture Failed"<<endl;
				continue;

			}

			//////获得参考平面
			//CATIAReference *pRefSuf = NULL;
			//GetReferenceFromSpec(spPlaneObject,pRefSuf);	
			//if (pRefSuf==NULL)
			//{
			//	cout<<"GetReferenceFromSpec Failed"<<endl;
			//	return;
			//}

			//CATIATPSViewFactory *pViewFac = NULL;
			//pSet->get_TPSViewFactory(pViewFac);
			//if (pViewFac==NULL)
			//{
			//	cout<<"get_TPSViewFactory Failed--->The Annotian does not add in TPSView"<<endl;
			//	return;
			//}


			//BuildVariant((long)1,vVariant);

			////创建View
			//CATIATPSView *pView = NULL;
			//pViewFac->CreateView(pRefSuf,vVariant,pView);
			//if (pView==NULL)
			//{
			//	cout<<"CreateView Failed"<<endl;

			//	return;
			//}

			//CATIACaptureFactory *pCapfac = NULL;
			//pSet->get_CaptureFactory(pCapfac);
			//if (pCapfac==NULL)
			//{
			//	cout<<"get_CaptureFactory Failed"<<endl;

			//	return;
			//}

			////创建CATIACapture
			//CATIACapture *pCap = NULL;
			//pCapfac->CreateCapture(pCap);
			//if(pCap==NULL)
			//{
			//	cout<<"CreateCapture Failed"<<endl;
			//	return;
			//}

			//将Capture赋名称
			CATIAlias_var spAliasCap = pCap;
			spAliasCap->SetAlias(plastTxt->strName);

			CATISpecAttrAccess *pAcces=NULL;
			pCap->QueryInterface(IID_CATISpecAttrAccess,(void **)&pAcces);
			if (pAcces==NULL)
			{
				cout<<"Capture QI CATISpecAttrAccess Failed"<<endl;
				continue;

			}

			//获得Capture的属性
			CATISpecAttrKey* pKeyActiveView = pAcces->GetAttrKey("ActiveView");
			CATISpecAttrKey* pKeyActiveViewSaved = pAcces->GetAttrKey("ActiveViewSaved");
			CATISpecAttrKey* pKeyCapturedViews = pAcces->GetAttrKey("CapturedViews");

			CATISpecObject_var spView = pView;

			if(pKeyCapturedViews)
				pAcces->SetSpecObject(pKeyCapturedViews,spView);

			if(pKeyActiveView)
				pAcces->SetSpecObject(pKeyActiveView,spView);

			if(pKeyActiveViewSaved)
				pAcces->SetBoolean(pKeyActiveViewSaved,true);

			//更新Capture
			CATISpecObject_var spCap = pCap;
			if (spCap!=NULL_var)
			{
				spCap->Update();
			}
		}

		plastTxt = plastTxt->pNext;
	}

	if(m_iTspViewCount==0)
	{
		CATIATPSViews *pViews = NULL;
		pSet->get_TPSViews(pViews);
		if(pViews==NULL)
			return;

		BuildVariant((long)1,vVariant);

		CATIABase *pOldView = NULL;
		pViews->Item(vVariant,pOldView);
		if(pOldView==NULL)
			return;

		CATISpecObject_var spOldView = pOldView;
		if(spOldView==NULL_var)
			return;

		CATISpecObject_var spViewFather = spOldView->GetFather();
		if(spViewFather==NULL_var)
			return;

		CATIDescendants_var spDes = spViewFather;
		if(spDes==NULL_var)
			return;

		spDes->RemoveChild(spOldView);
	}

	CATISpecObject_var spPrtPartObject=sprtPart;
	if (spPrtPartObject!=NULL_var)
	{
		CATTry
		{
			spPrtPartObject->Update();

		}
		CATCatch(CATError,error)
		{
		}
		CATEndTry;

	}

	//cout<<"SetTxts end "<<endl;

}
CATBoolean RunInCmd::GetPropertyinfor(CATUnicodeString strId,CATUnicodeString &strProject,CATUnicodeString &strTIStage)
{
	if (strId.SearchSubString("Project:")==-1||strId.SearchSubString("TIStage:")==-1)
		return FALSE;

	//CATUnicodeString strProject,strTIStage,strTIID;
	//CATListOfCATUnicodeString LstTIID;
	if (strId.SearchSubString("TIID:")>0)
	{
		//以;分隔
		CATListOfCATUnicodeString LstSplitUnicode=SplitUnicode(strId,";");
		if (LstSplitUnicode.Size()!=3)
			return FALSE;

		CATUnicodeString strSplitUnicodeProject=LstSplitUnicode[1];
		CATUnicodeString strSplitUnicodeStage=LstSplitUnicode[2];
		CATUnicodeString strSplitUnicodeTI=LstSplitUnicode[3];

		//Project以:分隔
		LstSplitUnicode.RemoveAll();
		LstSplitUnicode=SplitUnicode(strSplitUnicodeProject,":");
		if (LstSplitUnicode.Size()!=2)
			return FALSE;

		strProject=LstSplitUnicode[2];

		//Stage以:分隔
		LstSplitUnicode.RemoveAll();
		LstSplitUnicode=SplitUnicode(strSplitUnicodeStage,":");
		if (LstSplitUnicode.Size()!=2)
			return FALSE;

		strTIStage=LstSplitUnicode[2];

	}
	else
	{
		int iNdex = strId.SearchSubString(";");
		int llen = strId.GetLengthInChar();
		if(iNdex>0&&llen>0)
		{
			strProject=strId.SubString(0,iNdex);
			strTIStage=strId.SubString(iNdex+1,llen-1-iNdex);
			if(strProject.SearchSubString("Project:")==0&&strTIStage.SearchSubString("TIStage:")==0)
			{
				strProject.ReplaceAll("Project:","");
				strTIStage.ReplaceAll("TIStage:","");
			}
			else
			{
				strProject="";
				strTIStage="";
			}
		}
	}

	//cout<<"Project ID==="<<strProject<<endl;
	//cout<<"TI Stage ID==="<<strTIStage<<endl;

	return TRUE;

}
CATBoolean RunInCmd::GetTIinfor(CATUnicodeString strId,CATListOfCATUnicodeString &LstTIID)
{
	if (strId.SearchSubString("Project:")==-1||strId.SearchSubString("TIStage:")==-1)
		return FALSE;

	CATUnicodeString strProject,strTIStage,strTIID;
	//CATListOfCATUnicodeString LstTIID;

	//以;分隔
	CATListOfCATUnicodeString LstSplitUnicode=SplitUnicode(strId,";");
	if (LstSplitUnicode.Size()!=3)
		return FALSE;

	//CATUnicodeString strSplitUnicodeProject=LstSplitUnicode[1];
	//CATUnicodeString strSplitUnicodeStage=LstSplitUnicode[2];
	CATUnicodeString strSplitUnicodeTI=LstSplitUnicode[3];

	////Project以:分隔
	//LstSplitUnicode.RemoveAll();
	//LstSplitUnicode=SplitUnicode(strSplitUnicodeProject,":");
	//if (LstSplitUnicode.Size()!=2)
	//	return FALSE;

	//strProject=LstSplitUnicode[2];

	////Stage以:分隔
	//LstSplitUnicode.RemoveAll();
	//LstSplitUnicode=SplitUnicode(strSplitUnicodeStage,":");
	//if (LstSplitUnicode.Size()!=2)
	//	return FALSE;

	//strTIStage=LstSplitUnicode[2];

	//TI以:分隔
	LstSplitUnicode.RemoveAll();
	LstSplitUnicode=SplitUnicode(strSplitUnicodeTI,":");
	if (LstSplitUnicode.Size()!=2)
		return FALSE;

	strTIID=LstSplitUnicode[2];
	LstTIID.RemoveAll();
	if (strTIID.SearchSubString("_")>0)
	{
		LstTIID=SplitUnicode(strTIID,"_");
	}
	else
	{
		LstTIID.Append(strTIID);
	}

	return TRUE;

}