// COPYRIGHT Dassault Systemes 2021
//===================================================================
//
// TJMDlgInterApplication.cpp
// Header definition of TJMDlgInterApplication
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Mar 2021  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TJMDlgInterApplication.h"
 
//CATImplementClass( TJMDlgInterApplication,
//                   Implementation, 
//                   CATInteractiveApplication,
//                   CATNull );
 
//-----------------------------------------------------------------------------
// TJMDlgInterApplication : constructor
//-----------------------------------------------------------------------------
TJMDlgInterApplication::TJMDlgInterApplication(const CATString& iIdentifier):
						CATInteractiveApplication(NULL,iIdentifier)
{
	cout << endl <<"The TJMDlgInterApplication begins..... " <<endl << endl;
}

//-----------------------------------------------------------------------------
// TJMDlgInterApplication : destructor
//-----------------------------------------------------------------------------
TJMDlgInterApplication::~TJMDlgInterApplication()
{
	cout << endl <<"The TJMDlgInterApplication is finished..... " <<endl << endl;
}
 
//-----------------------------------------------------------------------------
// TJMDlgInterApplication : copy constructor
//-----------------------------------------------------------------------------
TJMDlgInterApplication::TJMDlgInterApplication(TJMDlgInterApplication& original):
   CATInteractiveApplication(original)
{
}
 
//-----------------------------------------------------------------------------
// TJMDlgInterApplication : equal operator
//-----------------------------------------------------------------------------
TJMDlgInterApplication& TJMDlgInterApplication::operator=(TJMDlgInterApplication& original)
{
   CATInteractiveApplication::operator=(original);
   return *this;
}
 
void TJMDlgInterApplication::BeginApplication() 
{
	cout <<"TJMDlgInterApplication::BeginApplication" << endl;

	// This window is deleted when the application is deleted.
	// The application is deleted by the Destroy Method called in the 
	// CAADlgHelloWindow::Exit method.
	//
	TJMDlgInterWindow * pMainWindow = NULL;
	pMainWindow = new TJMDlgInterWindow(this);

	// Constructs all Dialog'objects of the window
	pMainWindow->Build();

	pMainWindow->SetVisibility(CATDlgShow);
}

//------------------------------------------------------------------------

int TJMDlgInterApplication::EndApplication() 
{
	cout << endl << "TJMDlgInterApplication::EndApplication" << endl;

	// OK
	return(0);
}


//------------------------------------------------------------------------

// Application created
TJMDlgInterApplication ApplicationInstance("Test");

/*
int main(int argc, char* argv[])
{
	//// Checks arguments
	//cout << " argc = "<< argc << endl;
	//for (int i=0;i<argc;i++) cout << "argv =[ "<<i<<" ]= "<< argv[i] << endl;
	//if ( 5 <  argc) return 1;

	//char*  pPartName = NULL;
	//pPartName=  argv[1];

	//CATUnicodeString istrX,istrY,istrZ;

	//int length = strlen(argv[2]);
	//istrX.BuildFromUTF8(argv[2],length);

	//length = strlen(argv[3]);
	//istrY.BuildFromUTF8(argv[3],length);

	//length = strlen(argv[4]);
	//istrZ.BuildFromUTF8(argv[4],length);

	//// Create Tool Object 
	//CAAGsiUserTools CAAGsiObjTool;

	//HRESULT rc = S_OK;

	//cout << "====================================================================" << endl;
	//cout << "=========        Batch : Start Create A Point              =========" << endl;
	//cout << "====================================================================" << endl;
	//cout << "(TestBatchCreatePointCmd) Start"  << endl;
	//cout << endl;

	//cout<<"  Starting Checking License  "<<endl;	//在建立sesstion前需要先设置license，不能放后面
	//CATUnicodeString strLicName = "_MD2.slt+";
	//rc = CheckStaticLicense(strLicName);
	//if (FAILED(rc))
	//{
	//	system("pause");
	//	return 99;
	//}

	//cout << "(TestBatchCreatePointCmd) Init session " << endl;
	//cout << " Init Session  " << endl;
	//char* pSessionName = "TestBatchCreatePointSession";
	//rc = CAAGsiObjTool.Init( pSessionName);
	//if (FAILED(rc)) return 2; 


	//CATIGSMTool_var spTool  = CAAGsiObjTool.CreateGSMTool("TestBatchCreatPoint",1,0,0);

	//cout << "(TestBatchCreatePointCmd) Creating Points" << endl; 

	//CATLISTV(CATISpecObject_var) lstSpecParameters;
	//CATISpecObject_var spiParmCurrent = NULL_var;

	//double dblCoordX,dblCoordY,dblCoordZ;
	//int iTransferX = istrX.ConvertToNum(&dblCoordX);
	//int iTransferY = istrY.ConvertToNum(&dblCoordY);
	//int iTransferZ = istrZ.ConvertToNum(&dblCoordZ);
	//if (iTransferX==0 || iTransferY==0 || iTransferZ==0)
	//{
	//	return 3;
	//}

	//CAAGsiObjTool.CreateLength("Coord_X",dblCoordX,spiParmCurrent);	lstSpecParameters.Append(spiParmCurrent);
	//CAAGsiObjTool.CreateLength("Coord_Y",dblCoordY,spiParmCurrent);	lstSpecParameters.Append(spiParmCurrent);
	//CAAGsiObjTool.CreateLength("Coord_Z",dblCoordZ,spiParmCurrent);	lstSpecParameters.Append(spiParmCurrent);

	//CATISpecObject_var spiSpecPoint = CAAGsiObjTool.CreatePointCoord(lstSpecParameters);

	//// ----------------------------------------------------------------------------
	//// 4- Exit 
	//// ----------------------------------------------------------------------------

	//// Save Part 
	//// ------------------------------------
	//// Saves the modified pad in the second input path

	//if ( NULL != pPartName ) {
	//	cout << "(TestBatchCreatePointCmd) Save : "<< pPartName  << endl;
	//	rc = CAAGsiObjTool.Save(pPartName);
	//	if (FAILED(rc)) return 4 ;        
	//}

	//// Close Session
	//// ------------------------------------
	//cout << "(TestBatchCreatePointCmd) Close session " << endl;
	//rc = CAAGsiObjTool.Close(pSessionName);
	//if (FAILED(rc)) return 5;        

	cout << "(TJMDlgInterApplication) End "  <<endl;
	cout << "====================================================================" << endl;
	cout << "=========        Batch : End TJMDlgInterApplication       =========" << endl;
	cout << "====================================================================" << endl;
	cout << endl;

	system("pause");

	return 0;
}
*/