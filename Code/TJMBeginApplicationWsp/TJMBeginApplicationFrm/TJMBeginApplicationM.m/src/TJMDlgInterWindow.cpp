// COPYRIGHT Dassault Systemes 2021
//===================================================================
//
// TJMDlgInterWindow.cpp
// Header definition of TJMDlgInterWindow
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Mar 2021  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TJMDlgInterWindow.h"
 
//CATImplementClass( TJMDlgInterWindow,
//                   Implementation, 
//                   CATDlgDocument,
//                   CATNull );
 
//-----------------------------------------------------------------------------
// TJMDlgInterWindow : constructor
//-----------------------------------------------------------------------------
TJMDlgInterWindow::TJMDlgInterWindow(CATInteractiveApplication * iParentCommand)                              
: CATDlgDocument(iParentCommand, "CAADlgInterWindowId",CATDlgGridLayout)		//dlg样式必须设置，否则后面窗体布局会有问题
,_pApplication(iParentCommand)
,_pTheModelToDisplay(NULL)
,_p3DViewer(NULL)
,_pFrame3DView(NULL)
,_pContainer3DViewer(NULL)
,_pSession(NULL)
,_pDoc(NULL)
,_spBURootObj(NULL_var)
,_pHSO(NULL)
,_pPSO(NULL)
{
	cout << "TJMDlgInterWindow::TJMDlgInterWindow" << endl;

	// Don't construct any Dialog's Object child in the constructor 
	// Use the Build Method to do this.

	_pHSO = new CATHSO();
	_pPSO = new CATPSO();

}

//-----------------------------------------------------------------------------
// TJMDlgInterWindow : destructor
//-----------------------------------------------------------------------------
TJMDlgInterWindow::~TJMDlgInterWindow()
{
	cout << "TJMDlgInterWindow::~TJMDlgInterWindow" << endl; 
	//_pApplication = NULL ;

	Detach();

	if (_pHSO!=NULL)
	{
		_pHSO->Empty();
		_pHSO=NULL;
	}

	if (_pPSO!=NULL)
	{
		_pPSO->Empty();
		_pPSO=NULL;
	}
	
	_pFrame3DView=NULL;
	_pContainer3DViewer=NULL;

	if ( NULL != _pTheModelToDisplay )
	{
		// The bag and its children are deleted
		_pTheModelToDisplay->Destroy();
		_pTheModelToDisplay = NULL ;
	}

	// All Dialog's Object children of this Window are
	// automatically deleted ( The _p3DViewer included )
	_p3DViewer    = NULL ;
	_pApplication = NULL ;

	char *pSessionName = "Test_Session";
	Close(pSessionName);
}
 
//-----------------------------------------------------------------------------
// TJMDlgInterWindow : copy constructor
//-----------------------------------------------------------------------------
TJMDlgInterWindow::TJMDlgInterWindow(TJMDlgInterWindow& original):
   CATDlgDocument(original)
{
}
 
//-----------------------------------------------------------------------------
// TJMDlgInterWindow : equal operator
//-----------------------------------------------------------------------------
TJMDlgInterWindow& TJMDlgInterWindow::operator=(TJMDlgInterWindow& original)
{
   CATDlgDocument::operator=(original);
   return *this;
}
 
void TJMDlgInterWindow::Build()
{
	cout << "TJMDlgInterWindow::Build" << endl;

	_pFrame3DView = new CATDlgFrame(this, "FrameLeft", CATDlgFraNoTitle|CATDlgGridLayout);
	_pFrame3DView -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
	_pFrame3DView -> SetGridColumnResizable(0,1);
	_pContainer3DViewer = new CATDlgContainer(_pFrame3DView, "Container006");
	_pContainer3DViewer -> SetRectDimensions(1, 1, 500, 850);
	_pContainer3DViewer -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);

	CATDlgFrame *pFrameRight = new CATDlgFrame(this, "FrameRight", CATDlgFraNoTitle|CATDlgGridLayout);
	pFrameRight -> SetGridConstraints(0, 1, 1, 1, CATGRID_4SIDES);
	pFrameRight -> SetGridColumnResizable(1,1);

	CATDlgLabel *pLabel004 = new CATDlgLabel(pFrameRight, "Label004");
	pLabel004 -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
	CATDlgSelectorList *pSelectorListSel1 = new CATDlgSelectorList(pFrameRight, "SelectorListSel1");
	pSelectorListSel1 -> SetVisibleTextHeight(1);
	pSelectorListSel1 -> SetVisibleTextWidth(15);
	pSelectorListSel1 -> SetGridConstraints(0, 1, 1, 1, CATGRID_4SIDES);

	// On the Close 
	AddAnalyseNotificationCB(this,
							GetWindCloseNotification(),
							(CATCommandMethod)&TJMDlgInterWindow::Exit, NULL);


	//
	pSelectorListSel1->SetLine("No Selection",-1);
	pLabel004->SetTitle("Surface: ");

	//CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();

	char *pSessionName = "Test_Session";
	InitSession(pSessionName);
	CATUnicodeString strPath = "c://TestBeginApp.CATPart";
	if (FAILED(CATDocumentServices::OpenDocument(strPath,_pDoc,FALSE)) || _pDoc == NULL)
	{
		return;
	}
	//CATIPrtPart_var spiPart = NULL_var;
	//if (FAILED(GetProductFromPath(strPath,FALSE,spiPart))||spiPart==NULL_var)
	//{
	//	cout<<"==> GetProductFromPath failed........."<<endl;
	//	return;
	//}
	////
	//TJMCreateViewWindowDlg *p3DViewWindowDlg = new TJMCreateViewWindowDlg(_pContainer3DViewer,"Test_3D_View",spiPart); //如果要预览Part的模型树，需要传入CATIPrtPart
	//p3DViewWindowDlg->Build();
	//p3DViewWindowDlg->SetVisibility(CATDlgShow);

	//CATFrmEditor *pEditor1 = CATFrmEditor::GetCurrentEditor();

	CATIEditor*pEditor=NULL;
	if (FAILED(_pDoc->QueryInterface(IID_CATIEditor, (void **)&pEditor))||pEditor==NULL)
		return;

	CATFrmEditor* pFrmEditor= pEditor->GetEditor();
	if (pFrmEditor==NULL)
		return;

	CreateViewer();

	//CATFrmEditor *pEditor2 = CATFrmEditor::GetCurrentEditor();

	CreateModelRepresentation();

	VisualizeModel();

	Attach();

	CreateNavigBox();

}

//--------------------------------------------------------------------------------------

void TJMDlgInterWindow::Exit(CATCommand         * iSendingCommand, 
							 CATNotification    * iSentNotification, 
							 CATCommandClientData iUsefulData)
{
	::Delete_Session("Test_Begin_Application");
	_pApplication->Destroy();
	_pApplication = NULL ;
}

//void TJMDlgInterWindow::LoadModel()
//{
//	//从路径获取对应模板根节点
//	CATUnicodeString strPath = "c://TestBeginApp.CATPart";
//	CATIPrtPart_var spiPart = NULL_var;
//	if (FAILED(GetProductFromPath(strPath,FALSE,spiPart))||spiPart==NULL_var)
//	{
//		cout<<"==> GetProductFromPath failed........."<<endl;
//		return;
//	}
//	//
//	TJMCreateViewWindowDlg *p3DViewWindowDlg = new TJMCreateViewWindowDlg(_pDlg,"Test_3D_View",spiPartOnTemplate); //如果要预览Part的模型树，需要传入CATIPrtPart
//	p3DViewWindowDlg->Build();
//	//_p3DViewWindowDlg->SetVisibility(CATDlgHide);
//	p3DViewWindowDlg->SetVisibility(CATDlgShow);
//}

//从指定目录下获得CATPart文件的根节点
HRESULT TJMDlgInterWindow::GetProductFromPath(CATUnicodeString istrFilePath,CATBoolean ibDocReadOnly,CATIPrtPart_var &ospiRootPrtPart)
{
	HRESULT rc = S_OK;
	CATSession* pSession = NULL;
	rc = ::Create_Session("Test_Begin_Application",pSession);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATDocument* pDoc = NULL;
	rc = CATDocumentServices::OpenDocument(istrFilePath,pDoc,ibDocReadOnly);
	if (FAILED(rc) || pDoc == NULL)
	{
		return E_FAIL;
	}

	CATInit *pDocAsInit = NULL ;
	rc = pDoc->QueryInterface(IID_CATInit, (void**)&pDocAsInit);
	if ( FAILED(rc) )
	{
		cout <<" Error in retrieving a QI on CATInit" << endl;
		return E_FAIL ;
	}

	CATIPrtContainer *pSpecContainer = NULL ;
	pSpecContainer = (CATIPrtContainer*)pDocAsInit->GetRootContainer("CATIPrtContainer");

	if ( NULL == pSpecContainer )
	{
		cout <<" Error in retrieving the Root container" << endl;
		return E_FAIL ;
	}

	pDocAsInit->Release();
	pDocAsInit = NULL ;

	//
	// 5- Retrieves on the root container (CATPrtCont) to get the Part feature
	// 

	CATISpecObject_var spPart = pSpecContainer->GetPart() ;
	if ( NULL_var == spPart )
	{
		cout <<" Error in retrieving the Part feature" << endl;
		return E_FAIL ;
	}
	ospiRootPrtPart = spPart;

	pSpecContainer->Release();
	pSpecContainer = NULL ;

	return rc;
}

//--------------------------------------------------------------------------------------
void TJMDlgInterWindow::CreateViewer()
{

	// The window contains a 3DViewer which allows 3D Manipulations 
	_p3DViewer = new CATNavigation3DViewer( _pContainer3DViewer, "3DViewerId",CATDlgFraNoTitle, 800, 450);

	// Changes the color of the background
	_p3DViewer->SetBackgroundColor(0.2f,0.2f,0.6f);

	// The Viewer is attached to the 4 sides of the Window.
	Attach4Sides( _p3DViewer);

}
//--------------------------------------------------------------------------------------                 
void TJMDlgInterWindow::CreateModelRepresentation()
{
	// ------------------------------------------
	// The Top of the graphic representation tree
	// ------------------------------------------

	_pTheModelToDisplay = new CAT3DBagRep();
/*
	// ------------------------------------------
	// Create a cuboid
	// ------------------------------------------

	CATMathPointf  Corner (-20.f, -20.f,  0.f);
	CATMathVectorf FirstVector ( 20.f,   0.f,  0.f);
	CATMathVectorf SecondVector (  0.f,  20.f,  0.f);
	CATMathVectorf ThirdVector (  0.f,   0.f, 20.f);


	CAT3DCuboidRep * pCuboid = new CAT3DCuboidRep(Corner,
		FirstVector,
		SecondVector,
		ThirdVector);
	if ( NULL != pCuboid )
	{
		pCuboid->SetColor(YELLOW);
		_pTheModelToDisplay->AddChild(*pCuboid);
	}

	// ------------------------------------------
	// Create a sphere
	// ------------------------------------------
	CATMathPointf  Center (0.f, 0.f, 20.f);
	float          Radius        = 10.f;


	CAT3DSimpleSphereRep * pSphere = new CAT3DSimpleSphereRep(Center, Radius);

	if ( NULL != pSphere )
	{

		pSphere->SetColor(GREEN);
		pSphere->SetTransparentMode(1);

		_pTheModelToDisplay->AddChild(*pSphere);
	}
*/

	ShowProduct(_pDoc);

}

//--------------------------------------------------------------------------------------                 
void TJMDlgInterWindow::VisualizeModel()
{

	if ( (NULL != _p3DViewer) && ( NULL != _pTheModelToDisplay) )
	{    
		// Instruction to do once .
		_p3DViewer->AddRep((CAT3DRep*)_pTheModelToDisplay);

		// Instruction to do at each  representation modification 
		_p3DViewer->Draw();
	}

}

void TJMDlgInterWindow::ShowProduct(CATDocument * ipDoc)
{
	if(NULL == ipDoc)
		return;

	CATInit* pDocInit = NULL;
	HRESULT rc=ipDoc->QueryInterface(IID_CATInit, (void**)&pDocInit);
	if(SUCCEEDED(rc) && NULL != pDocInit)
	{
		CATIPrtContainer *pSpecContainer = NULL ;
		pSpecContainer=(CATIPrtContainer*)pDocInit->GetRootContainer("CATIPrtContainer"); 
		if(NULL != pSpecContainer)
		{
			CATISpecObject_var spSpecObjectOnMechanicalPart = pSpecContainer->GetPart();
			_spBURootObj = spSpecObjectOnMechanicalPart;
			ShowModelInTheDialog(spSpecObjectOnMechanicalPart);
			
		}
		else
		{
			CATIDocRoots* piDocRootsOnDoc = NULL;
			rc = ipDoc->QueryInterface(IID_CATIDocRoots,(void**) &piDocRootsOnDoc);
			if(SUCCEEDED(rc) && NULL != piDocRootsOnDoc)
			{
				CATListValCATBaseUnknown_var* pRootProducts = piDocRootsOnDoc->GiveDocRoots();
				CATIProduct_var spRootProduct = NULL_var;
				if (pRootProducts->Size())
				{  
					spRootProduct = (*pRootProducts)[1];
					delete pRootProducts;
					pRootProducts = NULL;
				}
				CATIProduct *piProductOnRoot = NULL;
				rc = spRootProduct->QueryInterface(IID_CATIProduct,(void**) &piProductOnRoot);
				if(SUCCEEDED(rc) && NULL != piProductOnRoot)
				{
					CATISpecObject_var spSpecProduct=NULL_var;
					spSpecProduct=piProductOnRoot;
					_spBURootObj = spSpecProduct;
					if(NULL_var != spSpecProduct)
					{
						ShowModelInTheDialog(spSpecProduct);
					}
					piProductOnRoot->Release();
					piProductOnRoot=NULL;
				}
				piDocRootsOnDoc->Release();
				piDocRootsOnDoc=NULL;
			}
		}

		pDocInit->Release();
		pDocInit=NULL;
	}
}

void TJMDlgInterWindow::ShowModelInTheDialog(CATISpecObject_var spSpecObjectOnMechanicalPart)
{
	HRESULT rc;
	CATPathElement * pRootObjectPath = new CATPathElement(spSpecObjectOnMechanicalPart);
	CATVisManager* pVisManager = CATVisManager::GetVisManager();
	if(NULL != pVisManager)
	{
		list<IID> ListIVisu3d;
		IID * pIIDInf = new IID(IID_CATI3DGeoVisu);
		ListIVisu3d.fastadd(pIIDInf);

		CATViewpoint *pVP=(CATViewpoint*)&(_p3DViewer->GetMain3DViewpoint());
		rc = pVisManager->AttachTo(pRootObjectPath, pVP, ListIVisu3d);

		CAT3DViewpoint *p3DVP=&(_p3DViewer->GetMain3DViewpoint());
		p3DVP->SetProjectionType(CYLINDRIC);	//conic表示parallel视角，cylindric表示透视视角

		//CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();
		//if (pEditor!=NULL)
		//{
		//	CATPSO *pPSO = pEditor->GetPSO();
		//	CATHSO *pHSO = pEditor->GetHSO();
		//	pVisManager->AttachPSOTo( pPSO,pVP);
		//	pVisManager->AttachHSOTo( pHSO,pVP);
		//}
		////CATPSO *pPSO = new CATPSO();
		////CATHSO *pHSO = new CATHSO();


		delete pIIDInf;
		pIIDInf = NULL ;
		ListIVisu3d.empty();
		pRootObjectPath->Release();
		pRootObjectPath = NULL;
		if(NULL_var != spSpecObjectOnMechanicalPart)
		{
			/*
			CATI3DGeoVisu * pGeoVisu=NULL;
			rc = spSpecObjectOnMechanicalPart->QueryInterface(IID_CATI3DGeoVisu,(void**) &pGeoVisu);
			if ( SUCCEEDED(rc) && NULL != pGeoVisu)
			{
				CATRep * pRep = pGeoVisu->GiveRep();
				if (NULL != pRep)
				{
					if (NULL!= _pTheModelToDisplay)
					{        
						_p3DViewer->RemoveRep((CAT3DRep*)_pTheModelToDisplay);
						_pTheModelToDisplay->Empty();
					}
					else
					{
						_pTheModelToDisplay = new CAT3DBagRep();																
					}

					CAT3DRep *p3DRep = (CAT3DRep*)pRep;
					_pTheModelToDisplay->AddChild(*p3DRep);
					if (NULL != _p3DViewer)
					{    
						_p3DViewer->AddRep((CAT3DRep*)_pTheModelToDisplay);
						_p3DViewer->Draw();
						_p3DViewer->Reframe();
					}
				}
				pGeoVisu->Release();
				pGeoVisu=NULL;
			}
			*/

			// The returned path 
			CATRepPath RepPath  ;
			CATPathElement pRootObjectPath2 ;
			pRootObjectPath2.AddChildElement(spSpecObjectOnMechanicalPart);
			pVisManager->GenerateRepPathFromPathElement(pRootObjectPath2,pVP,RepPath);

			if ( RepPath.Size() >= 1 )
			{    
				CAT3DRep * pRep =NULL;
				pRep = (CAT3DRep*) RepPath[RepPath.Size()-1];
				if ( NULL != pRep )
				{
					_pTheModelToDisplay->AddChild(*pRep);

					if (NULL != _p3DViewer)
					{    
						_p3DViewer->AddRep((CAT3DRep*)_pTheModelToDisplay);
						_p3DViewer->Draw();
						_p3DViewer->Reframe();
					}
				}
			}
		}
		rc = pVisManager->DetachFrom(pVP,1) ;

	}
}

HRESULT TJMDlgInterWindow::InitSession (char *& ipSessionName) 
{
	// The aim of this method is 
	// 1- open a CATIA V5 session 
	// 2- initialize a new Part document as a repository for all geometry created within the sample 
	// 3- retreive shape design factory 

	// Return Code Management 
	HRESULT rc = S_OK;

	// Create Session: 
	Create_Session(ipSessionName,_pSession);
	return (rc); 


}

HRESULT TJMDlgInterWindow::Close(char *& ipSessionName)
{

	// The aim of this method is to close the session 

	// Remove the document from the session
	HRESULT rc = S_OK;

	rc = CATDocumentServices::Remove ( * _pDoc);
	if (SUCCEEDED(rc)) { 
		cout << "Document removed OK" << endl << flush;
	}
	else    {
		cout << "ERROR in removing document" << endl << flush;
		return E_FAIL;
	}

	// Delete session
	rc = Delete_Session(ipSessionName);
	if (SUCCEEDED(rc)) {
		cout << "Session deleted OK" << endl << flush;
	}
	else     {
		cout << "ERROR in deleting session" << endl << flush;
		return E_FAIL;
	}
	return S_OK;

}

void TJMDlgInterWindow::Attach()
{
	CATVisManager *vm  = CATVisManager::GetVisManager();

	//CAAVisManagerDocument * pDocument = _pEditor->GetDocument();

	//CATHSO *pHSO = new CATHSO();
	//CATPSO *pPSO = new CATPSO();
	TJMVisManagerCmdSelector * pSelector = new TJMVisManagerCmdSelector(*_pHSO,*_pPSO);

	CATPathElement *pRootObjectPath=NULL;
	if ( (NULL != _pDoc) && NULL_var != _spBURootObj )
	{
		//CATBaseUnknown * pRootObject = _pDoc->GetRootContainer();
		pRootObjectPath = new CATPathElement(_spBURootObj);
	}

	if ( (NULL != _p3DViewer) && ( NULL!= pRootObjectPath) )
	{
		// we visualize the Model within the main 3D
		// viewpoint of the window
		// ---------------------------------------------------

		//CAT3DViewpoint * pMain3DViewpoint = &(_p3DViewer->GetMain3DViewpoint());
		CATViewpoint * pMain3DViewpoint =(CATViewpoint*) &(_p3DViewer->GetMain3DViewpoint());

		list<IID> liste_iid_3D;
		liste_iid_3D += new IID ( IID_CATI3DGeoVisu);
		vm->AttachTo (pRootObjectPath, pMain3DViewpoint,
			liste_iid_3D,pSelector);
		vm->AttachHSOTo(_pHSO,pMain3DViewpoint);
		vm->AttachPSOTo(_pPSO,pMain3DViewpoint);
		delete liste_iid_3D[0];

		// we visualize the Model within the main 2D
		// viewpoint of the window
		// ---------------------------------------------------
/*
		CAT2DViewpoint * pMain2DViewpoint = &(_pViewer->GetMain2DViewpoint());

		if ( NULL != pMain2DViewpoint )
		{
			list<IID> liste_iid_2D;
			liste_iid_2D += new IID ( IID_CAAIVis2DGraphVisu);
			vm->AttachTo (pRootObjectPath, pMain2DViewpoint,
				liste_iid_2D,pSelector);
			vm->AttachHSOTo(_pEditor->GetHSO(),pMain2DViewpoint);
			vm->AttachPSOTo(_pEditor->GetPSO(),pMain2DViewpoint);
			delete liste_iid_2D[0];

			// we set the 2Dviewpoint correctly so that 2D boxes do not
			// spread too much above the 3D viewpoint.
			pMain2DViewpoint->SetZoom(0.5f);
			CATMathPoint2Df Eye2D(150.f,90.f);
			pMain2DViewpoint->SetOrigin( Eye2D);
		}
*/
	}
}

void TJMDlgInterWindow::Detach()
{
	CATVisManager * pVisuManager = CATVisManager::GetVisManager();

	CATPathElement *pRootObjectPath=NULL;
	if ( (NULL != _pDoc) && (NULL_var != _spBURootObj) )
	{
		//CATBaseUnknown * pRootObject = _pDoc->GetRootContainer();
		pRootObjectPath = new CATPathElement(_spBURootObj);
	}
	
	if ( (NULL != _p3DViewer) && (NULL != pRootObjectPath) )
	{
		// 3D
		// --

		//CAT3DViewpoint * pMain3DViewpoint = &(_p3DViewer->GetMain3DViewpoint());
		CATViewpoint * pMain3DViewpoint =(CATViewpoint*) &(_p3DViewer->GetMain3DViewpoint());

		pVisuManager->DetachPSOFrom(pMain3DViewpoint);
		pVisuManager->DetachHSOFrom(pMain3DViewpoint);

		pVisuManager->DetachFrom(pRootObjectPath, pMain3DViewpoint);

/*		// 2D
		// --

		CAT2DViewpoint * pMain2DViewpoint = &(_pViewer->GetMain2DViewpoint());

		pVisuManager->DetachPSOFrom(pMain2DViewpoint);
		pVisuManager->DetachHSOFrom(pMain2DViewpoint);

		pVisuManager->DetachFrom(_pRootObjectPath, pMain2DViewpoint);
*/
	}

}

HRESULT TJMDlgInterWindow::CreateNavigBox()
{
	HRESULT hr = E_FAIL;

	//获取高亮接口
	CATFrmEditor * iFrmEditor=NULL;
	//iFrmEditor=CATFrmEditor::GetCurrentEditor();
	//if(NULL == iFrmEditor)
	//{
	//	return E_FAIL;
	//}
	//CATHSO *pHSO = iFrmEditor->GetHSO();
	//if (NULL == pHSO)
	//{
	//	return E_FAIL;
	//}

	CATViewer *iViewer = NULL;
	CAT2DViewpoint *iViewPoint = NULL; 
	CATString iName = "NavBox"; 
	CATGraphStyle iStyle = Indented; 
	CATClassId id = "ObjNavDefault";
	int width = 300;
	int height = 200; 
	int ivisibility = 1;
	int idepth = 1; 
	int mode = 0 ;

	CATNavigBox *pNavigBox=NULL;
	pNavigBox =new CATNavigBox(this, iName, iFrmEditor, iStyle, id, width, height, _p3DViewer, iViewPoint );
	if (NULL == pNavigBox)
	{
		return E_FAIL;
	}

	pNavigBox->AddRoot(_spBURootObj);

	//获取CATNavigController
	CATNavigController *pNavigController = NULL;
	pNavigController=pNavigBox->GetController();	
	if  (NULL == pNavigController)
	{
		return E_FAIL;
	}

	//设定结构树相关参数
	pNavigController->SetActivatorsVisibility(1);
	pNavigController->SetDepth(1);
	pNavigController->SetDereferenceMode(0);

	pNavigController->AttachToHSO(_pHSO);

	ExpandCollapseNode(pNavigController,_spBURootObj);

	_p3DViewer->Draw();

	return S_OK;
}

void TJMDlgInterWindow::ExpandAllNode(CATNavigController *pNavigController,CATBaseUnknown_var iRootObject,CATBaseUnknown_var iExpendObject)
{

	if ( (NULL_var != iRootObject) && (NULL != pNavigController) )
	{	
		CATListValCATBaseUnknown_var * pNodeList = NULL ;
		pNodeList = pNavigController->GetAssociatedElements(iRootObject);

		if ( NULL != pNodeList )
		{
			int nbNodes = pNodeList->Size();
			for ( int i= 1 ; i <= nbNodes ; i++ )
			{
				CATIGraphNode_var graphNode = (*pNodeList)[i];
				if ( NULL_var != graphNode )
				{
					// To be expanded
					if ( 0 == graphNode->IsExpanded() )
					{
						CATINavigElement_var spNavigElement = graphNode ;

						if ( NULL_var != spNavigElement )
						{
							spNavigElement->ProcessAfterExpand();//ProcessAfterSelect
							spNavigElement->Update( ); 
						}
					}
				}
			}

			delete pNodeList ;
			pNodeList = NULL ;
		}

		// Processes the children
		CATINavigateObject_var spNavigateObject = iRootObject ;
		if ( NULL_var != spNavigateObject )
		{
			CATListValCATBaseUnknown_var* pListChild = NULL ;
			pListChild = spNavigateObject->GetChildren();

			if ( NULL != pListChild )
			{
				for ( int t = 1 ; t <= pListChild->Size() ; t++)
				{
					CATBaseUnknown_var spOnChild = (*pListChild)[t];
					if (iExpendObject)
					{
						if (spOnChild->IsEqual(iExpendObject))
						{
							ExpandAllNode(pNavigController,spOnChild,iExpendObject);
						}
						else
						{
							ExpandAllNode(pNavigController,spOnChild,iExpendObject);
						}

					}
					else
					{
						ExpandAllNode(pNavigController,spOnChild,NULL_var);
					}
				}

				delete pListChild ;
				pListChild = NULL ;
			}
		}

	}
}
void TJMDlgInterWindow::ExpandCollapseNode(CATNavigController *pNavigController,CATBaseUnknown_var iObject)
{
	cout << "TJMCreateViewWindowDlg::ExpandCollapseNode" << endl ;

	if ( (NULL_var != iObject) && (NULL != pNavigController) )
	{
		CATListValCATBaseUnknown_var * pNodeList = NULL ;
		pNodeList = pNavigController->GetAssociatedElements(iObject);

		if ( NULL != pNodeList )
		{
			int nbNodes = pNodeList->Size();
			for ( int i= 1 ; i <= nbNodes ; i++ )
			{
				CATIGraphNode_var spNode = (*pNodeList)[i];

				if ( NULL_var != spNode )
				{
					CATINavigElement_var spNavigElement = spNode ;

					if ( NULL_var != spNavigElement )
					{
						spNavigElement->ProcessAfterExpand();  //ProcessAfterExpand  
						spNavigElement->Update(); 
					}
				}
			}

			delete pNodeList ;
			pNodeList = NULL ;
		}
	}
}