// COPYRIGHT Dassault Systemes 2020
//===================================================================
//
// TJMWheelHouseDraftGeneralClass.h
// Header definition of TJMWheelHouseDraftGeneralClass
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  May 2020  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#ifndef TJMWheelHouseDraftGeneralClass_H
#define TJMWheelHouseDraftGeneralClass_H

#include "CATBaseUnknown.h"
#include "TJMWheelHouseDraftGeneralM.h"

#include <windows.h>
#include <WinBase.h>
//-----------------------------------------------------------------------
// System
#include "CATUnicodeString.h"
#include "CATIUnknownList.h"
#include "CATVariant.h"
#include "CATAutoConversions.h"
#include "CATListOfCATUnicodeString.h"
#include "CATSettingRepository.h"
#include "CATGetEnvValue.h"
//ApplicationFrame
#include "CATApplicationFrame.h"
#include "CATFrmEditor.h"
//DI0PANV2 
#include "CATDlgNotify.h"
//DraftingInterfaces 
#include "CATIDftSheet.h"
#include "CATIDftDocumentServices.h"
#include "CATIDftDrawing.h"
#include "CATIDrawing.h"
#include "CATISheet.h"
#include "CATIView.h"
#include "CATIDftView.h"
#include "CATIDftText.h"
#include "CATIDrwFactory.h"
#include "CATIDrwAnnotationFactory.h"
#include "CATIDrwTextProperties.h"
#include "CATIADrawingComponent.h"
#include "CATIDftFormat.h"
#include "CATIDftDrawingFormats.h"
#include "CATIDftSheetFormat.h"
#include "CATIADrawingTextProperties.h"
//SketcherInterfaces 
#include "CATI2DDetail.h"
#include "CATI2DWFFactory.h"
#include "CATIMove2D.h"
#include "CATI2DGeometricOperators.h"
//Mathematics 
#include "CATMathTransformation2D.h"
#include "CATMathLine2D.h"
#include "CATMathPoint2D.h"
//ObjectModelerBase 
#include "CATIDocId.h"
#include "CATIDocRoots.h"
#include "CATDocument.h"
#include "CATIAlias.h"
#include "CATDocumentServices.h"
#include "CATFormat.h"
#include "CATICutAndPastable.h"
#include "CATSession.h"
#include "CATIEditor.h"
#include "CATSessionServices.h"
//ProductStructure 
#include "CATIProduct.h"
#include "CATIPrdObjectPublisher.h"
// KnowledgeInterfaces 
#include "CATIParmPublisher.h"
#include "CATICkeParm.h"
//ObjectSpecsModeler 
#include "CATISpecAttrAccess.h"
#include "CATISpecAttribute.h"
#include "CATISpecAttrKey.h"
#include "CATTime.h"
#include "CATTimeSpan.h"
#include "CATLib.h"
#include "CATIDescendants.h"
#include "iostream.h"
#include <cmath>
#include <string>
#include <windows.h>
#include <fstream>
#include <vector>
#include "afx.h"
#include "winsock.h"
#include "CATLISTV_CATISpecObject.h"
//System
#include "CATInstantiateComponent.h"
#include "CATIUnknownListImpl.h"
//ObjectSpecsModeler 
#include "CATISpecObject.h"
#include "CATLISTV_CATISpecObject.h"
#include "CATLISTV_CATISpecAttrKey.h"

//InteractiveInterfaces 
#include "CATIBuildPath.h"
#include "CATIIniInteractiveSession.h"

//KnowledgeInterfaces 
#include "CATICkeFunctionFactory.h"
#include "CATCkeGlobalFunctions.h"
#include "CATICkeParameterSet.h"
#include "CATIInstance.h"
#include "CATIParmManipulator.h"

//Visualization 
#include "CATHSO.h"
#include "CATISO.h"
#include "CATIVisProperties.h"
#include "CATI2DGeoVisu.h"
#include "CATModelForRep3D.h"
#include "CATI3DGeoVisu.h"
#include "CATViewer.h"
#include "CAT3DViewer.h"

#include "CAT2DRep.h"
#include "CAT2DBoundingBox.h"
//VisualizationBase
#include "CATAnchorPoint.h"
#include "CAT3DCustomRep.h"
#include "CAT3DAnnotationTextGP.h"
#include "CATGraphicAttributeSet.h"
#include "CATSurfacicRep.h"
//GSMInterfaces
#include "CATIGSMProceduralView.h"
#include "CATIGSMFactory.h"
#include "CATIGSMAssemble.h"
//MecModInterfaces
#include "CATIPrtContainer.h"
#include "CATIMfBRep.h"
#include "CATIGeometricalElement.h"
#include "CATIBodyRequest.h"
#include "CATIIsolate.h"
#include "CATIGSMTool.h"
#include "CATIFeaturize.h"
#include "CATIMechanicalRootFactory.h"
#include "CATIAPart.h"
//ObjectModelerBase 
#include "CATInit.h"
//NewTopologicalObjects 
#include "CATBody.h"
#include "CATCell.h"
#include "CATFace.h"
#include "CATSurface.h"
#include "CATVolume.h"
#include "CATPositionPtVolOperator.h"
#include "CATLoop.h"
//ProductStructure 
#include "CATIMovable.h"

//GeometricObjects 
#include "CATCurve.h"
#include "CATPoint.h"
#include "CATCrvParam.h"
#include "CATSurParam.h"
#include "CATCircle.h"
#include "CATLine.h"
#include "CATEdgeCurve.h"
#include "CATEdge.h"
#include "CATMathBox2D.h"
#include "CATIMf3DAxisSystem.h"
//DraftingInterfaces
#include "CATIGenerSpec.h"
#include "CATIDftElementWithLeader.h"
#include "CATIDftTextProperties.h"
#include "CATIDftGenView.h"
#include "CATIDftGenGeomAccess.h"
#include "CATIDftGenGeom.h"
#include "CATIDrwGenDrawShape.h"
#include "CATDimDefinition.h"
#include "CATIADrawingView.h"
#include "CATIADrawingPictures.h"
#include "CATIADrawingPicture.h"
#include "CATIDrwDressUp.h"
#include "CATIDrwText.h"
#include "CATIDftTextRange.h"
#include "CATIDrwDimValue.h"
#include "CATIDrwDimValueComponent.h"
#include "CATIDrwDimDimensionLine.h"
#include "CATIADrawingTables.h"
#include "CATIADrawingTable.h"
#include "CATIAGenerativeViewBehavior.h"
#include "CATIAGenerativeViewLinks.h"
#include "CATLISTV_CATMathPoint.h"
#include "CATIModelEvents.h"
#include "CATModifyVisProperties.h"
//SketerInterface
#include "IDMCurve2D.h"
#include "CATI2DCurve.h"
//MechanicalModeler 
#include "CATMmrLinearBodyServices.h"
#include "CATIPartRequest.h"
#include "CATMfBRepDecode.h"
//SpaceAnalysisInterfaces 
#include "CATIMeasurableInContext.h"
#include "CATIMeasurable.h"
//MeasureGeometryInterfaces 
#include "CATIMeasurableCircle.h"
#include "CATIMeasurableLine.h"
#include "CATIMeasurablePoint.h"
//ApplicationFrame
#include "CATAfrCommandHeaderServices.h"

#include "CreateDistanceMinTopo.h"
#include "CATGeoFactory.h"
#include "CATSoftwareConfiguration.h"
#include "CATTopData.h"
#include "CATTopPointOperator.h"
#include "CATIContainerOfDocument.h"
#include "CATIContainer.h"

#include "CATPlane.h"
#include "CATSurface.h"
#include "CATSurLimits.h"
#include "CATHybIntersect.h"
#include "CATTopSkin.h"
#include "CATVertex.h"
#include "CATSurLimits.h"

#include "ListPOfCATBody.h"
#include "CATTransfoManager.h"
#include "CATHybAssemble.h"
#include "CATCreateTopAssemble.h"
#include "CATCreateTopProject.h"
#include "CATHybProject.h"

#include "CATDynMassProperties3D.h"
#include "CATMathDef.h"
#include "CATWire.h"

//MechanicalModelerUI
#include "CATFeatureImportAgent.h"

#include <map>
#include "float.h"

#include "CATExtIDlgTableViewModel.h"
#include "CATListPtrCATIProduct.h"
#include "CATPathElementAgent.h"
#include "CATIPrtPart.h"
#include "CATIBRepAccess.h"

#include "CATTopWire.h"
#include "CATCrvLimits.h"
#include "CATTopWire.h"
#include "CATTopWire.h"

#include "CATIMfMonoDimResult.h"
#include "CATIDftRough.h"

#include "CATMmrInterPartCopy.h"
#include "CATIDatumFactory.h"

#include "CATIDrwSubString.h"
#include "CATTopVertex.h"
#include "CATCartesianPoint.h"
#include "CATTopLineOperator.h"
/***********************************************/

#include "CATMfErrUpdate.h"
#include "CATIContainerOfDocument.h"
#include "CATIPrtPart.h"
#include "CATIBRepAccess.h"

//ObjectModelerBase 
#include "CATIContainer.h"
//NewTopologicalObjects 
#include "CATTopData.h"
#include "CATVertex.h"
#include "ListPOfCATBody.h"
#include "CATWire.h"

//ProductStructure 
#include "CATListPtrCATIProduct.h"
#include "CATIPrdProperties.h"

//GeometricObjects 
#include "CATPlane.h"
#include "CATSurLimits.h"
#include "CATTransfoManager.h"

//DraftingInterfaces
#include "CATIADrawingComponents.h"
#include "CATIADrawingSheet.h"
//SketerInterface
#include "CATI2DWFGeometry.h"
#include "CATI2DDitto.h"
#include "CATI2DAxis.h"
#include "CATI3DCamera.h"
//Mathematics
#include "CATMathDef.h"
//BasicTopologicalOpe 
#include "CATTopPointOperator.h"

//MechanicalModelerUI 
#include "CATFeatureImportAgent.h"

//DialogEngine
#include "CATOtherDocumentAgent.h"
#include "CATPathElementAgent.h"

//TopologicalOperators
#include "CATTopBodyExtremum.h"
#include "CATDistanceMinBodyBody.h"
#include "CATHybIntersect.h"
#include "CATTopSkin.h"
#include "CATHybAssemble.h"
#include "CATCreateTopAssemble.h"
#include "CATCreateTopProject.h"
#include "CATHybProject.h"
#include "CATDynMassProperties3D.h"
#include "CATTopPrism.h"

//InfInterfaces
#include "CATIADocument.h"
#include "CATIASelection.h"

//ProductStructureInterfaces
#include "CATIAProduct.h"

//SpaceAnalysisInterfaces 
#include "CATIInertia.h"
#include "CATIASections.h"
#include "CATIASection.h"

//CATObjectModelerNavigator 
#include "CATIRedrawEvent.h"

//Tessellation
#include "CATCellTessellator.h"


//CATInteractiveInterfaces 
#include "CATIBuildPath.h"
#include "CATICkeRelationFactory.h"

//CATIAApplicationFrame
#include "CATFrmNavigGraphicWindow.h"
#include "CATCafCenterGraph.h"

//NavigatorInterfaces
#include "CATIAGroups.h"

#include "CATITPSDocument.h"
#include "CATITPSList.h"
#include "CATITPSComponent.h"
#include "CATITPSSet.h"
#include "CATITPSText.h"
#include "CATITPSNonSemanticDimension.h"

//COM
#include "CATIDrwSubString.h"
#include "CATTopVertex.h"
#include "CATCartesianPoint.h"
#include "CATTopLineOperator.h"

#include "string.h"
#include "fstream.h"
#include "sstream.h"
#include "iostream.h"
#include <cmath>
#include <string>
#include <windows.h>
#include <fstream>
#include <vector>
#include "afx.h"
//#include "winsock.h"
#include <comdef.h>
#include <tlhelp32.h>
#include <map>

using namespace std;

//-----------------------------------------------------------------------

//-----------------------------------------------------------------------
class ExportedByTJMWheelHouseDraftGeneralM TJMWheelHouseDraftGeneralClass: public CATBaseUnknown
{
	CATDeclareClass;

public:

	// Standard constructors and destructors
	// -------------------------------------
	TJMWheelHouseDraftGeneralClass ();
	virtual ~TJMWheelHouseDraftGeneralClass ();

	// Copy constructor and equal operator
	// -----------------------------------
	TJMWheelHouseDraftGeneralClass (TJMWheelHouseDraftGeneralClass &);
	TJMWheelHouseDraftGeneralClass& operator=(TJMWheelHouseDraftGeneralClass&);

	static CATUnicodeString StringBuildFromChar(char * strchar);
	static void StringConvertToChar(CATUnicodeString strUnicode,char* strchar );
	static void StringConvertToWChar(CATUnicodeString strUnicode, wchar_t* strwcANSI);
	static int GetResourcePath(CATUnicodeString istrFileName,CATUnicodeString istrFilePath,CATUnicodeString &oPath);
	static HRESULT GetRootProduct( CATIProduct_var &ospiRootProduct );
	static CATIProduct_var GetRootProductFromDoc( CATDocument * ipDocument );
	static void RefreshViewTree(const CATISpecObject_var spObject);
	static HRESULT SetParameter(CATISpecObject_var ispiSpecObj,CATUnicodeString istrParmName,double idblValue);
	static HRESULT SetParameter(CATISpecObject_var ispiSpecObj,CATUnicodeString istrParmName,CATUnicodeString istrValue);
	static HRESULT SetParameter(CATISpecObject_var ispiSpecObj,CATUnicodeString istrParmName,int iValue);
	static CATIPrtContainer_var GetPrtContainer( CATIProduct_var ispiObject );
	static CATBoolean UpdateObject(const CATISpecObject_var &spUpdatedObj);
	static HRESULT SetRealParameter(CATISpecObject_var ispiSpecObj,CATUnicodeString istrParmName,CATUnicodeString istrValue);
	static void MessageOutputWarning( CATUnicodeString iString,CATUnicodeString iTopString );
	static void MessageOutputError( CATUnicodeString iString,CATUnicodeString iTopString );
	static void MessageOutputInfo( CATUnicodeString iString,CATUnicodeString iTopString );
	static bool DirExists(const std::string& dirName_in);
	static HRESULT AddStartUsedHistory(CATUnicodeString istrFuncString,CATUnicodeString &ostrUserInfo,CATTime &oStartTime,CATUnicodeString &ostrErrorPath);
	static CATBoolean WriteErrorLog(CATUnicodeString strErrorPath,CATUnicodeString strErrorMsg);
	static HRESULT CreateNewGeoSet(CATIProduct_var ispiProd,CATUnicodeString istrName,CATISpecObject_var &ospiSpecGeoSet);
	static HRESULT InsertObjOnTree(CATIProduct_var ispProd,CATISpecObject_var ispiSpecGeoSet,CATUnicodeString istrObjName,CATBody *ipBody, CATISpecObject_var &ospiSpecObj);
	static CATMathTransformation GetAbsTransformation(CATIProduct_var ispCurrentProduct);
	static CATGeoFactory* GetProductGeoFactoryAndPrtCont(CATIProduct_var ispProduct,CATIPrtContainer_var &ospiCont);
	static void GetPrtContFromPrd(CATIProduct_var ispiPrd, CATIPrtContainer_var & ospiCont);
	static HRESULT GetReferencePrdDocument(CATIProduct_var ispiInstanceProduct,CATDocument *&opDocument);
	static HRESULT GetContOfPartDocument(CATDocument *ipDocument,CATIPrtContainer_var &opiCont);
	static CATGeoFactory*GetCATGeoFactory(CATDocument * ipDoc);
	static CATBoolean CreatePlaneBody( CATGeoFactory_var spGeoFactory,CATTopData * topdata, CATMathPlane iMathPlane,CATBody_var &ospPlaneBody );
	static void TransferSelectToBU(CATFeatureImportAgent *pFeatAgent,CATBaseUnknown *&opBUSelection, CATIProduct_var &ospProductSeletion);
	static void TransferSelectToBU(CATPathElementAgent *pPathElemAgent,CATBaseUnknown *&opBUSelection, CATIProduct_var &ospProductSeletion);
	static void SetHighlight(CATBaseUnknown *ipBUSelect, CATFrmEditor *ipEditor, CATHSO *ipHSO);
	static void SetHighlight(CATBaseUnknown *pBUSelect);
	static void SetHighlight(CATPathElementAgent *ipPathElemAgt, CATHSO *ipHSO);
	static void SetGroupHighlight(CATBaseUnknown *ipBUSelect, CATFrmEditor *ipEditor, CATHSO *ipHSO);
	static CATUnicodeString GetNameFromBaseUnknownFunc(CATBaseUnknown_var ispiBaseUnknown);
	static void PathElementString(CATFeatureImportAgent *ipFeatImpAgt,CATUnicodeString &strPathName);
	static void PathElementString(CATPathElement *ipPathElem, CATUnicodeString &ostrPath);
	static CATPathElement* GetDirectPath(CATBaseUnknown_var ispBaseObject ,CATBaseUnknown_var ispRootProduct);
	static void SetActivePath(CATIProduct_var ispInstanceProduct,CATIProduct_var ispiRootProduct);
	static void SetActivePathHighlight(CATBaseUnknown *ipBUSelect,CATIProduct_var ispiProdInst,CATIProduct_var ispiProdRoot,CATFrmEditor *ipEditor, CATHSO *ipHSO);
	static CATBody_var GetBodyFromFeature( CATBaseUnknown_var ispFeature );
	static HRESULT GetMathPoint(CATBody_var ispPointBody,CATMathPoint& oMathPoint);
	static void GetMathPtFromBody(CATBody*ipBody,CATLISTV(CATMathPoint) &oMathPtList);
	static CATMathTransformation GetMatrixTransformation( CATISpecObject_var spSpecOne, CATISpecObject_var spSpecTwo );
	static CATBoolean CreateDirectory(CATUnicodeString istrPath);
	static CATBoolean GetAll3DChildFromRep(CATRep *iRep,list<CATRep> **ioAllChildren);
	static void GetAllSurfacicFromRep(list<CATRep> *iRepList,list<CATSurfacicRep> **ioSurfacicList);
	static HRESULT CheckIfShow(CATRep *iRep);
	static HRESULT GetPointListFromSurfacicRep(const list<CATSurfacicRep> *ipSurlist,const CATMathTransformation iabsTransformation,vector<CATMathPoint> &oPointList);
	static CATMathBox Get3DBoundingBox(CATISpecObject_var ispSpecObject);
	static HRESULT BoundaryBoxFromUnit3D(double* iMinPt, double* iMaxPt, double *iBoxMinPt, double* iBoxMaxPt);
	static void RemoveLastZeroesFromString( CATUnicodeString &ioString );
	static CATBoolean IsProduct( CATIProduct_var ispiPrd );
	static CATBoolean CheckShowState(CATISpecObject_var spSpec);
	static HRESULT CenterGraphObject(CATISpecObject_var ispiSpecObject,int iMode,bool IfCenterTreeOnly,float ifRadius);
	static void ThrowLastErrorMessage(HRESULT RC);
	static void TransferSelectToSpecObjOnTree(CATPathElementAgent *pPathElemAgent,CATISpecObject_var &ospiSpecSelection, CATIProduct_var &ospProductSeletion);
	static CATCurve_var GetCurveFromCell(CATCell_var ispCellCurve);
	static CATBody* CreateTopProject(CATGeoFactory* ipGeoFactory, CATTopData* itopdata,CATBody* iBody1,CATBody* iBody2);
	static CATBoolean GetPathElement( CATBaseUnknown_var ispSpecSelect,CATPathElement* &pPathElementLine);
	static void ShowOrHideElement(CATISpecObject_var ispiElement, CATShowAttribut iEnumShowAttribute, CATVisPropertyType iEnumVisPropertyType, CATVisGeomType iEnumVisGeomType);
	static CATBoolean SetActivePathFunc( CATBaseUnknown_var ispSpecSelect);
	static HRESULT GetTransformationBody(CATBody_var ispBody,CATIProduct_var ispOrginProduct,CATIProduct_var ispTargetProduct,CATBody_var& ospResultBody);
	static HRESULT GetCATIASectionResult(CATIProduct_var ispProd,double iarrPos[],double idWidth,double idHeight,CATListValCATISpecObject_var &olstResult,CATDocument *&opDoc);
	static CATBody* CreateTopIntersect( CATGeoFactory* ipGeoFactory, CATTopData* itopdata,CATBody*iBody1,CATBody*iBody2 );
	static CATBody* CreateBodyFromCell(CATGeoFactory *ipGeoFactory, CATCell_var ispCell, int iDimension);
	static CATBoolean IsPointOnLine(CATMathPoint iPt,CATMathPoint iLinePt1,CATMathPoint iLinePt2);
	static CATIProduct_var CreateNewPart();
	static HRESULT CreateCircle( CATGeoFactory_var spGeoFactory,CATTopData * topdata,CATMathPlane iMathPlane,double Radius,CATBody_var &ospBody );
	static CATBoolean Coord3DTransformTo2D(CATMathPlane PrjPlane,CATMathPoint i3DPositin,double* op2DPt);
	static CATBoolean Coord3DTransformTo2D(CATIView_var spiView, CATMathPoint i3DPositin, double* op2DPt);
	static CATBoolean Coord2DTransformTo3D(CATMathPlane PrjPlane,double* i2Dpt,CATMathPoint &o3Dpt);
	static HRESULT RemoveSections(CATIProduct_var ispProd,int iCount);
	static HRESULT GetCkeParmFromFatherObject(CATISpecObject_var ispiFatherObj, CATUnicodeString istrParamName, CATICkeParm_var &ospCkeParam );
	static HRESULT GetParmPublisherByName(CATBaseUnknown_var ispiParamRoot,CATUnicodeString istrName, CATBaseUnknown_var &ospParmPublisher);
	static CATBoolean SplitString(CATUnicodeString iStrString, CATUnicodeString iStrSplit, CATListOfCATUnicodeString &oStrList);
	static CATBoolean CheckPathIsOpenedFunc(CATUnicodeString istrPath,CATDocument*& opDoc);
	static CATIView_var CreateFrontView(CATIDftSheet *ipiDftSheet, vector<CATISpecObject_var> ilstSpecObj, CATMathPlane imathPlaneProject, double iAxisX, double iAxisY, double iScale);
	static CATIView_var GetViewFromName(CATIDftSheet* ipDftSheet,CATUnicodeString istrName);
	static CATIDftSheet* GetSheetFromName(CATDocument * pDftDoc, CATUnicodeString istrSheetName);
	static HRESULT HideViewAxisObject(CATIView_var ispiView,CATBoolean bShown);
	static void HideSpecObject(CATISpecObject_var spSpec,CATBoolean bShown);
	static CATBoolean Create2DDrwDimension(CATIDrwAnnotationFactory_var spAnnFact, CATISpecObject_var spSpecOn2DElem1, CATISpecObject_var spSpecOn2DElem2, CATDrwDimType dimType, CATDrwDimRepresentation dimRep, CATMathPoint2D iMathAnchorPt1, CATMathPoint2D iMathAnchorPt2, CATIDrwDimDimension_var &spiDim);
	static HRESULT DeleteViewMakeUp(CATIView_var ispiView);
	static CATBoolean Create2DDrwPoint(CATI2DWFFactory_var sp2DWFFact, CATMathPoint2D iMathPt, CATISpecObject_var &spSpecOnPoint2D);
	static CATBoolean Create2DDrwLine(CATI2DWFFactory_var sp2DWFFact, CATMathPoint2D iMathStartPt, CATMathPoint2D iMathEndPt, CATISpecObject_var &spSpecOnLine2D);
	static CATBoolean Check2DObjectExist(CATIView_var ispView,CATUnicodeString istrName,int iMode,CATISpecObject_var &ospiDim);
	static CATBoolean GetBackgroundViewOfSheet(CATIDftSheet* ipDftSheet,CATIView_var &ospView);
	static CATBoolean SetTableCellString(CATIADrawingTable * pTable, int iRowNum, int iColNum, double idbFontSize, int iRed, int iGreen, int iBlue, boolean iBold , double idbCharSpacing, int iPos, CATUnicodeString istrName);
	static double SetRound(double data,int nPoint);
	static HRESULT GetValueFromPara(CATICkeParm_var ispPara,CATListOfCATUnicodeString& oListParaValue);

};

#endif
