// COPYRIGHT Dassault Systemes 2020
//===================================================================
//
// TJMWheelHouseDraftGeneralClass.cpp
// Header definition of TJMWheelHouseDraftGeneralClass
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  May 2020  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TJMWheelHouseDraftGeneralClass.h"

CATImplementClass( TJMWheelHouseDraftGeneralClass,
				  Implementation, 
				  CATBaseUnknown,
				  CATNull );
//-----------------------------------------------------------------------------
// MYGeneral : constructor
//-----------------------------------------------------------------------------
TJMWheelHouseDraftGeneralClass::TJMWheelHouseDraftGeneralClass():
CATBaseUnknown()
{

}


//-----------------------------------------------------------------------------
// MYGeneral : destructor
//-----------------------------------------------------------------------------
TJMWheelHouseDraftGeneralClass::~TJMWheelHouseDraftGeneralClass()
{

}

//-----------------------------------------------------------------------------
// MYGeneral : copy constructor
//-----------------------------------------------------------------------------
TJMWheelHouseDraftGeneralClass::TJMWheelHouseDraftGeneralClass(TJMWheelHouseDraftGeneralClass& original):
CATBaseUnknown(original)
{
}

//-----------------------------------------------------------------------------
// MYGeneral : equal operator
//-----------------------------------------------------------------------------
TJMWheelHouseDraftGeneralClass& TJMWheelHouseDraftGeneralClass::operator=(TJMWheelHouseDraftGeneralClass& original)
{
	CATBaseUnknown::operator=(original);
	return *this;
}
 
//从char转到unicodestring,主要用于解决中文字符的乱码显示
CATUnicodeString TJMWheelHouseDraftGeneralClass::StringBuildFromChar(char * strchar)
{
	int len = MultiByteToWideChar(CP_ACP, 0, strchar, -1, NULL, 0); 
	wchar_t* strwcANSI = new wchar_t[len + 1]; 
	memset(strwcANSI, 0, len * 2 + 2); 
	MultiByteToWideChar(CP_ACP, 0, strchar, -1, strwcANSI, len); 
	CATUnicodeString strwcUnicode;
	strwcUnicode.BuildFromWChar(strwcANSI); 
	if(strwcANSI) delete [] strwcANSI;
	return strwcUnicode;
}
//从unicodestring转到char*,主要用于解决中文字符的乱码显示
void TJMWheelHouseDraftGeneralClass::StringConvertToChar(CATUnicodeString strUnicode,char* strchar )
{
	int len = WideCharToMultiByte(CP_ACP, 0, strUnicode, -1, NULL, 0, NULL, NULL); 
	memset(strchar, 0, len + 1); 
	WideCharToMultiByte(CP_ACP, 0, strUnicode, -1, strchar, len, NULL, NULL); 
}
//从unicodestring转到wchar_t*,主要用于解决中文字符的乱码显示
void TJMWheelHouseDraftGeneralClass::StringConvertToWChar(CATUnicodeString strUnicode, wchar_t* strwcANSI)
{
	const char *strchar =  strUnicode.ConvertToChar();
	int len = MultiByteToWideChar(CP_ACP, 0, strchar, -1, NULL, 0); 
	memset(strwcANSI, 0, len * 2 + 2); 
	MultiByteToWideChar(CP_ACP, 0, strchar, -1, strwcANSI, len); 
}

//描述：跳出提示框Warning
//输入：CATUnicodeString提示内容，CATUnicodeString提示类型
//输出：void
//返回：void
void TJMWheelHouseDraftGeneralClass::MessageOutputWarning( CATUnicodeString iString,CATUnicodeString iTopString )
{
	CATApplicationFrame *pApplication = CATApplicationFrame::GetFrame(); 
	if (NULL != pApplication) 
	{
		CATDlgWindow * pMainWindow = pApplication->GetMainWindow();
		CATDlgNotify *pNotifyDlg = new CATDlgNotify(pMainWindow, "............", CATDlgNfyWarning);
		if(NULL != pNotifyDlg) 
		{
			pNotifyDlg->DisplayBlocked(iString,iTopString);
			pNotifyDlg->RequestDelayedDestruction();
		}
	}
}
//描述：跳出提示框Error
//输入：CATUnicodeString提示内容，CATUnicodeString提示类型
//输出：void
//返回：void
void TJMWheelHouseDraftGeneralClass::MessageOutputError( CATUnicodeString iString,CATUnicodeString iTopString )
{
	CATApplicationFrame *pApplication = CATApplicationFrame::GetFrame(); 
	if (NULL != pApplication) 
	{
		CATDlgWindow * pMainWindow = pApplication->GetMainWindow();
		CATDlgNotify *pNotifyDlg = new CATDlgNotify(pMainWindow, "............", CATDlgNfyError);
		if(NULL != pNotifyDlg) 
		{
			pNotifyDlg->DisplayBlocked(iString,iTopString);
			pNotifyDlg->RequestDelayedDestruction();
		}
	}
}

//描述：跳出提示框Info
//输入：CATUnicodeString提示内容，CATUnicodeString提示类型
//输出：void
//返回：void
void TJMWheelHouseDraftGeneralClass::MessageOutputInfo( CATUnicodeString iString,CATUnicodeString iTopString )
{
	CATApplicationFrame *pApplication = CATApplicationFrame::GetFrame(); 
	if (NULL != pApplication) 
	{
		CATDlgWindow * pMainWindow = pApplication->GetMainWindow();
		CATDlgNotify *pNotifyDlg = new CATDlgNotify(pMainWindow, "............", CATDlgNfyInformation);
		if(NULL != pNotifyDlg) 
		{
			pNotifyDlg->DisplayBlocked(iString,iTopString);
			pNotifyDlg->RequestDelayedDestruction();
		}
	}
}
//描述：检查路径是否存在
//输入：string路径
//输出：bool
//返回：bool
bool TJMWheelHouseDraftGeneralClass::DirExists(const std::string& dirName_in)
{
	DWORD ftyp = GetFileAttributesA(dirName_in.c_str());
	if (ftyp == INVALID_FILE_ATTRIBUTES)
	{
		return false; 
	}

	if (ftyp & FILE_ATTRIBUTE_DIRECTORY)
	{
		return true;  
	}
	return false;
}

CATBoolean TJMWheelHouseDraftGeneralClass::CreateDirectory(CATUnicodeString istrPath)
{
	CATUnicodeString strPath = istrPath;
	int iSearch = strPath.SearchSubString("\\");
	CATUnicodeString strSubPath="";
	strSubPath.Append(strPath.SubString(0,iSearch+1));
	strPath.ReplaceSubString(0,iSearch+1,"");
	iSearch = strPath.SearchSubString("\\");

	while(-1 != iSearch)
	{
		strSubPath.Append(strPath.SubString(0,iSearch));
		if (CATLibError==CATCreateDirectory(strSubPath))
		{
			CATUnicodeString strErrMsg = "Create "+strPath + " Failed. Please check write rights.";
			MessageOutputError(strErrMsg,"Error");
			return FALSE;
		}
		strSubPath.Append("\\");
		strPath.ReplaceSubString(0,iSearch+1,"");
		iSearch = strPath.SearchSubString("\\");
	}
	if (CATLibError==CATCreateDirectory(istrPath))
	{
		CATUnicodeString strErrMsg = "Create "+istrPath + " Failed. Please check write rights.";
		MessageOutputError(strErrMsg,"Error");
		return FALSE;
	}
	return TRUE;
}

//描述：添加记录功能-获取初始记录
//输入：istrFuncString功能名称
//输出：ostrUserInfo用户使用记录,oStartTime程序启动时间
//返回：HRESULT
HRESULT TJMWheelHouseDraftGeneralClass::AddStartUsedHistory(CATUnicodeString istrFuncString,CATUnicodeString &ostrUserInfo,CATTime &oStartTime,CATUnicodeString &ostrErrorPath)
{
	HRESULT oResult = S_OK;
	ostrUserInfo = "";
	oStartTime = CATTime::GetCurrentLocalTime();
	CATUnicodeString strStartTime = oStartTime.ConvertToString("%Y/%m/%d,%H:%M:%S,%p,%A");
	CATUnicodeString strLoginName = "UnKnownLoginName";

	char strLoginNameChar[1000];
	if(CATGetLoginName(strLoginNameChar,1000) == CATLibError)
	{
		oResult = E_FAIL;
	}
	else
	{
		strLoginName = StringBuildFromChar(strLoginNameChar);
	}

	ostrUserInfo.Append(istrFuncString);
	ostrUserInfo.Append(",");
	ostrUserInfo.Append(strLoginName);
	ostrUserInfo.Append(",");
	ostrUserInfo.Append(strStartTime);
	ostrUserInfo.Append(",");

	CATUnicodeString strErrorDir = "C:\\cattmp\\log";
	//if(!DirExists(strErrorDir.ConvertToChar()))
	//{
	//	CreateDirectory(strErrorDir,NULL) ;
	//}
	if (!CreateDirectory(strErrorDir))
	{
		return E_FAIL;
	}
	ostrErrorPath.Append(strErrorDir);
	ostrErrorPath.Append("\\KBEErrorLog_"); 
	ostrErrorPath.Append(istrFuncString ); 
	ostrErrorPath.Append("_"); 
	ostrErrorPath.Append(oStartTime.ConvertToString("%Y%m%d")); 
	ostrErrorPath.Append(".txt"); 

	return oResult ;
}

//描述：写入错误信息
//输入：CATUnicodeString
//输出：void
//返回：CATBoolean
CATBoolean TJMWheelHouseDraftGeneralClass::WriteErrorLog(CATUnicodeString strErrorPath,CATUnicodeString strErrorMsg)
{
	ofstream errorfile(strErrorPath.ConvertToChar(),ios::app);
	char strchar[1000];
	StringConvertToChar(strErrorMsg,strchar);
	errorfile<<(CATTime::GetCurrentLocalTime()).ConvertToString("%Y/%m/%d,%H:%M:%S")<<":"<<strchar<<"\n";
	errorfile.close();
	return TRUE;
}

int TJMWheelHouseDraftGeneralClass::GetResourcePath(CATUnicodeString istrFileName,CATUnicodeString istrFilePath,CATUnicodeString &oPath)
{
	const char * cValue = "CQYFAS1KBEPath";
	char * strPath = NULL;
	CATLibStatus sStatus = CATGetEnvValue(cValue,&strPath);
	if ((sStatus ==CATLibError)||(strPath==NULL))
	{
		CATUnicodeString strWarnMessage = StringBuildFromChar("No Environment Parameter : CQYFAS1KBEPath");
		//CATUnicodeString strWarnTitle = "Notice";
		//CATDlgNotify* pNotifyDlg = new CATDlgNotify((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(), strWarnTitle.ConvertToChar(),CATDlgNfyWarning);
		//if (NULL != pNotifyDlg)
		//{
		//	pNotifyDlg->DisplayBlocked(strWarnMessage ,strWarnTitle);
		//	pNotifyDlg->RequestDelayedDestruction(); 
		//	pNotifyDlg = NULL;
		//}
		MessageOutputError(strWarnMessage,"Error");
		return -1;
	}

	//istrFilePath="resources\\GlawayResources\\ShipResources\\PipingSupport\\Configs";
	CATUnicodeString strUsPath(CATFindPath(CATUnicodeString(istrFilePath),strPath));
	if(strUsPath == "")
	{
		CATUnicodeString strWarnMessage = StringBuildFromChar("No Folder : ") + istrFilePath;
		//CATUnicodeString strWarnTitle = "Notice";
		//CATDlgNotify* pNotifyDlg = new CATDlgNotify((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(), strWarnTitle.ConvertToChar(),CATDlgNfyWarning);
		//if (NULL != pNotifyDlg)
		//{
		//	pNotifyDlg->DisplayBlocked(strWarnMessage ,strWarnTitle);
		//	pNotifyDlg->RequestDelayedDestruction(); 
		//	pNotifyDlg = NULL;
		//}
		MessageOutputError(strWarnMessage,"Error");
		return  -1;
	}

	strUsPath.Append("\\");
	strUsPath.Append(istrFileName);

	if((_access(strUsPath, 0))== -1 )
	{
		CATUnicodeString strWarnMessage = StringBuildFromChar("No File : ") + strUsPath;
		//strWarnMessage.Append("\\");
		//strWarnMessage.Append(istrFileName);
		//CATUnicodeString strWarnTitle = "Notice";
		//CATDlgNotify* pNotifyDlg = new CATDlgNotify((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(), strWarnTitle.ConvertToChar(),CATDlgNfyWarning);
		//if (NULL != pNotifyDlg)
		//{
		//	pNotifyDlg->DisplayBlocked(strWarnMessage ,strWarnTitle);
		//	pNotifyDlg->RequestDelayedDestruction(); 
		//	pNotifyDlg = NULL;
		//}
		MessageOutputError(strWarnMessage,"Error");
		return  -1;
	}

	oPath = strUsPath;

	return 1;
}

void TJMWheelHouseDraftGeneralClass::ThrowLastErrorMessage(HRESULT RC)
{
	CATUnicodeString ErrorMessageKey ("") ;
	CATError * pError = CATError::CATGetLastError(RC) ;
	if ( NULL != pError )
	{        
		ErrorMessageKey = pError->GetNLSMessage() ;  
		cout << "   Complete Error message key is : " <<  ErrorMessageKey.ConvertToChar() << endl ;
		int IdErr = pError->GetId() ;
		cout << "   Error ID : " << IdErr << endl  ;
		cout << endl;
		pError->Release() ;
		pError = NULL ;
	}

}

//描述：获取当前打开的根节点，包括Part和Product
//输入：
//输出：CATIProduct
//返回：HRESULT
HRESULT TJMWheelHouseDraftGeneralClass::GetRootProduct( CATIProduct_var &ospiRootProduct )
{
	//获取Document
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor == NULL)
	{
		return E_FAIL;
	}
	CATDocument *pDoc = pEditor->GetDocument();
	if (pDoc == NULL)
	{
		return E_FAIL;
	}

	//获取根元素集合的第一个，就是根product,最终要转到CATIProduct
	CATIDocRoots *piDocRootsOnDoc = NULL;
	HRESULT rc = pDoc->QueryInterface(IID_CATIDocRoots,(void**)&piDocRootsOnDoc);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATListValCATBaseUnknown_var *pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct = NULL_var;
	if (pRootProducts->Size())
	{
		spRootProduct = (*pRootProducts)[1];
		delete pRootProducts;
		pRootProducts = NULL;
	}

	piDocRootsOnDoc->Release();

	ospiRootProduct = spRootProduct;

	////CATIProduct *piProductOnRoot = NULL;
	//rc = spRootProduct->QueryInterface(IID_CATIProduct, (void**)&opiRootProduct);
	//if (FAILED(rc) || piDocRootsOnDoc == NULL)
	//{
	//	return E_FAIL;
	//}

	return S_OK;
}

//描述：从文档获取根产品
//输入：CATDocument文档指针
//输出：CATProduct_var根产品指针
//返回：CATIProduct_var
CATIProduct_var TJMWheelHouseDraftGeneralClass::GetRootProductFromDoc( CATDocument * ipDocument )
{
	HRESULT rc = E_FAIL;
	CATIProduct_var spRootProduct = NULL_var;
	if ( NULL != ipDocument)
	{
		//获取根元素集合的第一个，就是根product,最终要转到CATIProduct
		CATIDocRoots *piDocRootsOnDoc = NULL;
		HRESULT rc = ipDocument->QueryInterface(IID_CATIDocRoots,(void**)&piDocRootsOnDoc);
		if (FAILED(rc))
		{
			return NULL_var;
		}
		CATListValCATBaseUnknown_var *pRootProducts = piDocRootsOnDoc->GiveDocRoots();
		CATIProduct_var spRootProduct = NULL_var;
		if (pRootProducts->Size())
		{
			spRootProduct = (*pRootProducts)[1];
			delete pRootProducts;
			pRootProducts = NULL;
		}

		piDocRootsOnDoc->Release();

		return spRootProduct;
	}
	return NULL_var;
}

//刷新视图和模型树
void TJMWheelHouseDraftGeneralClass::RefreshViewTree(const CATISpecObject_var spObject)
{
	if(spObject==NULL_var)
		return;
	//Update the 3D view
	CATModify ModifyEvent(spObject);
	CATIModelEvents_var spEvents = spObject;
	if(spEvents!=NULL_var)
		spEvents -> Dispatch (ModifyEvent);

	//Update the graph view tree
	CATIRedrawEvent_var spRedraw = spObject;
	if(spRedraw!=NULL_var)
		spRedraw -> Redraw();
}

HRESULT TJMWheelHouseDraftGeneralClass::SetParameter(CATISpecObject_var ispiSpecObj,CATUnicodeString istrParmName,double idblValue)
{
	HRESULT rc=S_OK;
	//
	if (ispiSpecObj==NULL_var)
	{
		return E_FAIL;
	}
	//
	CATLISTV(CATISpecObject_var) oListParameters;
	CATIParmPublisher_var spiParmPub=ispiSpecObj;
	if(NULL_var != spiParmPub)
	{
		spiParmPub->GetAllChildren("CATICkeParm",oListParameters);
	}

	if (oListParameters.Size()>0)
	{
		CATICkeParm_var spResultParm;
		for (int i=1; i <= oListParameters.Size(); i++)
		{
			CATICkeParm_var spCkeParm = oListParameters[i];
			if (NULL_var !=spCkeParm)
			{
				CATUnicodeString strParmName=spCkeParm->Name();
				int iIndex =  strParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
				if (iIndex>=0)
				{
					strParmName = strParmName.SubString(iIndex+1,strParmName.GetLengthInChar()-iIndex-1);
				}
				if (strParmName==istrParmName)
				{
					spCkeParm->Valuate(idblValue);
					return rc;
				}
			}
		}
	}

	return E_FAIL;
}

HRESULT TJMWheelHouseDraftGeneralClass::SetParameter(CATISpecObject_var ispiSpecObj,CATUnicodeString istrParmName,int iValue)
{
	HRESULT rc=S_OK;
	//
	if (ispiSpecObj==NULL_var)
	{
		return E_FAIL;
	}
	//
	CATLISTV(CATISpecObject_var) oListParameters;
	CATIParmPublisher_var spiParmPub=ispiSpecObj;
	if(NULL_var != spiParmPub)
	{
		spiParmPub->GetAllChildren("CATICkeParm",oListParameters);
	}

	if (oListParameters.Size()>0)
	{
		CATICkeParm_var spResultParm;
		for (int i=1; i <= oListParameters.Size(); i++)
		{
			CATICkeParm_var spCkeParm = oListParameters[i];
			if (NULL_var !=spCkeParm)
			{
				CATUnicodeString strParmName=spCkeParm->Name();
				int iIndex =  strParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
				if (iIndex>=0)
				{
					strParmName = strParmName.SubString(iIndex+1,strParmName.GetLengthInChar()-iIndex-1);
				}
				if (strParmName==istrParmName)
				{
					spCkeParm->Valuate(iValue);
					return rc;
				}
			}
		}
	}

	return E_FAIL;
}

HRESULT TJMWheelHouseDraftGeneralClass::SetParameter(CATISpecObject_var ispiSpecObj,CATUnicodeString istrParmName,CATUnicodeString istrValue)
{
	HRESULT rc=S_OK;
	//
	if (ispiSpecObj==NULL_var)
	{
		return E_FAIL;
	}
	//
	CATLISTV(CATISpecObject_var) oListParameters;
	CATIParmPublisher_var spiParmPub=ispiSpecObj;
	if(NULL_var != spiParmPub)
	{
		spiParmPub->GetAllChildren("CATICkeParm",oListParameters);
	}

	if (oListParameters.Size()>0)
	{
		CATICkeParm_var spResultParm;
		for (int i=1; i <= oListParameters.Size(); i++)
		{
			CATICkeParm_var spCkeParm = oListParameters[i];
			if (NULL_var !=spCkeParm)
			{
				CATUnicodeString strParmName=spCkeParm->Name();
				int iIndex =  strParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
				if (iIndex>=0)
				{
					strParmName = strParmName.SubString(iIndex+1,strParmName.GetLengthInChar()-iIndex-1);
				}
				if (strParmName==istrParmName)
				{
					spCkeParm->Valuate(istrValue);
					return rc;
				}
			}
		}
	}

	return E_FAIL;
}
HRESULT TJMWheelHouseDraftGeneralClass::SetRealParameter(CATISpecObject_var ispiSpecObj,CATUnicodeString istrParmName,CATUnicodeString istrValue)
{
	HRESULT rc=S_OK;
	//
	if (ispiSpecObj==NULL_var)
	{
		return E_FAIL;
	}
	//
	CATLISTV(CATISpecObject_var) oListParameters;
	CATIParmPublisher_var spiParmPub=ispiSpecObj;
	if(NULL_var != spiParmPub)
	{
		spiParmPub->GetAllChildren("CATICkeParm",oListParameters);
	}

	if (oListParameters.Size()>0)
	{
		CATICkeParm_var spResultParm;
		for (int i=1; i <= oListParameters.Size(); i++)
		{
			CATICkeParm_var spCkeParm = oListParameters[i];
			if (NULL_var !=spCkeParm)
			{
				CATUnicodeString strParmName=spCkeParm->Name();
				int iIndex =  strParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
				if (iIndex>=0)
				{
					strParmName = strParmName.SubString(iIndex+1,strParmName.GetLengthInChar()-iIndex-1);
				}
				if (strParmName==istrParmName)
				{
					spCkeParm->ValuateReal(istrValue);
					return rc;
				}
			}
		}
	}

	return E_FAIL;
}

//描述：获取PartContainer
//输入：CATIProduct产品对象
//输出：CATIPrtContainer
//返回：CATIPrtContainer
CATIPrtContainer_var TJMWheelHouseDraftGeneralClass::GetPrtContainer( CATIProduct_var ispiObject )
{
	HRESULT rc;

	CATIPrtContainer_var spRootCont=NULL_var;
	if (ispiObject ==NULL_var)
	{
		cout<<"GetPrtContainer Failed"<<endl;
		return spRootCont;
	}
	CATIProduct_var spRefProduct =ispiObject->GetReferenceProduct();
	if( NULL_var == spRefProduct ) return spRootCont;

	CATILinkableObject *piLinkableObject = NULL;
	rc = spRefProduct ->QueryInterface(IID_CATILinkableObject,(void**)&piLinkableObject);
	if( FAILED(rc) || piLinkableObject == NULL ) return  spRootCont;

	// Do not release this pointer
	// Get the document.
	CATDocument * pDoc = NULL ;
	pDoc = piLinkableObject->GetDocument();
	piLinkableObject->Release();       
	piLinkableObject = NULL ;
	if( pDoc == NULL )
	{
		return spRootCont;
	}
	//Get Init
	CATInit_var spInitOnDoc(pDoc);
	if(NULL_var == spInitOnDoc)
	{
		return spRootCont;
	}
	CATIPrtContainer *piPrtContainerOnRoot  = (CATIPrtContainer*)spInitOnDoc->GetRootContainer("CATIPrtContainer");	
	if(piPrtContainerOnRoot!=NULL)
	{
		spRootCont=piPrtContainerOnRoot;
		piPrtContainerOnRoot->Release();
		piPrtContainerOnRoot=NULL;
	}
	return spRootCont;
}

//刷新对象并作异常处理
CATBoolean TJMWheelHouseDraftGeneralClass::UpdateObject(const CATISpecObject_var &spUpdatedObj)
{

	CATBoolean IsUpdatedSuccess = TRUE;

	CATTry
	{
		spUpdatedObj->Update();

	}

	CATCatch(CATMfErrUpdate, error)	
	{
		IsUpdatedSuccess = FALSE;
		if(NULL != error)
		{
			::Flush(error);
		}
	}

	CATCatch(CATError,error)
	{
		IsUpdatedSuccess = FALSE;
		if(NULL != error)
		{
			::Flush(error);
		}

	}
	CATEndTry;

	return IsUpdatedSuccess;
}

//在零件根目录下创建GeoSet，创建前先判断是否已经存在
HRESULT TJMWheelHouseDraftGeneralClass::CreateNewGeoSet(CATIProduct_var ispiProd,CATUnicodeString istrName,CATISpecObject_var &ospiSpecGeoSet)
{
	HRESULT rc = S_OK;
	if (ispiProd == NULL_var)
	{
		return E_FAIL;
	}
	CATIProduct_var ispiProdRef = ispiProd->GetReferenceProduct();
	if (ispiProdRef==NULL_var)
	{
		return E_FAIL;
	}
	CATILinkableObject *piLinkableObjOnChild = NULL;
	rc = ispiProdRef->QueryInterface(IID_CATILinkableObject,(void**)&piLinkableObjOnChild);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATDocument *pDocOnChild = NULL;
	pDocOnChild = piLinkableObjOnChild->GetDocument();
	if (NULL == pDocOnChild)
	{
		return E_FAIL;
	}
	CATIContainerOfDocument_var spContOfDocOnChild = pDocOnChild;
	CATIContainer *piSpecContainerOnChild = NULL;
	rc = spContOfDocOnChild->GetSpecContainer(piSpecContainerOnChild);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATIPrtContainer *piPrtContainerOnChild = NULL;
	rc = piSpecContainerOnChild->QueryInterface(IID_CATIPrtContainer,(void**)&piPrtContainerOnChild);
	piSpecContainerOnChild->Release();
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATIPrtPart_var spPartOnChild = piPrtContainerOnChild->GetPart();
	piPrtContainerOnChild->Release();
	if (NULL_var == spPartOnChild)
	{
		return E_FAIL;
	}
	//先判断有没有RPS几何图形集
	CATIPartRequest *pPartAsRequest = NULL;
	rc = spPartOnChild->QueryInterface(IID_CATIPartRequest, (void**)&pPartAsRequest);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	//遍历所有GS
	CATLISTV(CATBaseUnknown_var) lstGeomSet = NULL;
	pPartAsRequest->GetSurfBodies("", lstGeomSet);
	//如果没有GS或者没有给名字，则直接建立
	CATISpecObject_var spChildTool = NULL_var;
	if (lstGeomSet == NULL || istrName == "")
	{
		//获得几何图形集创建的父级，该处为最外层根下
		CATISpecObject_var spParentTool = spPartOnChild;
		//
		CATIMechanicalRootFactory_var spMechRootFactory = piSpecContainerOnChild;
		//
		//CATISpecObject_var spChildTool = NULL_var;
		rc = spMechRootFactory->CreateGeometricalSet(istrName,spParentTool,spChildTool,-1);
		if (FAILED(rc))
		{
			return E_FAIL;
		}
		//定义到新建的几何图形集下
		spPartOnChild->SetCurrentFeature(spChildTool);
	}
	//有GS，则遍历GS，并判断是否已经含有该名字的几何图形集
	else
	{
		CATBoolean boolExistGS = FALSE;
		for (int i=1; i <= lstGeomSet.Size(); i++)
		{
			CATBaseUnknown_var spCurrentSet = lstGeomSet[i];
			if (spCurrentSet == NULL_var)
			{
				continue;
			}
			CATIAlias_var spAliasOnCurrentSet = spCurrentSet;
			CATUnicodeString strAliasOnCurrentSet = spAliasOnCurrentSet->GetAlias();
			//如果存在，则直接定义到该图形集
			if (strAliasOnCurrentSet == istrName)
			{
				spChildTool = spCurrentSet;
				spPartOnChild->SetCurrentFeature(spChildTool);
				boolExistGS = TRUE;
				break;
			}
		}
		//不存在，则新建图形集
		if (boolExistGS == FALSE)
		{
			//获得几何图形集创建的父级，该处为最外层根下
			CATISpecObject_var spParentTool = spPartOnChild;
			//
			CATIMechanicalRootFactory_var spMechRootFactory = piSpecContainerOnChild;
			//
			//CATISpecObject_var spChildTool = NULL_var;
			rc = spMechRootFactory->CreateGeometricalSet(istrName,spParentTool,spChildTool,-1);
			if (FAILED(rc))
			{
				return E_FAIL;
			}
			//定义到新建的几何图形集下
			spPartOnChild->SetCurrentFeature(spChildTool);
		}
	}
	ospiSpecGeoSet = spChildTool;
	return rc;
}

//在模型树上的指定GeoSet中插入新建的对象
HRESULT TJMWheelHouseDraftGeneralClass::InsertObjOnTree(CATIProduct_var ispProd,CATISpecObject_var ispiSpecGeoSet,CATUnicodeString istrObjName,CATBody *ipBody, CATISpecObject_var &ospiSpecObj)
{
	HRESULT rc = S_OK;
	//
	if (ispProd == NULL_var || ipBody == NULL_var)
	{
		return E_FAIL;
	}
	//
	CATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration();//配置指针
	CATTopData * topdata =new CATTopData(pConfig, NULL);//topdata

	CATIPrtContainer_var ospiCont=NULL_var;
	CATGeoFactory*  pGeoFactory=GetProductGeoFactoryAndPrtCont(ispProd,ospiCont);
	if (ospiCont==NULL_var||pGeoFactory==NULL)
	{
		cout<<"GetProductGeoFactoryAndPrtCont Failed"<<endl;
		return E_FAIL;
	}
	//
	CATIDatumFactory *piDatumFactory =NULL;
	ospiCont->QueryInterface(IID_CATIDatumFactory,(void**) &piDatumFactory);
	if (piDatumFactory==NULL)
	{
		cout<<"QI CATIDatumFactory Failed"<<endl;
		return E_FAIL;
	}
	//特征化
	CATISpecObject * pTempSpec = NULL;
	rc=piDatumFactory->InstanciateDatum(ipBody,pTempSpec);
	if (pTempSpec==NULL_var)
	{
		return E_FAIL;
	}

	CATISpecObject_var spiTempSpec = pTempSpec;
	CATTry
	{
		spiTempSpec ->Update();
	}
	CATCatch(CATMfErrUpdate , pUpdateError)
	{
		return E_FAIL;
	}
	CATCatch(CATError , pError)
	{
		return E_FAIL;
	}
	CATEndTry
		//重命名
		if (istrObjName != "")
		{
			CATIAlias_var spiAlias = spiTempSpec;
			if (spiAlias != NULL_var)
			{
				spiAlias->SetAlias(istrObjName);
			}
		}
		//插入模型树中，放在该GeoSet下
		CATIGSMProceduralView_var spiProceduralView = spiTempSpec;
		if (NULL_var != spiProceduralView )
		{
			rc = spiProceduralView->InsertInProceduralView(ispiSpecGeoSet);
		}
		//
		if (ispiSpecGeoSet != NULL_var)
		{
			ispiSpecGeoSet->Update();
		}
		ospiSpecObj = spiTempSpec;
		return rc;
}

//计算整车绝对坐标系下的transformation
CATMathTransformation TJMWheelHouseDraftGeneralClass::GetAbsTransformation(CATIProduct_var ispCurrentProduct)
{
	if (ispCurrentProduct==NULL_var)
	{
		cout<<"Failed to Get Movable."<<endl;
		return NULL;
	}

	CATIMovable_var spiMovableTwo(ispCurrentProduct);
	if(spiMovableTwo == NULL_var)
	{
		cout<<"Failed to Get Movable."<<endl;
		return NULL;
	}

	CATMathTransformation pMathTrans;
	spiMovableTwo->GetAbsPosition( pMathTrans);

	return pMathTrans;
}
//描述：获取矩阵
//输入：CATISpecObject对象1，CATISpecObject对象2
//输出：CATMathTransformation
//返回：CATMathTransformation
CATMathTransformation TJMWheelHouseDraftGeneralClass::GetMatrixTransformation( CATISpecObject_var spSpecOne, CATISpecObject_var spSpecTwo )
{
	CATIMovable_var spiMovableOne(spSpecOne);
	if(spiMovableOne == NULL_var) 
	{
		cout<<"Failed to Get Movable."<<endl;
		return NULL;
	}

	CATIMovable_var spiMovableTwo(spSpecTwo);
	if(spiMovableTwo == NULL_var) {
		cout<<"Failed to Get Movable."<<endl;
		return NULL;
	}

	CATMathTransformation pMathTrans = spiMovableOne->GetPosition(spiMovableTwo, CATPrd3D, TRUE);

	return pMathTrans;
}

//从Product获取对应的CATGeoFactory和PrtContainer
CATGeoFactory* TJMWheelHouseDraftGeneralClass::GetProductGeoFactoryAndPrtCont(CATIProduct_var ispProduct,CATIPrtContainer_var &ospiCont)
{
	CATIProduct_var spiRefProduct=ispProduct->GetReferenceProduct();
	CATILinkableObject_var spiRefLink=spiRefProduct;
	//CATILinkableObject_var spiRefLink=ispProduct;		注：Instance Product不能直接赋给LinkableObj，后面取到的Document即使不为空，也会影响后续转到Container（会失败)
	CATDocument *opDocument=NULL;
	if( !!spiRefLink ) 
	{
		opDocument = spiRefLink->GetDocument();
	}
	CATGeoFactory*pGeoFactory=GetCATGeoFactory(opDocument);
	GetPrtContFromPrd(ispProduct,ospiCont);
	return pGeoFactory;
}

//从Product获取对应的PrtContainer
void TJMWheelHouseDraftGeneralClass::GetPrtContFromPrd(CATIProduct_var ispiPrd, CATIPrtContainer_var & ospiCont)
{
	//获取Container
	CATDocument * pPrdDocument = NULL;
	GetReferencePrdDocument(ispiPrd, pPrdDocument);
	CATIPrtContainer_var  spiPrtCont = NULL_var;
	GetContOfPartDocument(pPrdDocument, spiPrtCont);
	ospiCont = spiPrtCont;
}

//从Product获取对应的Document
HRESULT TJMWheelHouseDraftGeneralClass::GetReferencePrdDocument(CATIProduct_var ispiInstanceProduct,CATDocument *&opDocument)
{
	HRESULT rc=E_FAIL;
	opDocument = NULL;

	if(ispiInstanceProduct==NULL_var) return rc;

	CATIProduct_var spiRefProduct=ispiInstanceProduct->GetReferenceProduct();

	CATILinkableObject_var spiRefLink=spiRefProduct;

	if( !!spiRefLink ) 
	{
		opDocument = spiRefLink->GetDocument();
		rc = S_OK;
	}

	return rc;
}

//从Document获取PrtContainer
HRESULT TJMWheelHouseDraftGeneralClass::GetContOfPartDocument(CATDocument *ipDocument,CATIPrtContainer_var &opiCont)
{
	HRESULT rc=E_FAIL;

	if( !ipDocument ) return rc;

	CATInit_var spInit = ipDocument;
	CATIPrtContainer *piPrtContainer=NULL;
	if( !!spInit )
		piPrtContainer = (CATIPrtContainer *)spInit->GetRootContainer("CATIPrtContainer");
	opiCont = piPrtContainer;
	return rc;
}

//从Document获取CATGeoFactory
CATGeoFactory* TJMWheelHouseDraftGeneralClass::GetCATGeoFactory(CATDocument * ipDoc)
{
	HRESULT rc;
	CATGeoFactory * pGeoFactory = NULL;	
	if ( NULL != ipDoc )
	{
		CATIContainerOfDocument * pIContainerOfDocument = NULL ;
		rc = ipDoc->QueryInterface(IID_CATIContainerOfDocument, (void**)& pIContainerOfDocument );
		if ( SUCCEEDED(rc) )
		{
			CATIContainer * pIContainerOnGeomContainer = NULL ;
			rc = pIContainerOfDocument->GetResultContainer(pIContainerOnGeomContainer);
			if ( SUCCEEDED(rc) )
			{
				rc = pIContainerOnGeomContainer->QueryInterface( IID_CATGeoFactory, (void**)&pGeoFactory );
				if(pGeoFactory==NULL || FAILED(rc))
				{
					cout<<"QueryInterface pGeoFactory FAILED"<<endl;
					return NULL;
				}
			}
		}
	}
	else
	{
		cout<<"pDoc is NULL"<<endl;
		return NULL;
	}

	return pGeoFactory;
}

CATBoolean TJMWheelHouseDraftGeneralClass::CreatePlaneBody( CATGeoFactory_var spGeoFactory,CATTopData * topdata, CATMathPlane iMathPlane,CATBody_var &ospPlaneBody )
{
	HRESULT hr=E_FAIL;

	if (spGeoFactory==NULL_var)
		return FALSE;

	CATPlane *piNewPlane=NULL;
	piNewPlane=spGeoFactory->CreatePlane(iMathPlane);
	if (piNewPlane==NULL)
	{
		cout<<"CreatePlane Failed"<<endl;
		return FALSE;
	}

	CATSurface *iNewSurface = NULL;
	hr = piNewPlane->QueryInterface(IID_CATSurface,(void**)&iNewSurface);
	if(FAILED(hr) || iNewSurface == NULL)
	{
		cout<<"QI to IID_CATSurface is failed!"<<endl;
		return FALSE;
	}

	CATSurLimits surMaxLimits;
	iNewSurface->GetLimits(surMaxLimits) ;

	CATTopSkin * TopSkin =CATCreateTopSkin(spGeoFactory,topdata,iNewSurface,&surMaxLimits);
	//CATICGMTopSkin * TopSkin =CATCGMCreateTopSkin(pGeoFactory,topdata,iNewSurface,&surMaxLimits);
	if (TopSkin==NULL)
	{
		cout<<"CATCGMCreateTopSkin Failed"<<endl;
		return FALSE;
	}

	TopSkin->Run();

	CATBody*pTopPlaneBody=NULL;
	pTopPlaneBody = TopSkin->GetResult();
	if (pTopPlaneBody==NULL)
	{
		cout<<"pTopPlaneBody==NULL"<<endl;
		return FALSE;
	}

	if (TopSkin!=NULL)
	{
		delete TopSkin;
		TopSkin = NULL;
	}

	ospPlaneBody=pTopPlaneBody;

	return TRUE;
}

//描述：根据维数，从Cell转到body
//输入：CATGeoFactory 几何工厂, CATCell cell对象，int 维数
//输出：
//返回：CATBody body对象
CATBody_var TJMWheelHouseDraftGeneralClass::CreateBodyFromCell(CATGeoFactory *ipGeoFactory, CATCell_var ispCell, int iDimension)
{
	CATBody_var spBody = ipGeoFactory->CreateBody();
	CATDomain *pDomain = spBody->CreateDomain(iDimension);
	pDomain->AddCell(ispCell);
	spBody->AddDomain(pDomain);
	return spBody;
}

//选择元素，转换成BaseUnknown，并同时返回所属Product(Instance)
void TJMWheelHouseDraftGeneralClass::TransferSelectToBU(CATFeatureImportAgent *pFeatAgent,CATBaseUnknown *&opBUSelection, CATIProduct_var &ospProductSeletion) 
{
	HRESULT rc = E_FAIL;

	if (pFeatAgent == NULL)
	{
		return;
	}
	CATISpecObject *piSpecOnSelection = NULL;
	CATPathElement *pPath = pFeatAgent->GetValue();
	CATBaseUnknown *pSelection = pFeatAgent->GetElementValue(pPath);

	opBUSelection = pSelection;

	//返回所属Product
	CATBaseUnknown *pProduct = pPath->FindElement(IID_CATIProduct);
	if (pProduct == NULL)
	{
		pProduct = pPath->FindElement(IID_CATIPrtPart);
		if (pProduct == NULL)
		{
			return;
		}
		CATIPrtPart_var spPart = pProduct;
		if (spPart == NULL_var)
		{
			return;
		}
		CATISpecObject_var spPartObject = spPart->GetProduct();
		if (spPartObject == NULL_var)
		{
			return;
		}
		ospProductSeletion = spPartObject;
		return;
	}
	ospProductSeletion = pProduct;
	return;
}

//选择元素，转换成BaseUnknown，并同时返回所属Product(Instance)
void TJMWheelHouseDraftGeneralClass::TransferSelectToBU(CATPathElementAgent *pPathElemAgent,CATBaseUnknown_var &ospBUSelection, CATIProduct_var &ospProductSeletion) 
{
	HRESULT rc = E_FAIL;

	if (pPathElemAgent == NULL)
	{
		return;
	}
	CATPathElement *pPath = pPathElemAgent->GetValue();
	CATBaseUnknown *pSelection = pPathElemAgent->GetElementValue();

	ospBUSelection = pSelection;

	//返回所属Product
	CATBaseUnknown *pProduct = pPath->FindElement(IID_CATIProduct);
	if (pProduct == NULL)
	{
		pProduct = pPath->FindElement(IID_CATIPrtPart);
		if (pProduct == NULL)
		{
			return;
		}
		CATIPrtPart_var spPart = pProduct;
		if (spPart == NULL_var)
		{
			return;
		}
		CATISpecObject_var spPartObject = spPart->GetProduct();
		if (spPartObject == NULL_var)
		{
			return;
		}
		ospProductSeletion = spPartObject;
		return;
	}
	ospProductSeletion = pProduct;
	return;
}

//选择元素，转换成对应的SpecObj，并同时返回所属Product(Instance)
void TJMWheelHouseDraftGeneralClass::TransferSelectToSpecObjOnTree(CATPathElementAgent *pPathElemAgent,CATISpecObject_var &ospiSpecSelection, CATIProduct_var &ospProductSeletion) 
{
	HRESULT rc = E_FAIL;

	if (pPathElemAgent == NULL)
	{
		return;
	}
	CATPathElement *pPath = pPathElemAgent->GetValue();
	//CATBaseUnknown *pSelection = pPathElemAgent->GetElementValue();
	CATBaseUnknown *pSelect = pPath->FindElement(IID_CATISpecObject);
	if (pSelect==NULL)
	{
		return;
	}
	ospiSpecSelection = pSelect;

	//返回所属Product
	CATBaseUnknown *pProduct = pPath->FindElement(IID_CATIProduct);
	if (pProduct == NULL)
	{
		pProduct = pPath->FindElement(IID_CATIPrtPart);
		if (pProduct == NULL)
		{
			return;
		}
		CATIPrtPart_var spPart = pProduct;
		if (spPart == NULL_var)
		{
			return;
		}
		CATISpecObject_var spPartObject = spPart->GetProduct();
		if (spPartObject == NULL_var)
		{
			return;
		}
		ospProductSeletion = spPartObject;
		return;
	}
	ospProductSeletion = pProduct;
	return;
}

//点击Selectorlist后高亮选择元素
void TJMWheelHouseDraftGeneralClass::SetHighlight(CATBaseUnknown *ipBUSelect, CATFrmEditor *ipEditor, CATHSO *ipHSO)
{
	//if (ipHSO != NULL)
	//{
	//	ipHSO->Empty();
	//}

	if ((ipBUSelect != NULL) && (ipEditor != NULL) && (ipHSO != NULL))
	{
		CATIBuildPath *piBuildPath = NULL;
		HRESULT rc = ipBUSelect->QueryInterface(IID_CATIBuildPath,(void**) &piBuildPath);
		if (SUCCEEDED(rc))
		{
			CATPathElement context = ipEditor->GetUIActiveObject();
			CATPathElement *pPathElement = NULL;

			rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
			if (pPathElement != NULL)
			{
				CATUnicodeString strPath = "";
				PathElementString(pPathElement,strPath);
				cout<<"Highlight Path: "<<strPath<<endl;
				ipHSO->AddElement(pPathElement);
				pPathElement->Release();
				pPathElement = NULL;
			}
			piBuildPath->Release();
			piBuildPath = NULL;
		}
	}
}

//点击Selectorlist后高亮选择元素
void TJMWheelHouseDraftGeneralClass::SetActivePathHighlight(CATBaseUnknown *ipBUSelect,CATIProduct_var ispiProdInst,CATIProduct_var ispiProdRoot,CATFrmEditor *ipEditor, CATHSO *ipHSO)
{
	//if (ipHSO != NULL)
	//{
	//	ipHSO->Empty();
	//}
	SetActivePath(ispiProdInst,ispiProdRoot);

	if ((ipBUSelect != NULL) && (ipEditor != NULL) && (ipHSO != NULL))
	{
		CATIBuildPath *piBuildPath = NULL;
		HRESULT rc = ipBUSelect->QueryInterface(IID_CATIBuildPath,(void**) &piBuildPath);
		if (SUCCEEDED(rc))
		{
			CATPathElement context = ipEditor->GetUIActiveObject();
			CATPathElement *pPathElement = NULL;

			rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
			if (pPathElement != NULL)
			{
				CATUnicodeString strPath = "";
				PathElementString(pPathElement,strPath);
				cout<<"Highlight Path: "<<strPath<<endl;
				ipHSO->AddElement(pPathElement);
				pPathElement->Release();
				pPathElement = NULL;
			}
			piBuildPath->Release();
			piBuildPath = NULL;
		}
	}
}

//累积高亮元素，不清空已高亮
void TJMWheelHouseDraftGeneralClass::SetGroupHighlight(CATBaseUnknown *ipBUSelect, CATFrmEditor *ipEditor, CATHSO *ipHSO)
{
	//if (ipHSO != NULL)
	//{
	//	ipHSO->Empty();
	//}

	if ((ipBUSelect != NULL) && (ipEditor != NULL) && (ipHSO != NULL))
	{
		CATIBuildPath *piBuildPath = NULL;
		HRESULT rc = ipBUSelect->QueryInterface(IID_CATIBuildPath,(void**) &piBuildPath);
		if (SUCCEEDED(rc))
		{
			CATPathElement context = ipEditor->GetUIActiveObject();
			CATPathElement *pPathElement = NULL;

			rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
			if (pPathElement != NULL)
			{
				//CATUnicodeString strPath = "";
				//PathElementString(pPathElement,strPath);
				//cout<<"Highlight Path: "<<strPath<<endl;
				ipHSO->AddElement(pPathElement);
				pPathElement->Release();
				pPathElement = NULL;
			}
			piBuildPath->Release();
			piBuildPath = NULL;
		}
	}
}

//使用VB方法高亮
void TJMWheelHouseDraftGeneralClass::SetHighlight(CATBaseUnknown *pBUSelect)
{
	if (pBUSelect == NULL) return;
	HRESULT rc = E_FAIL;

	CATFrmEditor* pEditor = CATFrmEditor::GetCurrentEditor();
	if (NULL == pEditor)
	{
		return;
	}
	CATDocument * pDrwDoc = pEditor -> GetDocument();
	if (pDrwDoc!=NULL)
	{
		CATIADocument *pCATIADoc = NULL;
		rc = pDrwDoc->QueryInterface(IID_CATIADocument,(void**)&pCATIADoc);
		if (pCATIADoc!=NULL)
		{
			CATIASelection *oSelection = NULL;
			pCATIADoc->get_Selection(oSelection);
			if (oSelection!=NULL)
			{
				CATIABase *iObject = NULL;
				rc = pBUSelect->QueryInterface(IID_CATIABase,(void**)&iObject);
				if (iObject!=NULL)
				{
					//oSelection->Clear();
					oSelection->Add(iObject);
				}
			}
		}
	}
	return;
}

//设置高亮
void TJMWheelHouseDraftGeneralClass::SetHighlight(CATPathElementAgent *ipPathElemAgt, CATHSO *ipHSO)
{

	CATPathElement* pPathEle = NULL;
	pPathEle = ipPathElemAgt->GetValue();
	if (pPathEle != NULL)
	{
		ipHSO->Empty();
		ipHSO->AddElements(pPathEle);
		ipHSO->EndAddElements();
	}
}

//描述：获取对象名称
//输入：CATBaseUnknown_var BaseUnknown对象
//输出：CATUnicodeString  对象名
//返回：CATUnicodeString
CATUnicodeString TJMWheelHouseDraftGeneralClass::GetNameFromBaseUnknownFunc(CATBaseUnknown_var ispiBaseUnknown)
{
	CATUnicodeString strPathName = "";
	if(NULL_var == ispiBaseUnknown)
	{
		return strPathName;
	}
	CATIAlias *piAlias = NULL;
	if(SUCCEEDED(ispiBaseUnknown->QueryInterface (IID_CATIAlias, (void**) &piAlias)) && piAlias!=NULL)
	{
		CATUnicodeString Name = piAlias->GetAlias();
		strPathName = Name;
		piAlias->Release();
		piAlias = NULL;
	}
	return strPathName;
}

//从选择Agent返回对应的路径字符串
void TJMWheelHouseDraftGeneralClass::PathElementString(CATFeatureImportAgent *ipFeatImpAgt,CATUnicodeString &strPathName)
{
	//cout<<"==> Output String of PathElement"<<endl;
	HRESULT rc =E_FAIL;
	//
	CATPathElement* ipPath = NULL;
	ipPath = ipFeatImpAgt->GetValue();
	//
	strPathName = "";
	int NumOfPath = ipPath->GetSize();
	for(int i=0;i<NumOfPath;i++)  
	{
		CATBaseUnknown *pElt=(*ipPath)[i];
		if(pElt != NULL) 
		{
			CATIAlias *piAlias = NULL;
			rc = pElt->QueryInterface (IID_CATIAlias, (void**) &piAlias);
			if(SUCCEEDED(rc) && piAlias!=NULL)
			{
				CATUnicodeString Name = piAlias->GetAlias();
				strPathName.Append(Name) ;
				if(i<=(NumOfPath-2)) 
				{
					strPathName.Append("/");
				}
				piAlias->Release(); piAlias = NULL;
			}
		}
	}
}

//从PathElement返回对应路径字符串
void TJMWheelHouseDraftGeneralClass::PathElementString(CATPathElement *ipPathElem, CATUnicodeString &ostrPath)
{
	HRESULT rc =S_OK;

	ostrPath = "";
	int NumOfPath = ipPathElem->GetSize();
	for(int i=0;i<NumOfPath;i++)  
	{
		CATBaseUnknown *pElt=(*ipPathElem)[i];
		if(pElt != NULL) 
		{
			CATIAlias *piAlias = NULL;
			rc = pElt->QueryInterface (IID_CATIAlias, (void**) &piAlias);
			if(SUCCEEDED(rc) && piAlias!=NULL)
			{
				CATUnicodeString Name = piAlias->GetAlias();
				ostrPath.Append(Name) ;
				if(i<=(NumOfPath-2)) 
				{
					ostrPath.Append("/");
				}
				piAlias->Release(); piAlias = NULL;
			}
		}
	}
}

CATPathElement* TJMWheelHouseDraftGeneralClass::GetDirectPath(CATBaseUnknown_var ispBaseObject ,CATBaseUnknown_var ispRootProduct)
{
	if (ispBaseObject==NULL_var||ispRootProduct==NULL_var) return NULL;

	CATIBuildPath *pPathBuild=NULL;

	CATPathElement *opPathElement=NULL;

	if ( SUCCEEDED(ispBaseObject->QueryInterface( IID_CATIBuildPath, (void**) &pPathBuild )) && (NULL!=pPathBuild) )
	{
		CATPathElement Context(ispRootProduct);
		pPathBuild->ExtractPathElement(&Context,&opPathElement);

		pPathBuild->Release();pPathBuild=NULL;
	}

	return opPathElement;
}

void TJMWheelHouseDraftGeneralClass::SetActivePath(CATIProduct_var ispInstanceProduct,CATIProduct_var ispiRootProduct)
{
	if (ispInstanceProduct==NULL_var||ispiRootProduct==NULL_var)
		return;

	if (ispInstanceProduct->IsEqual(ispiRootProduct))
		return ;

	CATFrmEditor * pEditor=NULL;
	pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor==NULL)
		return;

	CATPathElement *pPath=GetDirectPath(ispInstanceProduct ,ispiRootProduct);
	if (pPath==NULL)
	{
		cout<<"GetDirectPath Failed"<<endl;
		return;
	}

	pEditor->SetActivePath(pPath);

}

CATBoolean TJMWheelHouseDraftGeneralClass::SetActivePathFunc( CATBaseUnknown_var ispSpecSelect)
{
	HRESULT rc=S_OK;

	CATFrmEditor * pEditor=NULL;
	pEditor = CATFrmEditor::GetCurrentEditor();
	if(pEditor==NULL)
		return FALSE;

	if ((ispSpecSelect != NULL_var) && (pEditor != NULL) /*&& (pHSO != NULL)*/)
	{
		CATIBuildPath *piBuildPath = NULL;
		HRESULT rc = ispSpecSelect->QueryInterface(IID_CATIBuildPath,(void**) &piBuildPath);
		if (SUCCEEDED(rc))
		{
			CATPathElement context = pEditor->GetUIActiveObject();
			CATPathElement *pPathElement = NULL;

			rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
			if (pPathElement != NULL)
			{
				pEditor->SetActivePath(pPathElement);
			}
			piBuildPath->Release();
			piBuildPath = NULL;
		}
	}

	return TRUE;
}

// 通过特征获取Body
CATBody_var TJMWheelHouseDraftGeneralClass::GetBodyFromFeature( CATBaseUnknown_var ispFeature ) 
{ 
	//cout<<"GetBodyFromFeature...."<<endl;
	CATBody_var spBody = NULL_var; 
	do { 
		if( ispFeature==NULL_var )  break; 

		CATIMfBRep_var spBRepOnFeature = ispFeature; 
		if(spBRepOnFeature!=NULL_var )
		{ 
			spBody = spBRepOnFeature->GetBody(); 
			if (spBody==NULL_var)
			{
				spBody=spBRepOnFeature->CreateBody(MfWithPermanentBody);
				if (spBody==NULL_var)
				{
					spBody=spBRepOnFeature->CreateSickBody();
					if (spBody==NULL_var)
					{
						cout<<"CATIMfBRep GetBody Failed"<<endl;

					}
					else
					{
						cout<<"CreateSickBody sucess"<<endl;

					}

				}
				else
				{
					cout<<"CreateBody sucess"<<endl;
				}
			}
		} 
		else
		{ 
			CATIBRepAccess_var spBRepAccess=ispFeature;
			if (spBRepAccess!=NULL_var)
			{
				spBody=spBRepAccess->CreateBody();
			}
			else
			{
				CATIGeometricalElement_var spGeometricalElementOnFeature = ispFeature; 
				if( !!spGeometricalElementOnFeature ) 
				{ 
					spBody = spGeometricalElementOnFeature->GetBodyResult(); 
				} 
				else
				{ 
					CATIBodyRequest_var spBodyRequestOnModel = ispFeature; 
					if( spBodyRequestOnModel == NULL_var) break; 

					CATListValCATBaseUnknown_var listResult; 
					HRESULT rc = spBodyRequestOnModel->GetResults("MfDefault3DView",listResult);
					if(FAILED(rc) ||  listResult.Size() <= 0)   break; 

					CATIGeometricalElement_var spGeometricalElementOnBody = listResult[1]; 
					if(spGeometricalElementOnBody==NULL_var)  break;    
					spBody = spGeometricalElementOnBody->GetBodyResult();
				} 
			}
		}
		if( spBody==NULL_var) break;
	} while(FALSE); 
	//cout<<"GetBodyFromFeature...."<<endl;
	return spBody; 
}

//从body获得MathPoint
HRESULT TJMWheelHouseDraftGeneralClass::GetMathPoint(CATBody_var ispPointBody,CATMathPoint& oMathPoint)

{

	if(ispPointBody != NULL_var)

	{

		//计算所有点的角度

		CATLISTP(CATCell) LISTCell;

		ispPointBody->GetAllCells( LISTCell, 0 );

		for( int index = 1; index <= LISTCell.Size(); index++ )

		{

			CATCell * pCell = LISTCell[index];

			if(pCell == NULL)

			{

				cout<<"CATCell is NULL."<<endl;

				continue;

			}



			CATCell_var spCell = pCell;



			CATVertex_var spVertex = spCell;

			if(spVertex == NULL_var)

			{

				cout<<"CATVertex is NULL_var."<<endl;

				continue;

			}



			CATPoint *pPoint = spVertex->GetPoint();

			if(pPoint == NULL)

			{

				cout<<"GetPoint failed."<<endl;

				continue;

			}



			pPoint->GetMathPoint(oMathPoint);

			return S_OK;

		}

	}

	return E_FAIL;

}

//从CATBody获取数学点集合
void TJMWheelHouseDraftGeneralClass::GetMathPtFromBody(CATBody*ipBody,CATLISTV(CATMathPoint)  &oMathPtList)
{
	if (ipBody==NULL)
		return;

	CATLISTP(CATCell) LISTCell; 
	ipBody->GetAllCells( LISTCell, 0 ); 
	if (LISTCell.Size()==0)
		return ;

	for( int index = 1; index <= LISTCell.Size(); index++ )
	{ 
		CATMathPoint oMathPoint;
		CATCell * pCell = LISTCell[index]; 
		if(pCell == NULL) 
		{
			cout<<"CATCell is NULL."<<endl;
			continue;
		}

		CATCell_var spCell = pCell;

		CATVertex_var spVertex = spCell;
		if(spVertex == NULL_var) 
		{
			cout<<"CATVertex is NULL_var."<<endl;
			continue;
		}

		CATPoint *pPoint = spVertex->GetPoint();
		if(pPoint == NULL)
		{
			cout<<"GetPoint failed."<<endl;
			continue;
		}

		pPoint->GetMathPoint(oMathPoint);

		oMathPtList.Append(oMathPoint);
	}

}


//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
CATBoolean TJMWheelHouseDraftGeneralClass::GetAll3DChildFromRep(CATRep *iRep,list<CATRep> **ioAllChildren)
{	
	list<CATRep> *pTempRepList=NULL;
	pTempRepList=iRep->GetChildren();

	if (pTempRepList==NULL)
	{
		return FALSE;
	}

	list<CATRep> *pTRepList=new list<CATRep>;
	for (int i=0;i<pTempRepList->length();i++)
	{
		CATRep* pTempRep=(CATRep*) (*pTempRepList)[i];
		*pTRepList+=(*pTempRep);
	}

	while(pTRepList&&(pTRepList->length()>0))
	{	
		list<CATRep> *pNeedAddList=new list<CATRep>;
		list<CATRep> *pNeedDeleteList=new list<CATRep>;

		for (int i=0;i<pTRepList->length();i++)
		{
			CATRep* pTempRep=(CATRep*) (*pTRepList)[i];
			CATGraphicAttributeSet AttributeSet=pTempRep->GetGraphicAttributeSet();
			if ((pTempRep->IsHidden())||AttributeSet.IsHidden())
			{
				//隐藏的
			}
			else
			{	
				//显示的
				**ioAllChildren+=(*pTempRep);

				list<CATRep> *pRepList=NULL;
				pRepList=pTempRep->GetChildren();

				if (pRepList&&(pRepList->length()>0))
				{
					for (int pa=0;pa<pRepList->length();pa++)
					{
						*pNeedAddList+=(CATRep*)(*pRepList)[pa];
					}
				}
			}

			*pNeedDeleteList+=(*pTempRep);
		}

		if (pNeedAddList&&(pNeedAddList->length()>0))
		{
			for (int pa=0;pa<pNeedAddList->length();pa++)
			{
				*pTRepList+=(CATRep*)(*pNeedAddList)[pa];
			}
		}

		if (pNeedDeleteList&&(pNeedDeleteList->length()>0))
		{
			for (int pd=0;pd<pNeedDeleteList->length();pd++)
			{
				*pTRepList-=(CATRep*)(*pNeedDeleteList)[pd];
			}
		}

		pNeedAddList->empty();
		delete pNeedAddList;pNeedAddList=NULL;

		pNeedDeleteList->empty();
		delete pNeedDeleteList;pNeedDeleteList=NULL;
	}

	pTRepList->empty();
	delete pTRepList;pTRepList=NULL;

	return TRUE;
}
void TJMWheelHouseDraftGeneralClass::GetAllSurfacicFromRep(list<CATRep> *iRepList,list<CATSurfacicRep> **ioSurfacicList)
{	
	for (int i=0;i<iRepList->length();i++)
	{
		CATRep *pRep=(*iRepList)[i];
		if ((pRep)&&(pRep->IsAKindOf("CATSurfacicRep")==1))
		{	
			CATSurfacicRep *pSur=(CATSurfacicRep*)pRep;

			**ioSurfacicList+=(*pSur);
		}
	}
}
HRESULT TJMWheelHouseDraftGeneralClass::CheckIfShow(CATRep *iRep)
{	
	if (iRep==NULL)
	{
		return E_FAIL;
	}

	bool IsHide=false;
	int index=0;
	CATRep *pFatherRep=iRep->GetRepParents(index);
	while(pFatherRep)
	{	
		CATGraphicAttributeSet AttributeSet=pFatherRep->GetGraphicAttributeSet();
		if ((pFatherRep->IsHidden())||AttributeSet.IsHidden())
		{
			IsHide=true;
			break;
		}
		index++;
		pFatherRep=iRep->GetRepParents(index);
	}
	if (IsHide==false)
	{	
		CATGraphicAttributeSet AttributeSet=iRep->GetGraphicAttributeSet();
		if ((iRep->IsHidden())||AttributeSet.IsHidden())
		{
			IsHide=true;
		}
	}

	if (IsHide)
	{
		return E_FAIL;
	}

	return S_OK;
}
HRESULT TJMWheelHouseDraftGeneralClass::GetPointListFromSurfacicRep(const list<CATSurfacicRep> *ipSurlist,const CATMathTransformation iabsTransformation,vector<CATMathPoint> &oPointList)
{
	if (ipSurlist==NULL)
	{
		return E_FAIL;
	}

	for (int i=0;i<ipSurlist->length();i++)
	{	
		CATSurfacicRep *pTemSur=(*ipSurlist)[i];
		if (SUCCEEDED(CheckIfShow(pTemSur)))
		{	
			int iMode=pTemSur->EditMode();
			if (iMode==1)
			{
				pTemSur->SetEditMode(0);
			}

			int vertexsize=pTemSur->GetNumberOfVertices();
			const float *Vectex=pTemSur->GetVertices();

			if (vertexsize>0)
			{
				int mNumVertices=vertexsize/3;

				for (int oi=0;oi<mNumVertices;oi++)
				{	
					oPointList.push_back(iabsTransformation*(CATMathPoint(Vectex[3*oi],Vectex[3*oi+1],Vectex[3*oi+2])));
				}
			}
			if (iMode==1)
			{
				pTemSur->SetEditMode(1);
			}
		}
	}

	return S_OK;
}
//获取最大包围盒
CATMathBox TJMWheelHouseDraftGeneralClass::Get3DBoundingBox(CATISpecObject_var ispSpecObject)
{
	CATMathBox oMathBox;

	//相对全局的转换矩阵
	CATIMovable_var spMoveable=ispSpecObject;
	if (spMoveable==NULL_var)
		return oMathBox;

	CATMathTransformation AbsTransformation;
	spMoveable->GetAbsPosition(AbsTransformation);

	//得到Rep元素
	CATI3DGeoVisu_var spiVisu=spMoveable;
	if (spiVisu==NULL_var)
	{
		return oMathBox;
	}

	CATRep *pCurrentRep=spiVisu->GiveRep();
	if (pCurrentRep==NULL)
	{
		return oMathBox;
	}

	//得到所有显示的子Rep元素
	//Rep元素列表和SrufacicRep元素列表
	list<CATRep> *pRepList=new list<CATRep>;
	list<CATSurfacicRep> *pSur=new list<CATSurfacicRep>;
	GetAll3DChildFromRep(pCurrentRep,&pRepList);
	GetAllSurfacicFromRep(pRepList,&pSur);

	//得到所有点
	vector<CATMathPoint> oResultlist;
	if (FAILED(GetPointListFromSurfacicRep(pSur,AbsTransformation,oResultlist)))
	{	
		pRepList->empty(); delete pRepList; pRepList=NULL;
		pSur->empty(); delete pSur; pSur=NULL;
		return oMathBox;
	}

	pRepList->empty(); delete pRepList; pRepList=NULL;
	pSur->empty(); delete pSur; pSur=NULL;

	for (int j=0; j < oResultlist.size(); j++)
	{
		oMathBox.AddInside(oResultlist[j]);
	}

	double iMinPoint[3]={DBL_MAX, DBL_MAX, DBL_MAX};
	double iMaxPoint[3]={-DBL_MAX, -DBL_MAX, -DBL_MAX};

	double iBoxMinPt[3]={DBL_MAX, DBL_MAX, DBL_MAX};
	double iBoxMaxPt[3]={-DBL_MAX, -DBL_MAX, -DBL_MAX};

	oMathBox.GetLimits(iMinPoint[0],iMaxPoint[0],iMinPoint[1],iMaxPoint[1],iMinPoint[2],iMaxPoint[2]); 

	BoundaryBoxFromUnit3D(&iMinPoint[0],&iMaxPoint[0],iBoxMinPt,iBoxMaxPt);

	oMathBox.SetExtremities(iBoxMinPt[0],iBoxMaxPt[0],iBoxMinPt[1],iBoxMaxPt[1],iBoxMinPt[2],iBoxMaxPt[2]);

	return oMathBox;


	//// 	cout<<endl<<"-------------------------------------------"<<endl;
	//// 	cout<<"Get3DBoundingBox"<<endl;
	//HRESULT rc=E_FAIL;

	//if (ispSpecObject == NULL_var)
	//{
	//	cout<<"Get3DBoundingBox Failed"<<endl;
	//	return oMathBox;
	//}

	//CATIPrtContainer_var  spRootContainer = GetPrtContainer((CATIProduct_var)ispSpecObject);
	//if( spRootContainer == NULL_var )
	//{
	//	cout <<"# Get Container error !" << endl;
	//	return oMathBox;
	//}

	//CATISpecObject_var spiSpecOnPart = spRootContainer -> GetPart();
	//if (spiSpecOnPart == NULL_var)
	//{
	//	cout<<"Get Part Failed!"<<endl;
	//	return oMathBox;
	//}
	////cout<<"Part Name: "<<CATIAlias_var(spiSpecOnPart)->GetAlias()<<endl;
	//CATIDescendants *spDescendants = NULL;
	//CATListValCATISpecObject_var  spPartList;
	//rc = spiSpecOnPart->QueryInterface(IID_CATIDescendants,(void**) &spDescendants);
	//if( FAILED(rc) || spDescendants == NULL )
	//{
	//	cout << "# Get CATIDescendants error !" << endl;
	//	return oMathBox;
	//}

	//spDescendants -> GetAllChildren("CATIMfTriDimResult",spPartList);
	//spDescendants->Release();
	//spDescendants = NULL;

	//if(spPartList == NULL||spPartList.Size()==0)
	//	return oMathBox;

	//double iBoxMinPt[3]={DBL_MAX, DBL_MAX, DBL_MAX};
	//double iBoxMaxPt[3]={-DBL_MAX, -DBL_MAX, -DBL_MAX};
	//for (int i=1;i<=spPartList.Size();i++)
	//{
	//	CATBoolean bShow = CheckShowState(spPartList[i]);
	//	if (bShow == FALSE)
	//	{
	//		continue;
	//	}

	//	//cout<<"CATIMfTriDimResult Name"<<i<<": "<<CATIAlias_var(spPartList[i])->GetAlias()<<endl;
	//	double iMinPoint[3]={DBL_MAX, DBL_MAX, DBL_MAX};
	//	double iMaxPoint[3]={-DBL_MAX, -DBL_MAX, -DBL_MAX};
	//	CATBody_var spBody = GetBodyFromFeature(spPartList[i]);
	//	if(spBody != NULL)
	//	{
	//		//oMathBox = spBody->GetBoundingBox();

	//		vector<CATMathPoint> lstExtremePts;
	//		rc = GetBodyBoxFromExtremePt(spBody, (CATIProduct_var)ispSpecObject, imathVecX,imathVecY,imathVecZ,lstExtremePts);
	//		if (SUCCEEDED(rc))
	//		{
	//			for (int j=0; j < lstExtremePts.size(); j++)
	//			{
	//				oMathBox.AddInside(lstExtremePts[j]);
	//			}
	//		}

	//		oMathBox.GetLimits(iMinPoint[0],iMaxPoint[0],iMinPoint[1],iMaxPoint[1],iMinPoint[2],iMaxPoint[2]); 

	//		BoundaryBoxFromUnit3D(&iMinPoint[0],&iMaxPoint[0],iBoxMinPt,iBoxMaxPt);
	//	}
	//}

	//oMathBox.SetExtremities(iBoxMinPt[0],iBoxMaxPt[0],iBoxMinPt[1],iBoxMaxPt[1],iBoxMinPt[2],iBoxMaxPt[2]);

	//return oMathBox;
}

//  BoundaryBoxFromUnit3D
HRESULT TJMWheelHouseDraftGeneralClass::BoundaryBoxFromUnit3D(double* iMinPt,
							  double* iMaxPt, 
							  double *iBoxMinPt,
							  double* iBoxMaxPt)
{
	if(iBoxMinPt[0]>iMinPt[0])
		iBoxMinPt[0]=iMinPt[0];

	if(iBoxMinPt[1]>iMinPt[1])
		iBoxMinPt[1]=iMinPt[1];

	if(iBoxMinPt[2]>iMinPt[2])
		iBoxMinPt[2]=iMinPt[2];

	if(iBoxMaxPt[0]<iMaxPt[0])
		iBoxMaxPt[0]=iMaxPt[0];

	if(iBoxMaxPt[1]<iMaxPt[1])
		iBoxMaxPt[1]=iMaxPt[1];

	if(iBoxMaxPt[2]<iMaxPt[2])
		iBoxMaxPt[2]=iMaxPt[2];

	return S_OK;
}

//描述：查看特征的显示类型
//输入：CATISpecObject对象
//输出：CATBoolean
//返回：CATBoolean
CATBoolean TJMWheelHouseDraftGeneralClass::CheckShowState(CATISpecObject_var spSpec)
{
	HRESULT rc=S_OK;
	CATBoolean bHide=TRUE;
	CATIVisProperties* piVisProp=NULL;
	if(SUCCEEDED(spSpec->QueryInterface(IID_CATIVisProperties,(void**)&piVisProp)))
	{
		CATVisPropertiesValues ioValues;
		rc=piVisProp->GetPropertiesAtt(ioValues,CATVPShow,CATVPGlobalType);
		CATShowAttribut oShow;
		ioValues.GetShowAttr(oShow);
		if(oShow==CATNoShowAttr)
		{
			bHide=FALSE;
		}
		piVisProp->Release();
		piVisProp=NULL;
	}
	return bHide;
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

//描述：删除数字字符串末尾的0
//输入：CATUnicodeString 字符串
//输出：CATUnicodeString 字符串
//返回：
void TJMWheelHouseDraftGeneralClass::RemoveLastZeroesFromString( CATUnicodeString &ioString )
{
	if (-1 != ioString.SearchSubString("."))	//先判断字符串中是否含有小数点
	{
		CATUnicodeChar zero('0');
		CATUnicodeChar dot('.');
		int iRemoveCharNum = 0;
		int iLength = ioString.GetLengthInChar();
		for (size_t i=iLength-1;i>=0;i--)
		{
			CATUnicodeChar chValue = ioString[i];
			if (chValue == zero)
			{
				iRemoveCharNum++;
			}
			else if (chValue == dot)
			{
				iRemoveCharNum++;
				break;
			}
			else
			{
				break;
			}
		}
		ioString = ioString.SubString(0,iLength-iRemoveCharNum);
	}
}

//描述：判断是Product还是Part
//输入：CATIProduct_var product对象
//输出：无
//返回：CATBoolean
CATBoolean TJMWheelHouseDraftGeneralClass::IsProduct( CATIProduct_var ispiPrd )
{
	HRESULT rc = S_OK;

	CATBoolean isProduct=FALSE;

	CATIProduct *piPrd=NULL;
	rc = ispiPrd->QueryInterface(IID_CATIProduct,(void **)&piPrd);

	CATIProduct_var spRefPrd=ispiPrd->GetReferenceProduct();
	piPrd->Release();  piPrd = NULL;

	if (spRefPrd==NULL_var)
	{
		isProduct = TRUE;
		cout<<"==>Get ReferenceProduct failed"<<endl;
		return isProduct;
	}

	CATILinkableObject *piLinkObj=NULL;
	rc=spRefPrd->QueryInterface(IID_CATILinkableObject,(void **)&piLinkObj);
	if( FAILED(rc) || !piLinkObj ) 
	{
		cout << "==> Get CATILinkableObject error !" << endl;
		return isProduct;
	}

	CATDocument *pDoc=piLinkObj->GetDocument();
	piLinkObj->Release();  piLinkObj = NULL;
	if( !pDoc ) 
	{
		cout << "==> Get CATDocument error !" << endl;
		return isProduct;
	}

	CATIDocId *pDocID;
	CATUnicodeString typeDoc="";
	rc = pDoc->GetDocId(&pDocID);
	if( !(FAILED(rc)) )
		rc = pDocID->GetType(typeDoc);
	//cout << " ==> The type of document is: " << typeDoc << endl;

	if( typeDoc == "CATProduct" )
		isProduct = TRUE;

	return isProduct;
}

HRESULT TJMWheelHouseDraftGeneralClass::CenterGraphObject(CATISpecObject_var ispiSpecObject,int iMode,bool IfCenterTreeOnly,float ifRadius)
{
	HRESULT rc=E_FAIL;

	//Check the input parameter
	if( !ispiSpecObject || (iMode != 1 && iMode != 2 && iMode != 3) )
		return rc;

	////////////////////////////////////////////////////////////
	// Center graph the special tree
	////////////////////////////////////////////////////////////

	// Retrieves the current window 
	CATFrmLayout * pLayout = CATFrmLayout::GetCurrentLayout();
	if ( NULL == pLayout ) return rc;

	CATFrmWindow * pCurrentWindow = pLayout->GetCurrentWindow();
	if ( NULL == pCurrentWindow ) return rc;

	// If it is a CATFrmNavigGraphicWindow, it is possible to
	// retrieve a CATNavigBox pointer
	//
	if ( 1 != pCurrentWindow->IsAKindOf("CATFrmNavigGraphicWindow") ) return rc;

	CATFrmNavigGraphicWindow * pFrmNavigGraphicWindow = 
		(CATFrmNavigGraphicWindow*) pCurrentWindow ;

	CATNavigBox * pNavigBox = NULL ;
	pNavigBox = pFrmNavigGraphicWindow->GetNavigBox();

	if ( NULL == pNavigBox ) return TRUE;

	// Perform center graph action according to the iMode parameter
	CATCafCenterGraph CenterGraphObj;
	switch(iMode) 
	{
	case 1:
		CenterGraphObj.CenterGraph("OnCSO",pNavigBox);
		break;
	case 2:
		CenterGraphObj.CenterGraph("OnHSO",pNavigBox);
		break;
	case 3:
		CenterGraphObj.CenterGraph("OnCtxMenu",pNavigBox);
		break;
	default:
		break;
	}

	////////////////////////////////////////////////////////////
	// Center graph the 3D mode
	////////////////////////////////////////////////////////////
	if (!IfCenterTreeOnly)
	{
		CATI3DGeoVisu_var spi3DGeoVis=ispiSpecObject;
		CATRep *pRep=NULL;
		if( !!spi3DGeoVis )
			pRep = spi3DGeoVis->GiveRep();

		CAT3DRep *pRep3D=NULL;
		if( !!pRep && 1 == pRep->IsAKindOf("CAT3DRep") )
			pRep3D = (CAT3DRep *)pRep;

		CATViewer *pViewer=pFrmNavigGraphicWindow->GetGraphicViewer();

		CAT3DViewer *pViewer3D=NULL;
		if( !!pViewer && 1==pViewer->IsAKindOf("CAT3DViewer") )
			pViewer3D = (CAT3DViewer *)pViewer;

		if( !!pViewer3D && !!pRep3D )
		{
			CAT3DBoundingSphere BoundingSphere3D = pRep3D->GetBoundingElement();
			CATMathPointf ptCenter = BoundingSphere3D.GetCenter();
			CAT3DBoundingSphere BoundingSphere3DNew(ptCenter,ifRadius);
			pViewer3D->ReframeOn(BoundingSphere3DNew);
		}

	}

	return S_OK;
}

//从CATCell转到CATCurve
CATCurve_var TJMWheelHouseDraftGeneralClass::GetCurveFromCell(CATCell_var ispCellCurve)
{
	CATCurve_var spCurve = NULL_var;
	CATEdge_var spEdge=ispCellCurve;
	if(spEdge == NULL_var)
	{
		return spCurve;
	}
	CATEdgeCurve_var spEdgeCurve = spEdge ->GetCurve(NULL);
	if(spEdgeCurve == NULL_var)
	{ 
		return spCurve; 
	}
	spCurve=spEdgeCurve->GetRefCurve();
	return spCurve;
}

//描述：投影
//输入：CATGeoFactory* ,CATTopData*,CATBody* 投影元素,CATBody* 投影目标(surface的body)
//输出：CATBody 投影结果
//返回：HRESULT
CATBody* TJMWheelHouseDraftGeneralClass::CreateTopProject(CATGeoFactory* ipGeoFactory, CATTopData* itopdata,CATBody* iBody1,CATBody* iBody2)
{
	if (ipGeoFactory==NULL||itopdata==NULL||iBody1 == NULL||iBody1 == NULL)
	{
		return NULL;
	}

	//做投影
	CATHybProject * HybProject=CATCreateTopProject(ipGeoFactory,itopdata,iBody1,iBody2,0) ;
	if (HybProject==NULL)
	{
		return NULL;
	}
	HybProject->Run();

	CATBody* pResultBody= HybProject->GetResult();
	if (pResultBody==NULL)
	{
		return NULL;
	}

	return pResultBody;
}

//描述：沿指定方向投影
//输入：CATGeoFactory* ,CATTopData*,CATBody_var 投影元素,CATBody_var 投影目标(surface的body)
//输出：CATBody_var 投影结果
//返回：HRESULT
CATBody_var TJMWheelHouseDraftGeneralClass::CreateTopProject(CATGeoFactory* ipGeoFactory, CATTopData* itopdata,CATBody_var iBodyToProject,CATBody_var iBodySupport,CATMathDirection iDir)
{
	if (ipGeoFactory==NULL||itopdata==NULL||iBodyToProject == NULL_var||iBodySupport == NULL_var)
	{
		return NULL_var;
	}

	//做投影
	CATHybProject * pHybProject=NULL;
	CATTry
	{
		pHybProject = CATCreateTopProject(ipGeoFactory,itopdata,iBodyToProject,iBodySupport,&iDir) ;
		if (pHybProject==NULL)
		{
			return NULL_var;
		}
		pHybProject->Run();
	}
	CATCatch(CATError,perror)
	{	
		if (pHybProject!=NULL)
		{
			delete pHybProject;
			pHybProject=NULL;
		}
		return NULL_var;
	}
	CATEndTry

		CATBody_var spResultBody= pHybProject->GetResult();

	return spResultBody;
}

//描述：获得相交对象
//输入：CATGeoFactory*geo工厂,CATTopData*对象,CATBody* body1,CATBody* body2
//输出：CATBody* 相交结果
//返回：CATBody*
CATBody* TJMWheelHouseDraftGeneralClass::CreateTopIntersect( CATGeoFactory* ipGeoFactory, CATTopData* itopdata,CATBody*iBody1,CATBody*iBody2 )
{
	CATBody*pBody=NULL;

	CATHybIntersect * ipHybIntersect=CATCreateTopIntersect( ipGeoFactory, itopdata, iBody1, iBody2);
	if (ipHybIntersect==NULL)
		return pBody;

	ipHybIntersect->Run(); 
	pBody=ipHybIntersect->GetResult();

	delete ipHybIntersect; 
	ipHybIntersect = NULL;
	return pBody;
}

//描述：创建圆Body
//输入：CATGeoFactory，CATTopData，CATMathPlane，double
//输出：CATBody
//返回：CATBoolean
HRESULT TJMWheelHouseDraftGeneralClass::CreateCircle( CATGeoFactory_var spGeoFactory,CATTopData * topdata,CATMathPlane iMathPlane,double Radius,CATBody_var &ospBody )
{
	HRESULT hr=E_FAIL;

	CATCircle * pCircle=spGeoFactory->CreateCircle(Radius,iMathPlane);
	if (pCircle==NULL)
	{
		cout<<"CreateCircle Failed"<<endl;
		return E_FAIL;
	}

	CATCurve *piCurve = NULL;
	hr = pCircle->QueryInterface(IID_CATCurve,(void**)&piCurve);
	if(FAILED(hr) || piCurve == NULL)
	{
		cout<<"QI to IID_CATCurve is failed!"<<endl;
		return E_FAIL;
	}

	int iNum = 1;
	CATCurve ** ListOfCurves = new CATCurve * [iNum];
	CATCrvLimits * curLimits = new CATCrvLimits[iNum];
	short * wireOrientations = new short[iNum];
	ListOfCurves[0] = piCurve;

	for (int i = 0; i <iNum ; i++)
	{
		CATCurve * pLocalCurve = ListOfCurves[i];
		if (pLocalCurve != NULL)
			pLocalCurve->GetLimits(curLimits[i]);
		wireOrientations[i]=short(1);
	}

	CATTopWire * pWire = ::CATCreateTopWire(spGeoFactory, 
		topdata,
		iNum,
		ListOfCurves,
		curLimits,
		wireOrientations);

	pWire->ForceWireClosure();
	pWire->Run();

	ospBody = pWire->GetResult();

	if (pCircle!=NULL)
	{
		spGeoFactory->Remove(pCircle);
		pCircle=NULL;
	}

	if (pWire!=NULL)
	{
		delete pWire;
		pWire = NULL;
	}

	if (ListOfCurves!=NULL)
	{
		delete ListOfCurves; 
		ListOfCurves = NULL;
	}

	if (curLimits!=NULL)
	{
		delete curLimits;
		curLimits = NULL;
	}

	if (wireOrientations!=NULL)
	{
		delete wireOrientations; 
		wireOrientations = NULL;
	}


	return S_OK;
}

CATBoolean TJMWheelHouseDraftGeneralClass::GetPathElement( CATBaseUnknown_var ispSpecSelect,CATPathElement* &pPathElementLine)
{
	HRESULT rc=S_OK;

	CATFrmEditor * pEditor=NULL;
	pEditor = CATFrmEditor::GetCurrentEditor();
	if(pEditor==NULL)
		return FALSE;


	if ((ispSpecSelect != NULL_var) && (pEditor != NULL) /*&& (pHSO != NULL)*/)
	{
		CATIBuildPath *piBuildPath = NULL;
		HRESULT rc = ispSpecSelect->QueryInterface(IID_CATIBuildPath,(void**) &piBuildPath);
		if (SUCCEEDED(rc))
		{
			CATPathElement context = pEditor->GetUIActiveObject();
			CATPathElement *pPathElement = NULL;

			rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
			if (pPathElement != NULL)
			{
				pPathElementLine  = pPathElement;
			}
			piBuildPath->Release();
			piBuildPath = NULL;
		}
	}

	return TRUE;
}

void TJMWheelHouseDraftGeneralClass::ShowOrHideElement(CATISpecObject_var	ispiElement,
						CATShowAttribut		iEnumShowAttribute,
						CATVisPropertyType	iEnumVisPropertyType,
						CATVisGeomType		iEnumVisGeomType)
{
	HRESULT hr = S_OK;
	CATIVisProperties* piVisProperties = NULL;

	// 输入参数检查
	if (NULL_var == ispiElement)
	{
		return;
	}

	// 更改要素显示隐藏属性
	hr = ispiElement->QueryInterface(IID_CATIVisProperties, (void**)&piVisProperties);
	if (SUCCEEDED(hr) && NULL != piVisProperties)
	{
		CATVisPropertiesValues visPropertiesValues;
		visPropertiesValues.SetShowAttr(iEnumShowAttribute);
		hr = piVisProperties->SetPropertiesAtt(visPropertiesValues, iEnumVisPropertyType, iEnumVisGeomType);

		// 释放内存
		piVisProperties->Release();
		piVisProperties = NULL;
	}
}

HRESULT TJMWheelHouseDraftGeneralClass::GetTransformationBody(CATBody_var ispBody,CATIProduct_var ispOrginProduct,CATIProduct_var ispTargetProduct,CATBody_var& ospResultBody)
{
	HRESULT rc = S_OK;
	ospResultBody = NULL_var;
	if(NULL_var == ispBody||NULL_var == ispOrginProduct)
	{
		return E_FAIL;
	}
	CATIPrtContainer_var ospiCont=NULL_var;
	CATGeoFactory*  pGeoFactory=GetProductGeoFactoryAndPrtCont(ispTargetProduct,ospiCont);
	if (pGeoFactory == NULL)
	{
		return E_FAIL;
	}

	CATMathTransformation transFather;
	if(NULL_var == ispTargetProduct)
	{
		transFather = GetAbsTransformation(ispOrginProduct);
	}else
	{
		transFather = GetMatrixTransformation(ispOrginProduct,ispTargetProduct);
	}
	//先把Body也坐标变换到father一级
	CATTransfoManager * pTransfoManager = new CATTransfoManager(transFather,pGeoFactory,CATTransfoManager::FullDuplicate  , NULL); 		
	if (NULL==pTransfoManager)
	{
		return E_FAIL;
	}

	pTransfoManager->Add(ispBody);
	pTransfoManager->Run();

	CATBody * piTransBody = (CATBody *)(pTransfoManager->ReadImage(ispBody));
	if (piTransBody==NULL)
	{
		return E_FAIL;
	}

	ospResultBody = piTransBody;
	delete pTransfoManager;
	pTransfoManager = NULL;

	return S_OK;
}

HRESULT TJMWheelHouseDraftGeneralClass::GetCATIASectionResult(CATIProduct_var ispProd,double iarrPos[],double idWidth,double idHeight,CATListValCATISpecObject_var &olstResult,CATDocument *&opDoc)
{
	//开始获取CATIASections
	CATIAProduct* piaCATIAPrd = NULL;
	HRESULT rc = ispProd ->QueryInterface( IID_CATIAProduct, (void **)&piaCATIAPrd );
	if (FAILED(rc)||piaCATIAPrd==NULL)
	{
		return E_FAIL;
	}
	CATIASections* piaSections = NULL;
	CATUnicodeString	strname = "Sections";
	CATBSTR BSTR;
	strname.ConvertToBSTR(&BSTR );
	CATBaseDispatch* pBaseDis = NULL;
	piaCATIAPrd->GetTechnologicalObject( BSTR, pBaseDis); //获取Object对象
	pBaseDis->QueryInterface( IID_CATIASections, (void **)&piaSections );
	//创建一个CATISection并添加到CATIASections集中
	CATIASection* piaSection = NULL;
	piaSections->Add( piaSection);

	////获取groups
	//CATIAGroups* piaGroups = NULL;
	//strname = "Groups";
	//strname.ConvertToBSTR(&BSTR );
	//piaCATIAPrd->GetTechnologicalObject( BSTR, pBaseDis); //获取Object对象
	//pBaseDis->QueryInterface( IID_CATIAGroups, (void **)&piaGroups );
	////创建一个CATISection并添加到CATIASections集中
	//CATIAGroup* piaGroup = NULL;
	//piaGroups->Add( piaGroup);
	//CATBaseDispatch *pBaseDisProd=NULL;
	//if (FAILED(ispProd->QueryInterface(IID_CATBaseDispatch,(void**)&pBaseDisProd)||pBaseDisProd==NULL))
	//{
	//	return E_FAIL;
	//}
	//piaGroup->AddExplicit(pBaseDisProd);


	//
	//double arrPos[] = {1, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0};

	long lngSize = 12;
	CATSafeArrayVariant* pSafeArray = BuildSafeArrayVariant(iarrPos, lngSize);
	piaSection->put_Height(idHeight);		//v向的长度，两边对半(第二个方向，即竖直向)
	piaSection->put_Width(idWidth);		//u向的长度，两边对半(第一个方向，即水平向)
	piaSection->put_Type(catSectionTypePlane);
	piaSection->SetPosition(*pSafeArray);
	//piaSection->put_Group(piaGroup);
	

	//
	CATIADocument *piaDoc = NULL;
	piaSection->Export(piaDoc);
	if (piaDoc == NULL)
	{
		return E_FAIL;
	}
	CATBSTR bstrPath;
	piaDoc->get_FullName(bstrPath);

	CATUnicodeString strPath = "";
	strPath.BuildFromBSTR(bstrPath);

	//
	CATDocument *pDoc=NULL;
	//if (FAILED(CATDocumentServices::GetDocumentInSession(strPath,pDoc))||pDoc==NULL)
	//{
	//	return E_FAIL;
	//}
	if (FAILED(CATDocumentServices::OpenDocument(strPath,pDoc))||pDoc==NULL)
	{
		return E_FAIL;
	}
	::CATLockDocument(*pDoc);

	CATIProduct_var spiProdDoc = GetRootProductFromDoc(pDoc);
	if (spiProdDoc==NULL_var)
	{
		return E_FAIL;
	}

	CATIPrtContainer_var spiCont = GetPrtContainer(spiProdDoc);
	if (spiCont==NULL_var)
	{
		return E_FAIL;
	}

	CATIPrtPart_var spiPart = spiCont->GetPart();
	CATIDescendants_var spiDesc = spiPart;
	if (spiDesc==NULL_var)
	{
		return E_FAIL;
	}

	spiDesc->GetAllChildren("CATISketch",olstResult);
	opDoc = pDoc;

	//
	////获取当前所有的group数量
	//CATLONG lCount;
	//if (FAILED(piaGroups->get_Count(lCount)))
	//{
	//	return E_FAIL;
	//}

	////删除最后一个group
	//VARIANT va;
	//va.vt = VT_I4;
	//va.lVal = lCount;
	//piaGroups->Remove(va);
	
	return S_OK;
}

//根据输入的数量，从后往前删除section
HRESULT TJMWheelHouseDraftGeneralClass::RemoveSections(CATIProduct_var ispProd,int iCount)
{
	//开始获取CATIASections
	CATIAProduct* piaCATIAPrd = NULL;
	HRESULT rc = ispProd ->QueryInterface( IID_CATIAProduct, (void **)&piaCATIAPrd );
	if (FAILED(rc)||piaCATIAPrd==NULL)
	{
		return E_FAIL;
	}
	CATIASections* piaSections = NULL;
	CATUnicodeString	strname = "Sections";
	CATBSTR BSTR;
	strname.ConvertToBSTR(&BSTR );
	CATBaseDispatch* pBaseDis = NULL;
	piaCATIAPrd->GetTechnologicalObject( BSTR, pBaseDis); //获取Object对象
	pBaseDis->QueryInterface( IID_CATIASections, (void **)&piaSections );

	//获取当前所有的section数量
	CATLONG lCount;
	if (FAILED(piaSections->get_Count(lCount)))
	{
		return E_FAIL;
	}

	//从后往前删除剖面
	for (int i=0;i<iCount;i++)
	{
		VARIANT va;
		va.vt = VT_I4;
		va.lVal = lCount-i;
		piaSections->Remove(va);
	}
	
	return S_OK;
}

CATBoolean TJMWheelHouseDraftGeneralClass::IsPointOnLine(CATMathPoint iPt,CATMathPoint iLinePt1,CATMathPoint iLinePt2)
{
	if (iPt.DistanceTo(iLinePt1)<=0.001 || iPt.DistanceTo(iLinePt2)<=0.001)
	{
		return TRUE;
	} 
	else
	{
		CATMathVector dir1 = iLinePt1-iPt;
		CATMathVector dir2 = iLinePt2-iPt;
		CATAngle angleDir = dir1.GetAngleTo(dir2);
		if (angleDir>=CATPI-0.001&&angleDir<=CATPI)
		{
			return TRUE;
		}
	}
	return FALSE;
}

CATIProduct_var TJMWheelHouseDraftGeneralClass::CreateNewPart()
{
	CATDocument *pDoc=NULL;
	HRESULT rc=CATDocumentServices::New("Part",pDoc);
	if (FAILED(rc)||pDoc==NULL)
	{
		return NULL_var;
	}
	CATIProduct_var spiProdNew=NULL_var;
	spiProdNew=GetRootProductFromDoc(pDoc);

	return spiProdNew;
}

//描述：3D点转2D点
//输入：CATMathPlane 目标平面,CATMathPoint数学点
//输出：double* 2d点
//返回：CATBoolean
CATBoolean TJMWheelHouseDraftGeneralClass::Coord3DTransformTo2D(CATMathPlane PrjPlane,CATMathPoint  i3DPositin,double* op2DPt)
{
	HRESULT rc = S_OK;

	CATMathVector iMathVect1,iMathVect2;
	PrjPlane.GetDirections(iMathVect1,iMathVect2);
	CATMathPoint iMathOrigin=PrjPlane.GetOrigin();

	op2DPt[0]=i3DPositin.GetX()*iMathVect1.GetX()+i3DPositin.GetY()*iMathVect1.GetY()+i3DPositin.GetZ()*iMathVect1.GetZ()-
		(iMathOrigin.GetX()*iMathVect1.GetX()+iMathOrigin.GetY()*iMathVect1.GetY()+iMathOrigin.GetZ()*iMathVect1.GetZ());
	op2DPt[1]=i3DPositin.GetX()*iMathVect2.GetX()+i3DPositin.GetY()*iMathVect2.GetY()+i3DPositin.GetZ()*iMathVect2.GetZ()-
		(iMathOrigin.GetX()*iMathVect2.GetX()+iMathOrigin.GetY()*iMathVect2.GetY()+iMathOrigin.GetZ()*iMathVect2.GetZ());
	return TRUE;
}

//描述：将3D点转化为2D点
//输入：CATIView视图对象，CATMathPoint数学点
//输出：double
//返回：CATBoolean
CATBoolean TJMWheelHouseDraftGeneralClass::Coord3DTransformTo2D(CATIView_var spiView,
								CATMathPoint  i3DPositin,
								double* op2DPt)
{
	HRESULT rc = S_OK;

	CATIGenerSpec_var spGenerSpec=spiView->GetGenerSpec();	
	if(FAILED(rc)||spGenerSpec==NULL_var) return FALSE;

	CATMathPlane PrjPlane=spGenerSpec->GetProjPlane();

	CATMathVector iMathVect1,iMathVect2;
	PrjPlane.GetDirections(iMathVect1,iMathVect2);
	CATMathPoint iMathOrigin=PrjPlane.GetOrigin();

	op2DPt[0]=i3DPositin.GetX()*iMathVect1.GetX()+i3DPositin.GetY()*iMathVect1.GetY()+i3DPositin.GetZ()*iMathVect1.GetZ()-
		(iMathOrigin.GetX()*iMathVect1.GetX()+iMathOrigin.GetY()*iMathVect1.GetY()+iMathOrigin.GetZ()*iMathVect1.GetZ());
	op2DPt[1]=i3DPositin.GetX()*iMathVect2.GetX()+i3DPositin.GetY()*iMathVect2.GetY()+i3DPositin.GetZ()*iMathVect2.GetZ()-
		(iMathOrigin.GetX()*iMathVect2.GetX()+iMathOrigin.GetY()*iMathVect2.GetY()+iMathOrigin.GetZ()*iMathVect2.GetZ());
	return TRUE;
}

CATBoolean TJMWheelHouseDraftGeneralClass::Coord2DTransformTo3D(CATMathPlane PrjPlane,double* i2Dpt,CATMathPoint &o3Dpt)
{
	CATMathVector iMathVect1,iMathVect2;
	PrjPlane.GetDirections(iMathVect1,iMathVect2);
	CATMathPoint iMathOrigin=PrjPlane.GetOrigin();
	iMathVect1.Normalize();
	iMathVect2.Normalize();

	o3Dpt=iMathOrigin+i2Dpt[0]*iMathVect1;
	o3Dpt=o3Dpt+i2Dpt[1]*iMathVect2;

	return TRUE;

}

//************************************
// Method:    GetCkeParmFromFatherObject
// FullName:  GetCkeParmFromFatherObject
// Access:    public 
// Returns:   HRESULT
// Qualifier: 获取参数集下的参数
// Parameter: CATISpecObject_var ispiFatherObj
// Parameter: CATUnicodeString istrParamName
// Parameter: CATICkeParm_var & ospCkeParam
//************************************
HRESULT TJMWheelHouseDraftGeneralClass::GetCkeParmFromFatherObject(CATISpecObject_var ispiFatherObj, CATUnicodeString istrParamName, CATICkeParm_var &ospCkeParam )
{
	HRESULT rc = S_OK;
	ospCkeParam = NULL_var;

	if (NULL_var == ispiFatherObj) return E_FAIL;

	//转换成CATIDescendants类型,用来得到Feature中所有的孩子
	CATIDescendants_var spiDescPart=ispiFatherObj;
	if (spiDescPart==NULL_var) return E_FAIL;

	CATListValCATISpecObject_var splistFeatures;
	spiDescPart->GetAllChildren("CATICkeParm", splistFeatures);

	if (splistFeatures.Size()>0)
	{
		for (int i=1;i<=splistFeatures.Size();i++)
		{
			//CATICkeParm_var spCurrentCkeParam = splistFeatures[i];
			//if (NULL_var == spCurrentCkeParam) continue;

			//CATUnicodeString strCurrentInterRoleName = spCurrentCkeParam->InternalRole();
			//CATUnicodeString strCurrentRoleName = spCurrentCkeParam->Name();
			////cout<<"strCurrentInterRoleName:"<<strCurrentInterRoleName<<endl;
			////cout<<"strCurrentRoleName:"<<strCurrentRoleName<<endl;
			//if (strCurrentInterRoleName==istrParamName || strCurrentRoleName == istrParamName)
			//{
			//	ospCkeParam = spCurrentCkeParam;
			//	break;
			//}

			CATICkeParm_var spCkeParm = splistFeatures[i];
			if (NULL_var !=spCkeParm)
			{
				CATUnicodeString strParmName=spCkeParm->Name();
				int iIndex =  strParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
				if (iIndex>=0)
				{
					strParmName = strParmName.SubString(iIndex+1,strParmName.GetLengthInChar()-iIndex-1);
				}
				if (strParmName==istrParamName)
				{
					ospCkeParam = spCkeParm;
					return S_OK;
				}
			}
		}
	}
	return E_FAIL;
}

//************************************
// Method:    GetParmPublisherByName
// FullName:  GetParmPublisherByName
// Access:    public 
// Returns:   HRESULT
// Qualifier: 获取某一级下的参数集
// Parameter: CATBaseUnknown_var ispiParamRoot
// Parameter: CATUnicodeString istrName
// Parameter: CATBaseUnknown_var &ospParmPublisher
//************************************
HRESULT TJMWheelHouseDraftGeneralClass::GetParmPublisherByName(CATBaseUnknown_var ispiParamRoot,CATUnicodeString istrName, CATBaseUnknown_var &ospParmPublisher)
{
	HRESULT rc = E_FAIL;

	if (ispiParamRoot==NULL_var)
	{
		return E_FAIL ;
	}

	CATIDescendants_var spDescendants = ispiParamRoot;
	if(spDescendants==NULL_var)
		return E_FAIL;

	CATIAlias_var spAlias =NULL_var;
	CATListValCATISpecObject_var lstChildren;
	spDescendants->GetAllChildren("CATIParmPublisher",lstChildren);

	for(int ii=1;ii<=lstChildren.Size();ii++)
	{
		CATUnicodeString strName ;

		spAlias = lstChildren[ii];
		if(spAlias==NULL_var)
			continue;

		strName= spAlias->GetAlias();

		int iIndex =  strName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
		if (iIndex>=0)
		{
			strName = strName.SubString(iIndex+1,strName.GetLengthInChar()-iIndex-1);
		}

		//CATIAllowUserInfo_var spAllowUserInfo = lstChildren[ii];
		//if (spAllowUserInfo==NULL_var) continue;

		//CATUnicodeString strAllowUserInfo;
		//strAllowUserInfo=spAllowUserInfo->GetComment();

		if(strName==istrName)//||strAllowUserInfo==strAllowUserInfo
		{
			ospParmPublisher=lstChildren[ii];
			return S_OK;

		}
	}
	
	return E_FAIL;

}

//描述：分割字符 
//输入：CATUnicodeString 要分割的字符串,CATUnicodeString 关键字符
//输出：CATListOfCATUnicodeString 分割完的字符串
//返回：CATBoolean
CATBoolean TJMWheelHouseDraftGeneralClass::SplitString(CATUnicodeString iStrString, CATUnicodeString iStrSplit, CATListOfCATUnicodeString &oStrList)
{
	CATUnicodeString strTemp, strTemp2;
	int iLocation = iStrString.SearchSubString(iStrSplit, 0, CATUnicodeString::CATSearchModeForward);
	int iSize;
	strTemp = iStrString;
	if (iLocation==-1)
	{
		oStrList.Append(strTemp);
		return TRUE;
	}
	while(iLocation != -1)
	{
		strTemp2 = strTemp.SubString(0, iLocation);
		oStrList.Append(strTemp2);
		iSize = strTemp.GetLengthInChar();

		strTemp2 = strTemp.SubString(iLocation+iStrSplit.GetLengthInChar(), iSize-iLocation-iStrSplit.GetLengthInChar());
		strTemp = strTemp2;
		iLocation = strTemp.SearchSubString(iStrSplit, 0, CATUnicodeString::CATSearchModeForward);

		if(iLocation == -1 && strTemp2 != "")
			oStrList.Append(strTemp2);
	}	

	return TRUE;
}

//描述：检查文件是否已经被打开,若已经打开则返回该文件的Docment
//输入：CATUnicodeString已有文件路径
//输出：CATDocument*
//返回：CATBoolean
CATBoolean TJMWheelHouseDraftGeneralClass::CheckPathIsOpenedFunc(CATUnicodeString istrPath,CATDocument*& opDoc)
{
	HRESULT rc = S_OK;

	CATFrmLayout *pLayout =CATFrmLayout::GetCurrentLayout();
	CATLISTP(CATFrmWindow) listOfCurWindows = pLayout->GetWindowList();
	for (int i=1; i<=listOfCurWindows.Size(); i++)
	{
		CATFrmEditor* pEditor= listOfCurWindows[i]->GetEditor();
		if (pEditor == NULL)
		{
			continue;
		}
		CATDocument *pDoc = pEditor->GetDocument();
		if (pDoc == NULL)
		{
			continue;
		}
		CATUnicodeString strThisDocPath;
		strThisDocPath = pDoc->StorageName();
		if(strThisDocPath == istrPath)
		{
			opDoc = pDoc;
			pLayout->SetCurrentWindow(listOfCurWindows[i]);
			return TRUE;
		}
	}
	return FALSE;
}

//描述：创建ISO视图
//输入：CATIDftSheet所在页，CATLISTP(CATIProduct)投影元素，CATMathPlane投影面，double视图x坐标位置，double视图y坐标位置，double比例
//输出：
//返回：CATIView ISO视图
CATIView_var TJMWheelHouseDraftGeneralClass::CreateFrontView(CATIDftSheet *ipiDftSheet, 
							vector<CATISpecObject_var> ilstSpecObj,
							CATMathPlane imathPlaneProject,
							double iAxisX, double iAxisY,
							double iScale)
{
	if (ipiDftSheet == NULL || ilstSpecObj.size() == 0)
	{
		return NULL_var;
	}
	//CATILinkableObject_var spiLinkObj = ispiProduct;
	////HRESULT rc = ispiProduct->QueryInterface(IID_CATILinkableObject,(void**)piLinkObj);
	//if (spiLinkObj== NULL_var)
	//{
	//	return NULL_var;
	//}
	////激活sheet页的mainview
	//CATIDftView *piDftViewMain = NULL;
	//HRESULT rc = ipiDftSheet->GetMainView(&piDftViewMain);
	//if (FAILED(rc) || piDftViewMain == NULL)
	//{
	//	return NULL_var;
	//}
	//rc = ipiDftSheet->SetDefaultActiveView(piDftViewMain);
	//if (FAILED(rc))
	//{
	//	return NULL_var;
	//}
	//
	CATIDftDrawing *pDftDrawing = NULL;
	HRESULT rc = ipiDftSheet->GetDrawing(&pDftDrawing);
	if(FAILED(rc) || pDftDrawing==NULL)
	{
		cout<<"# Failed to GetDrawing."<<endl;
		return NULL_var;
	}
	CATISpecObject *piSpecObj=NULL;
	rc=pDftDrawing->QueryInterface(IID_CATISpecObject,(void **)&piSpecObj);
	if (FAILED(rc) || piSpecObj == NULL)
	{
		cout<<"# Get Drafting Drawing Error"<<endl;
		return NULL_var;
	}
	CATIContainer_var spDrwCont=piSpecObj->GetFeatContainer();
	piSpecObj->Release();
	piSpecObj=NULL;
	if (spDrwCont==NULL_var)
	{
		cout<<"# Get Container failed"<<endl;
		return NULL_var;
	}

	CATIDrwFactory_var spDrwFact=spDrwCont;
	if (spDrwFact==NULL_var)
	{
		cout<<"get the spDrwCont failed!"<<endl;
		return NULL_var;
	}

	CATIDftViewMakeUp *piViewMU=NULL;
	rc=spDrwFact->CreateViewWithMakeUp(IID_CATIDftViewMakeUp,(void **)&piViewMU);
	if (FAILED(rc)||piViewMU==NULL)
	{
		cout<<"create view with make up error!"<<endl;
		//piViewMU->Release();
		//piViewMU=NULL;
		ipiDftSheet->Release();
		ipiDftSheet=NULL;
		return NULL_var;
	}

	CATIView *piView=NULL;
	rc=piViewMU->GetView(&piView);
	if (FAILED(rc)||piView==NULL)
	{
		cout<<"get view failed!"<<endl;
		return NULL_var;
	}

	//设置视图类型和链接
	piView->SetViewType(FrontView);
	for (int i=0; i < ilstSpecObj.size(); i++)
	{
		CATILinkableObject_var spiLinkObj = ilstSpecObj[i];
		//HRESULT rc = ispiProduct->QueryInterface(IID_CATILinkableObject,(void**)piLinkObj);
		if (spiLinkObj== NULL_var)
		{
			continue;;
		}
		piView->SetDoc(spiLinkObj);
	}

	//设置投影面
	//CATMathPoint mathPoint1(1,0,0);
	//CATMathPoint mathPoint2(0,1,0);
	//CATMathPoint mathPoint3(0,0,1);
	//CATMathPlane mathProPlane(mathPoint1,mathPoint2,mathPoint3);
	CATMathPlane mathProPlane = imathPlaneProject;
	CATIGenerSpec_var spiGenerSpec = piView->GetGenerSpec();
	if (spiGenerSpec == NULL_var)
	{
		return NULL_var;
	}
	spiGenerSpec->SetProjPlane(mathProPlane);

	//把View加入Sheet中-----之后必须马上先update!!!
	ipiDftSheet->AddView(piViewMU);
	CATIView_var spiView = piView;
	CATISpecObject_var(spiView)->Update();

	//设置View放置位置以及比例等，试验下来必须先设置比例，然后更新视图，然后再设置其他的地方
	piViewMU->SetScale(iScale);
	CATISpecObject_var(spiView)->Update();
	piViewMU->SetAxisData(iAxisX,iAxisY);
	piViewMU->SetFrameVisibility(TRUE);
	piViewMU->SetAxisVisibility(FALSE);

	piViewMU->Release();
	piViewMU = NULL;

	//
	CATIDftView *piDftView = NULL;
	rc = piView->QueryInterface(IID_CATIDftView,(void **)&piDftView);
	if(FAILED(rc) || piDftView == NULL)
	{
		cout<<"Failed to QI to CATIDftView."<<endl;
		return NULL_var;
	}
	//wchar_t *wcharViewName = L"Detail AAA";
	//opDftView->SetViewName(wcharViewName);
	ipiDftSheet->SetDefaultActiveView(piDftView);
	piDftView->Release();
	piDftView=NULL;

	//CATIView_var spiView = piView;
	CATISpecObject_var(spiView)->Update();

	return spiView;
}

//描述：根据View的名称在指定页获取视图
//输入：CATIDftSheet CATUnicodeString
//输出：CATIView
//返回：CATBoolean
CATIView_var TJMWheelHouseDraftGeneralClass::GetViewFromName(CATIDftSheet* ipDftSheet,CATUnicodeString istrName)
{
	if (ipDftSheet==NULL) return NULL_var;
	CATIView_var ospiView = NULL_var;
	CATISheet * piSheet=NULL;
	HRESULT rc=ipDftSheet->QueryInterface(IID_CATISheet,(void**)&piSheet);
	if (SUCCEEDED(rc)&&NULL!=piSheet)
	{
		cout<<"Sheet : "<<CATIAlias_var(piSheet)->GetAlias()<<endl;

		CATLISTV(CATISpecObject_var) ViewList = piSheet->GetViewList();
		for (int i=1;i<=ViewList.Size();i++)
		{
			CATIView_var spView = ViewList[i];
			if (NULL_var != spView)
			{
				CATUnicodeString strViewName = CATIAlias_var(spView)->GetAlias();
				//cout<<i<<" "<<strViewName<<endl;
				if (strViewName == istrName)
				{
					ospiView = spView;
					break;
				}
			}
		}
		piSheet->Release();
		piSheet = NULL;
	}
	//
	return ospiView;
}

//描述：获取图纸的所有Sheet
//输入：CATDocument文档
//输出：vector<CATIDftSheet>
//返回：HRESULT
CATIDftSheet* TJMWheelHouseDraftGeneralClass::GetSheetFromName(CATDocument * pDftDoc, CATUnicodeString istrSheetName)
{
	HRESULT rc = S_OK;

	if (pDftDoc == NULL)
	{
		return NULL;
	}

	CATIDftDocumentServices *piDftDocServices = NULL;
	rc = pDftDoc->QueryInterface(IID_CATIDftDocumentServices, (void **)&piDftDocServices);
	if (FAILED(rc) || piDftDocServices==NULL)
	{
		return NULL;
	}

	CATIDftDrawing *piDftDrawing = NULL;
	rc=piDftDocServices->GetDrawing(IID_CATIDftDrawing, (void **)&piDftDrawing);      
	piDftDocServices->Release();
	piDftDocServices=NULL;
	if (FAILED(rc) || piDftDrawing==NULL) 
	{
		return NULL;
	}

	CATIUnknownList* pListOfSheet = NULL;
	rc = piDftDrawing->GetSheets(&pListOfSheet);
	if (FAILED(rc) || pListOfSheet == NULL)
	{
		return NULL;
	}

	CATIDftSheet *opiDftSheet = NULL;
	IUnknown* pItem = NULL;
	unsigned int nbSheet = 0;
	pListOfSheet->Count(&nbSheet);
	for(unsigned int i = 0;i < nbSheet;i++)
	{
		rc = pListOfSheet->Item(i,&pItem);
		if(SUCCEEDED(rc) && pItem != NULL)
		{
			CATIDftSheet * piDftSheet=NULL;
			rc = pItem->QueryInterface(IID_CATIDftSheet,(void**)&piDftSheet);
			if (SUCCEEDED(rc) && piDftSheet != NULL)
			{
				CATISheet *piSheet = NULL;
				rc = piDftSheet->QueryInterface(IID_CATISheet,(void**)&piSheet);
				if (SUCCEEDED(rc) && piSheet != NULL)
				{
					cout<<CATIAlias_var(piSheet)->GetAlias()<<endl;
					CATUnicodeString strSheetName = CATIAlias_var(piSheet)->GetAlias();
					if (strSheetName==istrSheetName)
					{
						opiDftSheet = piDftSheet;
						break;
					}
				}
				//该处指针不能释放
				//piDftSheet->Release();
				//piDftSheet=NULL;
			}
		}
	}
	return opiDftSheet;
}

//描述：显示/隐藏视图坐标系
//输入：CATISpecObject对象，CATBoolean显示/隐藏
//输出：void
//返回：void
HRESULT TJMWheelHouseDraftGeneralClass::HideViewAxisObject(CATIView_var ispiView,CATBoolean bShown)
{
	HRESULT rc = S_OK;
	//激活View
	//CATIDftView *piDftView=NULL;
	//rc=ispiView->QueryInterface(IID_CATIDftView,(void**)&piDftView);
	//if(FAILED(rc)||piDftView==NULL) 
	//{
	//	return E_FAIL;
	//}
	//piDftView->Activate();
	//
	CATIDescendants_var spiDesc = ispiView;
	if (spiDesc == NULL_var)
	{
		return E_FAIL;
	}
	CATLISTV(CATISpecObject_var) lstSpecObj = NULL;
	spiDesc->GetAllChildren("CATI2DAxis",lstSpecObj);
	if (lstSpecObj.Size() == 0)
	{
		return E_FAIL;
	}
	CATI2DAxis_var spi2DAxis = lstSpecObj[1];
	if (spi2DAxis == NULL_var)
	{
		return E_FAIL;
	}
	CATISpecObject_var spiSpecHdir = spi2DAxis->GetHDirection();
	CATISpecObject_var spiSpecVdir = spi2DAxis->GetVDirection();
	CATISpecObject_var spiSpecOrigin = spi2DAxis->GetOriginPoint();
	//
	HideSpecObject(spiSpecHdir,bShown);
	HideSpecObject(spiSpecVdir,bShown);
	HideSpecObject(spiSpecOrigin,bShown);

	return rc;
}

//描述：显示/隐藏对象
//输入：CATISpecObject对象，CATBoolean
//输出：void
//返回：void
void TJMWheelHouseDraftGeneralClass::HideSpecObject(CATISpecObject_var spSpec,CATBoolean bShown)
{
	HRESULT rc=S_OK;

	if(spSpec!=NULL_var)
	{
		CATIVisProperties* piVisProp=NULL;
		CATVisPropertiesValues ioValues;
		CATShowAttribut oShow;
		if(bShown)
		{
			oShow=CATShowAttr;
		}
		else
		{
			oShow=CATNoShowAttr;
		}
		ioValues.SetShowAttr(oShow);
		if(SUCCEEDED(spSpec->QueryInterface(IID_CATIVisProperties,(void**)&piVisProp)))
		{
			rc=piVisProp->SetPropertiesAtt(ioValues,CATVPShow,CATVPGlobalType);
			piVisProp->Release();
			piVisProp=NULL;
		}
		CATIModelEvents_var spEvents = spSpec;
		if (NULL_var != spEvents)
		{
			CATModifyVisProperties ModifyNotification(spSpec, NULL, CATVPGlobalType, CATVPShow, ioValues); 
			spEvents->Dispatch(ModifyNotification);
		}
	}
}

//描述：创建标注
//输入：CATIDrwAnnotationFactory对象，CATISpecObject标注对象1，CATISpecObject标注对象2，CATDrwDimType标注类型，CATDrwDimRepresentation，CATMathPoint2D定位点1，CATMathPoint2D定位点2，
//输出：CATIDrwDimDimension
//返回：CATBoolean
CATBoolean TJMWheelHouseDraftGeneralClass::Create2DDrwDimension(CATIDrwAnnotationFactory_var spAnnFact,
								CATISpecObject_var spSpecOn2DElem1,
								CATISpecObject_var spSpecOn2DElem2,
								CATDrwDimType dimType,
								CATDrwDimRepresentation dimRep,
								CATMathPoint2D iMathAnchorPt1,
								CATMathPoint2D iMathAnchorPt2,
								CATIDrwDimDimension_var &spiDim)
{
	HRESULT rc=S_OK;

	//创建尺寸
	CATIUnknownList * piSelectionsList =NULL;
	CATIUnknownListImpl * piListsel = new CATIUnknownListImpl();
	piSelectionsList = (CATIUnknownList *)piListsel;
	//piListsel->QueryInterface(IID_CATIUnknownList, (void **) &piSelectionsList);
	//piListsel->Release();
	//piListsel=NULL;

	IUnknown * piUI1 = NULL;
	IUnknown * piUI2 = NULL;
	double iPosition1[2];
	double iPosition2[2];
	double  * pts[4];

	CATIDrwDimDimension* piDim=NULL;
	CATDimDefinition dimDef;
	dimDef.Orientation = dimRep;
	dimDef.OrientationReference = ParallelDim;

	if(spSpecOn2DElem1!=NULL_var&&spSpecOn2DElem2!=NULL_var)
	{
		rc=spSpecOn2DElem1->QueryInterface(IID_IUnknown, (void **)&piUI1);
		piSelectionsList->Add(0, piUI1);
		iPosition1[0]=iMathAnchorPt1.GetX();
		iPosition1[1]=iMathAnchorPt1.GetY();
		rc=spSpecOn2DElem2->QueryInterface(IID_IUnknown, (void **)&piUI2);
		piSelectionsList->Add(1, piUI2);
		iPosition2[0]=iMathAnchorPt2.GetX();
		iPosition2[1]=iMathAnchorPt2.GetY();
		pts[0] = iPosition1;
		pts[1] = iPosition1+1;
		pts[2] = iPosition2;
		pts[3] = iPosition2+1;

		rc=spAnnFact->CreateDimension(piSelectionsList,pts,dimType,&dimDef,&piDim);

	}
	else if(spSpecOn2DElem1!=NULL_var)
	{
		rc=spSpecOn2DElem1->QueryInterface(IID_IUnknown, (void **)&piUI1);
		piSelectionsList->Add(0, piUI1);
		iPosition1[0]=iMathAnchorPt1.GetX();
		iPosition1[1]=iMathAnchorPt1.GetY();
		pts[0] = iPosition1;
		pts[1] = iPosition1+1;
		rc=spAnnFact->CreateDimension(piSelectionsList,pts,dimType,&dimDef,&piDim);
	}
	spiDim=piDim;
	if(piDim!=NULL)
	{
		piDim->Release();
		piDim=NULL;
	}
	return TRUE;
}

//描述：删除ViewMakeUp
//输入：CATIView_var
//输出：
//返回：HRESULT
HRESULT TJMWheelHouseDraftGeneralClass::DeleteViewMakeUp(CATIView_var ispiView)
{
	HRESULT rc = S_OK;
	CATIDftView *piDftView=NULL;
	rc=ispiView->QueryInterface(IID_CATIDftView,(void**)&piDftView);
	if(FAILED(rc)||piDftView==NULL) 
	{
		return E_FAIL;
	}
	piDftView->Activate();
	//
	CATISheet_var spiSheet = NULL_var;
	spiSheet = ispiView->GetSheet();
	if(NULL_var == spiSheet)
	{
		return E_FAIL;
	}
	CATIDftViewMakeUp *piDftViewMU = NULL;
	spiSheet->GetCurrentViewMakeUp(&piDftViewMU);
	//
	CATISpecObject_var spiSpecOnSheet = spiSheet;
	if (spiSpecOnSheet != NULL_var)
	{
		spiSpecOnSheet->Remove(piDftViewMU);
	}
	return rc;
}



//描述：创建2D点
//输入：CATI2DWFFactory对象，CATMathPoint2D数学点
//输出：CATISpecObject对象
//返回：CATBoolean
CATBoolean TJMWheelHouseDraftGeneralClass::Create2DDrwPoint(CATI2DWFFactory_var sp2DWFFact,
							CATMathPoint2D iMathPt,
							CATISpecObject_var &spSpecOnPoint2D)
{
	double Pt[2];
	Pt[0]=iMathPt.GetX();
	Pt[1]=iMathPt.GetY();

	//创建二维点
	spSpecOnPoint2D=sp2DWFFact->CreatePoint(Pt);
	if(spSpecOnPoint2D==NULL_var)
	{
		cout<<"# Create 2D Point Error On Drawing"<<endl;
		return FALSE;
	}
	spSpecOnPoint2D->Update();
	//ObjectUpdate(spSpecOnPoint2D); 
	return TRUE;
}

//描述：创建2DLine
//输入：CATI2DWFFactory对象，CATMathPoint2D起始点，CATMathPoint2D终止点
//输出：CATISpecObject对象
//返回：CATBoolean
CATBoolean TJMWheelHouseDraftGeneralClass::Create2DDrwLine(CATI2DWFFactory_var sp2DWFFact,
						   CATMathPoint2D iMathStartPt,
						   CATMathPoint2D iMathEndPt,
						   CATISpecObject_var &spSpecOnLine2D)
{
	double PtFirst[2];
	double PtSecond[2];
	PtFirst[0]=iMathStartPt.GetX();
	PtFirst[1]=iMathStartPt.GetY();
	PtSecond[0]=iMathEndPt.GetX();
	PtSecond[1]=iMathEndPt.GetY();

	//创建二维线
	spSpecOnLine2D=sp2DWFFact->CreateLine(PtFirst,PtSecond);
	if(spSpecOnLine2D==NULL_var)
	{
		cout<<"# Create 2D Line Error On Drawing"<<endl;
		return FALSE;
	}

	spSpecOnLine2D->Update();

	//ObjectUpdate(spSpecOnLine2D);
	return TRUE;
}

//描述：检查2D对象是否存在
//输入：CATIView_var 需要检查的视图  CATUnicodeString 尺寸的别名 int 检查对象的类型
//输出：CATISpecObject_var  返回找到的对象
//返回：CATBoolean 
CATBoolean TJMWheelHouseDraftGeneralClass::Check2DObjectExist(CATIView_var ispView,CATUnicodeString istrName,int iMode,CATISpecObject_var &ospiDim)
{
	CATIAlias_var spAlias=NULL_var;

	CATIDescendants_var spiDesc=ispView;
	if(spiDesc!=NULL_var)
	{
		CATListValCATISpecObject_var LstOf2DDrwObject;

		switch( iMode ) 
		{
		case 0:
			spiDesc->GetAllChildren("CATIDrwDimDimension",LstOf2DDrwObject);		
			//cout<<"CATIDrwDimDimension LstOf2DDrwObject :"<<LstOf2DDrwObject.Size()<<endl;
			break;
		case 1:
			spiDesc->GetAllChildren("CATIDftText",LstOf2DDrwObject);		
			//cout<<"CATIDrwText LstOf2DDrwObject :"<<LstOf2DDrwObject.Size()<<endl;
			break;
		case 2:	
			spiDesc->GetAllChildren("CATIDftRough",LstOf2DDrwObject);		
			//cout<<"CATIDftRough LstOf2DDrwObject :"<<LstOf2DDrwObject.Size()<<endl;
			break;
		default:
			break;
		}

		for (int i=1;i<=LstOf2DDrwObject.Size();i++)
		{
			spAlias=LstOf2DDrwObject[i];	
			if (spAlias->GetAlias()==istrName)
			{
				ospiDim=LstOf2DDrwObject[i];
				cout<<istrName<<" exist"<<endl;
				return TRUE;
			}
		}
	}

	return FALSE;
}

//描述：获取指定SHEET的背景图纸
//输入：CATIDftSheet
//输出：CATIView
//返回：CATBoolean
CATBoolean TJMWheelHouseDraftGeneralClass::GetBackgroundViewOfSheet(CATIDftSheet* ipDftSheet,CATIView_var &ospView)
{
	if (ipDftSheet==NULL) return FALSE;

	//CATISheet * piSheet=NULL;
	//HRESULT rc=ipDftSheet->QueryInterface(IID_CATISheet,(void**)&piSheet);
	//if (SUCCEEDED(rc)&&NULL!=piSheet)
	//{
	//	cout<<"Sheet : "<<CATIAlias_var(piSheet)->GetAlias()<<endl;

	//	CATLISTV(CATISpecObject_var) ViewList = piSheet->GetViewList();
	//	for (int i=1;i<=ViewList.Size();i++)
	//	{
	//		CATIView_var spView = ViewList[i];
	//		if (NULL_var != spView)
	//		{
	//			CATUnicodeString strViewName = CATIAlias_var(spView)->GetAlias();
	//			//cout<<i<<" "<<strViewName<<endl;
	//			if (strViewName.SearchSubString("Background")>=0)
	//			{
	//				ospView = spView;
	//				break;
	//			}
	//		}
	//	}
	//	piSheet->Release();
	//	piSheet = NULL;
	//}
	CATIDftView *piDftBackgroundView = NULL;
	HRESULT rc = ipDftSheet->GetBackgroundView(&piDftBackgroundView);
	if (FAILED(rc) || piDftBackgroundView == NULL)
	{
		return FALSE;
	}
	CATIView *piView = NULL;
	rc = piDftBackgroundView->QueryInterface(IID_CATIView,(void**)&piView);
	if (FAILED(rc)||piView==NULL)
	{
		return FALSE;
	}
	//
	ospView = piView;
	return TRUE;
}

CATBoolean TJMWheelHouseDraftGeneralClass::SetTableCellString(CATIADrawingTable * pTable,
							  int iRowNum,
							  int iColNum,
							  double idbFontSize,
							  int iRed,
							  int iGreen,
							  int iBlue,
							  boolean  iBold ,
							  double  idbCharSpacing,
							  int iPos,
							  CATUnicodeString istrName)
{
	HRESULT rc=E_FAIL;

	const wchar_t* wchar_FontName = L"Monospac821 BT";

	CATUnicodeString strFontName;
	strFontName.BuildFromWChar(wchar_FontName);

	CATBSTR BSTR_FontName;
	strFontName.ConvertToBSTR(&BSTR_FontName);	

	CATBSTR BSTR_Name;
	istrName.ConvertToBSTR(&BSTR_Name);

	CATIADrawingText *pDrawingText=NULL;
	pTable->SetCellString(iRowNum,iColNum,BSTR_Name);
	pTable->GetCellObject(iRowNum,iColNum,pDrawingText);
	if (pDrawingText==NULL)
		return FALSE;

	pDrawingText->put_AnchorPosition(catMiddleCenter);

	if (iPos==1)
	{
		pTable->SetCellAlignment(iRowNum, iColNum, CatTableMiddleCenter);
	}
	else
	{
		pTable->SetCellAlignment(iRowNum, iColNum, CatTableMiddleLeft);
	}

	CATIDrwTextProperties *pTextProp = NULL;
	rc = pDrawingText->QueryInterface(IID_CATIDrwTextProperties, (void**)&pTextProp);
	if (FAILED(rc) || pTextProp == NULL)
	{
		cout << "failed to get pTextProp." << endl;
		return FALSE;
	}

	//rc =pTextProp->SetAnchorPoint(CATDrwMiddleCenter);//catMiddleCenter catMiddleLeft 
	rc =pTextProp->SetFontName(strFontName);
	rc =pTextProp->SetFontSize(idbFontSize);
	rc =pTextProp->SetCharacterSpacing(idbCharSpacing);
	rc =pTextProp->SetWrappingWidth(CATDrwWrappingOn, 0.0);
	rc =pTextProp->SetFontColor(iRed, iGreen, iBlue, 255);
	rc =pTextProp->SetBold(iBold);

	pTextProp->Refresh();

	pTextProp->Release();
	pTextProp = NULL;

	return TRUE;
}

//保留几位小数
double TJMWheelHouseDraftGeneralClass::SetRound(double data,int nPoint)
{
	int base=(int)pow(10.0,nPoint);

	double dAdd;
	if (data>=0)
	{
		dAdd=5.0/(base*10);
	}
	else
	{
		dAdd=-5.0/(base*10);
	}
	double dValue=( (double)( (int)( (data+dAdd)*base ) ) )/base;
	return dValue;
}

//获取多值参数的下拉值列表
HRESULT TJMWheelHouseDraftGeneralClass::GetValueFromPara(CATICkeParm_var ispPara,CATListOfCATUnicodeString& oListParaValue)
{
	HRESULT rc=E_FAIL;

	if (ispPara==NULL_var)
		return E_FAIL;

	CATIParmManipulator_var spParmManipulator = ispPara->CreateManipulator();
	//CATIParmManipulator_var spParmManipulator=spPara->Manipulator();
	if (spParmManipulator==NULL_var)
	{
		cout<<"not get CATIParmManipulator"<<endl;
		return E_FAIL;
	}

	int iRlt = spParmManipulator->HasMultipleValues();
	if (iRlt!=1)
	{
		CATIAlias_var spAlias=ispPara;
		CATUnicodeString strYFDatumName=spAlias->GetAlias();

		cout<<"not get HasMultipleValues:"<<strYFDatumName<<endl;
		//return E_FAIL;
	}

	CATListOfCATUnicodeString  ListParaValue;
	spParmManipulator->GetEnumerateValues(&ListParaValue);
	if (ListParaValue.Size()==0)
	{
		cout<<"not get GetEnumerateValues"<<endl;
		return E_FAIL;
	}

	oListParaValue=ListParaValue;
	return S_OK;
}

CATBoolean TJMWheelHouseDraftGeneralClass::GetCurrentActiveProduct(CATFrmEditor * ipEditor,CATIProduct_var &ospProduct)
{
	HRESULT rc=S_OK;

	CATPathElement pPath =ipEditor->GetUIActiveObject();

	CATIProduct *piProduct=NULL;
	rc = pPath.Search(IID_CATIProduct,(void **)&piProduct);

	//查找CATIProduct失败，可能当前打开文档为Part	
	if(piProduct==NULL)
	{
		CATIPrtPart *piPrtPart=NULL;
		rc = pPath.Search(IID_CATIPrtPart,(void **)&piPrtPart);
		if(piPrtPart==NULL)
			return NULL;

		CATISpecObject_var spProductObject=piPrtPart->GetProduct();
		if (spProductObject==NULL_var)
			return NULL;

		ospProduct=spProductObject;

	}
	else
		ospProduct=piProduct;

	return TRUE;
}

//在零件根目录下下创建PrtTool
HRESULT TJMWheelHouseDraftGeneralClass::CreateNewPrtTool(CATIProduct_var ispiProd,CATUnicodeString istrName,CATISpecObject_var &ospiSpecPrtTool)
{
	HRESULT rc = S_OK;
	if (ispiProd == NULL_var)
	{
		return E_FAIL;
	}
	CATIProduct_var spiProdRef = ispiProd->GetReferenceProduct();
	if (spiProdRef == NULL_var)
	{
		return E_FAIL;
	}
	CATILinkableObject *piLinkableObjOnChild = NULL;
	rc = spiProdRef->QueryInterface(IID_CATILinkableObject,(void**)&piLinkableObjOnChild);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATDocument *pDocOnChild = NULL;
	pDocOnChild = piLinkableObjOnChild->GetDocument();
	if (NULL == pDocOnChild)
	{
		return E_FAIL;
	}
	CATIContainerOfDocument_var spContOfDocOnChild = pDocOnChild;
	CATIContainer *piSpecContainerOnChild = NULL;
	rc = spContOfDocOnChild->GetSpecContainer(piSpecContainerOnChild);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATIPrtContainer *piPrtContainerOnChild = NULL;
	rc = piSpecContainerOnChild->QueryInterface(IID_CATIPrtContainer,(void**)&piPrtContainerOnChild);
	piSpecContainerOnChild->Release();
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATIPrtPart_var spPartOnChild = piPrtContainerOnChild->GetPart();
	piPrtContainerOnChild->Release();
	if (NULL_var == spPartOnChild)
	{
		return E_FAIL;
	}
	//
	CATIMechanicalRootFactory_var spMechRootFactory = piSpecContainerOnChild;
	if (spMechRootFactory == NULL_var)
	{
		return E_FAIL;
	}
	//
	CATISpecObject_var spiSpecPrtTool = spMechRootFactory->CreatePRTTool(istrName,spPartOnChild);
	if (spiSpecPrtTool == NULL_var)
	{
		return E_FAIL;
	}
	//
	spPartOnChild->SetCurrentFeature(spiSpecPrtTool);
	ospiSpecPrtTool = spiSpecPrtTool;
	return rc;
}

int TJMWheelHouseDraftGeneralClass::GetSurfacePositiveOrNegative(CATGeoFactory *ipGeoFact,CATTopData *ipTopData,CATBody_var ispBodySurface,
																CATMathPoint iPt,CATMathVector iDir,double idExtendDist)
{
	CATMathVector dirBase = iDir;
	dirBase.Normalize();
	//过点沿方向两端延伸做长直线
	double dExtend = idExtendDist;
	CATMathPoint pt1 = iPt + dirBase*dExtend;
	CATMathPoint pt2 = iPt - dirBase*dExtend;

	CATBody_var spBodyLine=NULL_var;
	if (FAILED(CreateTopLine(ipGeoFact,ipTopData,pt1,pt2,spBodyLine))||spBodyLine==NULL_var)
	{
		return -1;
	}

	//求出输入面与该直线的交点
	CATBody_var spBodyIntersect = NULL_var;
	spBodyIntersect = CreateTopIntersect(ipGeoFact,ipTopData,spBodyLine,ispBodySurface);
	if (spBodyIntersect==NULL_var)
	{
		return -1;
	}
	CATMathPoint ptIntersect;
	if (FAILED(GetMathPoint(spBodyIntersect,ptIntersect)))
	{
		return -1;
	}

	//用面切割直线
	CATHybSplit *pHybSplit = NULL;
	CATBody_var spBodySplit = NULL_var;
	CATTry
	{
		pHybSplit = CATCreateTopSplitWire(ipGeoFact,ipTopData,spBodyLine,ispBodySurface,POSITIVE_POSITIVE_SIDE);
		if (pHybSplit!=NULL)
		{
			pHybSplit->Run();
			spBodySplit = pHybSplit->GetResult();
		}

	}
	CATCatch(CATMfErrUpdate , pUpdateError)
	{
		if (NULL!=pHybSplit)
		{
			delete pHybSplit;
			pHybSplit=NULL;
		}
		return -1;
	}
	CATCatch(CATError , error)
	{
		if (NULL!=pHybSplit)
		{
			delete pHybSplit;
			pHybSplit=NULL;
		}

		CATReturnError(error);
		return -1;
	}
	CATEndTry;

	if (spBodySplit==NULL_var)
	{
		return -1;
	}

	CATLISTV(CATMathPoint) lstPts;
	GetMathPtFromBody(spBodySplit,lstPts);
	if (lstPts.Size()<1)
	{
		return -1;
	}

	//找出非交点的那个点
	CATMathPoint ptOuter;
	for (int i=1;i<=lstPts.Size();i++)
	{
		CATMathPoint pt = lstPts[i];
		double dDist = pt.DistanceTo(ptIntersect);
		if (dDist>0.01)
		{
			ptOuter = pt;
			break;
		}
	}
	//求该点与交点的方向和输入的方向的夹角
	CATMathVector dir = ptOuter-ptIntersect;
	dir.Normalize();
	CATAngle angleDir = dir.GetAngleTo(dirBase);
	dir = -1*dir;
	CATAngle angleDir2 = dir.GetAngleTo(dirBase);
	if (angleDir<angleDir2)
	{
		return 0;
	} 
	else
	{
		return 1;
	}
}

HRESULT TJMWheelHouseDraftGeneralClass::CreateTopLine(CATGeoFactory *ipGeoFact,CATTopData *ipTopData,
												  CATMathPoint iPt1,CATMathPoint iPt2,
												  CATBody_var &ospBodyLine)
{
	CATMathPoint pt1(iPt1);
	CATMathPoint pt2(iPt2);
	CATBody_var spBodyPt1 = CATCreateTopPointXYZ(ipGeoFact,ipTopData,pt1.GetX(),pt1.GetY(),pt1.GetZ());
	CATBody_var spBodyPt2 = CATCreateTopPointXYZ(ipGeoFact,ipTopData,pt2.GetX(),pt2.GetY(),pt2.GetZ());
	if (spBodyPt1==NULL_var||spBodyPt2==NULL_var)
	{
		return E_FAIL;
	}

	CATBody_var spBodyLine = CATCreateTopLineFromPoints(ipGeoFact,ipTopData,spBodyPt1,spBodyPt2);
	if (spBodyLine==NULL_var)
	{
		return E_FAIL;
	}

	ospBodyLine = spBodyLine;
	return S_OK;
}

HRESULT TJMWheelHouseDraftGeneralClass::CreateGSMOffsetPlane(CATIGSMFactory_var ispGSMFactory,
														 CATICkeParmFactory_var ispCkeFactory,
														 CATISpecObject_var ispSpecToOffset,
														 CATISpecObject_var ispInputParent,
														 double idOffset,
														 CATGSMOrientation  iOrientation,
														 CATISpecObject_var &ospiSpecOffsetPlane)
{
	HRESULT rc=E_FAIL;

	if (ispGSMFactory==NULL_var||ispCkeFactory==NULL_var||ispSpecToOffset==NULL_var||ispInputParent==NULL_var)
	{
		return E_FAIL;
	}

	CATICkeParm_var spParmOffset    = ispCkeFactory -> CreateLength("Distance",idOffset);
	if (spParmOffset==NULL_var)
	{
		return E_FAIL;
	}

	CATLISTV(CATISpecObject_var)  iListReferenceElems;
	iListReferenceElems.Append(ispSpecToOffset);

	//CATGSMOrientation  iOrientation=CATGSMSameOrientation;
	CATIGSMPlaneOffset_var spGSMPlaneOffset=ispGSMFactory->CreatePlane(ispSpecToOffset, spParmOffset, iOrientation);
	if (spGSMPlaneOffset==NULL_var)
	{
		return E_FAIL;
	}

	ospiSpecOffsetPlane=spGSMPlaneOffset;
	if (ospiSpecOffsetPlane==NULL_var)
	{
		cout<<"GSMCreatePlane Failed"<<endl;
		return E_FAIL;
	}

	int trytimes=1;
	if (IsObjectExistUpdateError(ospiSpecOffsetPlane,trytimes)==TRUE)
	{
		cout<<"CreateExtractSolide Try Update Failed"<<endl;
		//return E_FAIL;
	}

	CATIGSMProceduralView_var spProceduralView =NULL_var;
	spProceduralView = ospiSpecOffsetPlane;
	if (NULL_var != spProceduralView )
		spProceduralView->InsertInProceduralView(ispInputParent);

	return S_OK;
}

HRESULT TJMWheelHouseDraftGeneralClass::CreateGSMOffsetSurface(CATIGSMFactory_var ispGSMFactory,
															 CATICkeParmFactory_var ispCkeFactory,
															 CATISpecObject_var ispSpecToOffset,
															 CATISpecObject_var ispInputParent,
															 double idOffset,
															 CATBoolean ibInvert,
															 CATISpecObject_var &ospiSpecOffsetSurface)
{
	HRESULT rc=E_FAIL;

	if (ispGSMFactory==NULL_var||ispCkeFactory==NULL_var||ispSpecToOffset==NULL_var||ispInputParent==NULL_var)
	{
		return E_FAIL;
	}

	CATICkeParm_var spParmOffset    = ispCkeFactory -> CreateLength("Distance",idOffset);
	if (spParmOffset==NULL_var)
	{
		return E_FAIL;
	}

	CATIGSMOffset_var spGSMOffset=ispGSMFactory->CreateOffset(ispSpecToOffset, spParmOffset, ibInvert,FALSE);
	if (spGSMOffset==NULL_var)
	{
		return E_FAIL;
	}

	ospiSpecOffsetSurface=spGSMOffset;
	if (ospiSpecOffsetSurface==NULL_var)
	{
		cout<<"GSMCreatePlane Failed"<<endl;
		return E_FAIL;
	}

	int trytimes=1;
	if (IsObjectExistUpdateError(ospiSpecOffsetSurface,trytimes)==TRUE)
	{
		cout<<"CreateGSMOffsetSurface Try Update Failed"<<endl;
		return E_FAIL;
	}

	CATIGSMProceduralView_var spProceduralView =NULL_var;
	spProceduralView = ospiSpecOffsetSurface;
	if (NULL_var != spProceduralView )
		spProceduralView->InsertInProceduralView(ispInputParent);

	return S_OK;
}

BOOL TJMWheelHouseDraftGeneralClass::IsObjectExistUpdateError(CATISpecObject_var spObject,int &trytimes)
{
	if (spObject==NULL_var)
	{
		return FALSE;
	}

	if (trytimes>1)//说明更新出错，跳到上面来的
	{
		cout<<"Get Update Error"<<endl;
		return TRUE;
	}

	if (spObject->IsUpToDate()==FALSE)
	{
		trytimes++;

		CATTry
		{
			spObject->Update();
		}
		CATCatch(CATMfErrUpdate , pUpdateError)
		{
			//cout<< " Update Error: " << pUpdateError-> GetDiagnostic()<< endl;
			return TRUE;
		}
		CATCatch(CATError , pError)
		{
			//cout << " Error: " << (pError->GetMessageText())<< endl; 
			return TRUE;
		}
		CATEndTry;
	}

	return FALSE;
}

HRESULT TJMWheelHouseDraftGeneralClass::CreateBodyToAssemble(CATIAPart_var ispVBPart,
														 CATIAShapeFactory_var ispShapeFactory,
														 CATISpecObject_var ispSpecPrtTool,
														 CATISpecObject_var ispBodyToAssemble)
{
	if (ispVBPart==NULL_var||ispShapeFactory==NULL_var||ispSpecPrtTool==NULL_var||ispBodyToAssemble==NULL_var)
	{
		return E_FAIL;
	}

	CATIABody * ipBodyToAssemble=NULL;
	ispBodyToAssemble->QueryInterface(IID_CATIABody, (void **)&ipBodyToAssemble);
	if (ipBodyToAssemble==NULL)
	{
		return E_FAIL;
	}

	CATIAAssemble * pNewAssemble=NULL;
	ispShapeFactory->AddNewAssemble(ipBodyToAssemble, pNewAssemble);
	if (pNewAssemble==NULL)
	{
		cout<<"AddNewAssemble Failed"<<endl;
		return E_FAIL;
	}

	int trytimes=1;
	CATISpecObject_var spSpec=NULL_var;

	spSpec=NULL_var;
	pNewAssemble->QueryInterface(IID_CATISpecObject, (void **)&spSpec);
	if (spSpec==NULL_var)
	{
		cout<<"AddNewAssemble Failed"<<endl;
		return E_FAIL;
	}

	trytimes=1;
	if (IsObjectExistUpdateError(spSpec,trytimes)==TRUE)
	{
		cout<<"CreateBodyToAssemble Try Update Failed"<<endl;
		return E_FAIL;
	}

	trytimes=1;
	if (IsObjectExistUpdateError(ispSpecPrtTool,trytimes)==TRUE)
	{
		cout<<"CreateBodyToAssemble Try Update Failed"<<endl;
		return E_FAIL;
	}

	return S_OK;
}

HRESULT TJMWheelHouseDraftGeneralClass::CreatePrtSolidSplit(CATIPrtFactory_var ispiPrtFact,
														CATISpecObject_var ispiSpecCurrentFeature,
														CATISpecObject_var ispiSpecSplitSurface,
														int iSplitSide)
{
	CATPrtSplitType iSplitType;
	if (iSplitSide==0)
	{
		iSplitType = PositiveSide;
	} 
	else
	{
		iSplitType = NegativeSide;
	}
	CATISpecObject_var spiSpecSplit = ispiPrtFact->CreateSolidSplit(ispiSpecSplitSurface,iSplitType);
	if (spiSpecSplit==NULL_var)
	{
		return E_FAIL;
	}

	int trytimes=1;
	if (IsObjectExistUpdateError(ispiSpecCurrentFeature,trytimes)==TRUE)
	{
		cout<<"CreatePrtSolidSplit Try Update Failed"<<endl;
		return E_FAIL;
	}
	return S_OK;
}

HRESULT TJMWheelHouseDraftGeneralClass::CreateVBExtract(CATISpecObject_var ispSpecPart,
													CATISpecObject_var ispSpecToExtract,
													CATISpecObject_var ispInputParent,
													int iPropagation,
													CATISpecObject_var &ospExtractSpec)
{
	HRESULT rc=E_FAIL;

	//获得VBPart接口
	CATIAPart_var spVBPart = ispSpecPart;
	if (spVBPart==NULL_var)
	{
		cout<<"====> Get CATIAPart failed............"<<endl;
		return E_FAIL;
	}

	//获得工厂
	CATIAFactory  *pShapeFactory = NULL;
	spVBPart->get_ShapeFactory(pShapeFactory);
	if (pShapeFactory==NULL)
	{
		cout<<"====> get_ShapeFactory failed............"<<endl;
		return E_FAIL;
	}

	CATIAShapeFactory_var spShapeFactory = pShapeFactory;
	if (spShapeFactory==NULL_var)
	{
		cout<<"====> get CATIAShapeFactory_var failed............"<<endl;
		return E_FAIL;
	}

	CATIAFactory *pHybridShapeFactory=NULL;
	spVBPart->get_HybridShapeFactory(pHybridShapeFactory);
	if (pHybridShapeFactory==NULL)
	{
		cout<<"====> get_HybridShapeFactory failed............"<<endl;
		return E_FAIL;
	}

	CATIAHybridShapeFactory_var spHybridShapeFactory=pHybridShapeFactory;
	if (spHybridShapeFactory==NULL_var)
	{
		cout<<"====> get CATIAHybridShapeFactory_var failed............"<<endl;
		return E_FAIL;
	}

	if (ispSpecToExtract==NULL_var||ispInputParent==NULL_var)
	{
		return E_FAIL;
	}

	//_spPrtPart->SetCurrentFeature(ispInputParent);

	CATIABase *pBase = NULL;
	ispSpecToExtract->QueryInterface(IID_CATIABase, (void **)&pBase);
	if (pBase==NULL)
	{
		return E_FAIL;
	}

	CATIAReference *pReference = NULL;
	spVBPart->CreateReferenceFromObject(pBase,pReference);
	if(pReference==NULL)
	{
		cout<<"CreateReferenceFromObject Faield"<<endl;
		return E_FAIL;
	}

	////CreateReferenceFormBody(_spVBPart ,ispiSpecOpponent,  ispInputParent,  ispSpecToExtract, pReference);
	////if (pReference==NULL_var)
	////{
	////	cout<<"GetReferenceFormBody Faield"<<endl;
	////	return E_FAIL;
	////}

	CATIAHybridShapeExtract * pHybridShapeExtract=NULL;
	spHybridShapeFactory->AddNewExtract(pReference,pHybridShapeExtract);
	if(pHybridShapeExtract==NULL)
	{
		cout<<"AddNewExtract Failed"<<endl;
		return E_FAIL;
	}

	rc=pHybridShapeExtract->put_PropagationType(iPropagation);
	rc=pHybridShapeExtract->put_ComplementaryExtract(false);
	rc=pHybridShapeExtract->put_IsFederated(false);
	rc=pHybridShapeExtract->put_Elem(pReference);
	rc=pHybridShapeExtract->put_Support(pReference);

	//CATLISTV(CATISpecObject_var)  iListReferenceElems;
	//iListReferenceElems.Append(ispSpecToExtract);

	//CATIGSMExtractMulti_var spGSMExtractObject=ispGSMFactory->CreateExtractMulti( iListReferenceElems);
	////CATIGSMExtractSolide_var spGSMExtractObject=ispGSMFactory->CreateExtractSolide( ispSpecToExtract,  ExtractSolide_NoPropag);
	//if (spGSMExtractObject==NULL_var)
	//{
	//	cout<<"CreateExtractSolide Failed"<<endl;
	//	return E_FAIL;
	//}

	ospExtractSpec=pHybridShapeExtract;
	if (ospExtractSpec==NULL_var)
	{
		cout<<"CreateExtractSolide Failed"<<endl;
		return E_FAIL;
	}

	int trytimes=1;
	if (IsObjectExistUpdateError(ospExtractSpec,trytimes)==TRUE)
	{
		cout<<"CreateVBExtract Try Update Failed"<<endl;
		//return E_FAIL;
	}

	CATIGSMProceduralView_var spProceduralView =NULL_var;
	spProceduralView = ospExtractSpec;
	if (NULL_var != spProceduralView )
		spProceduralView->InsertInProceduralView(ispInputParent);

	return S_OK;
}

HRESULT TJMWheelHouseDraftGeneralClass::CreateVBExtract(CATIAPart_var ispiaPart,
														CATIAHybridShapeFactory_var ispiaHybridShapeFact,
														CATISpecObject_var ispSpecToExtract,
														CATISpecObject_var ispInputParent,
														int iPropagation,
														CATISpecObject_var &ospExtractSpec)
{
	HRESULT rc=E_FAIL;

	if (ispSpecToExtract==NULL_var)
	{
		return E_FAIL;
	}

	//获得VBPart接口
	CATIAPart_var spVBPart = ispiaPart;
	if (spVBPart==NULL_var)
	{
		cout<<"====> Get CATIAPart failed............"<<endl;
		return E_FAIL;
	}

	//获得工厂
	CATIAHybridShapeFactory_var spHybridShapeFactory=ispiaHybridShapeFact;
	if (spHybridShapeFactory==NULL_var)
	{
		cout<<"====> get CATIAHybridShapeFactory_var failed............"<<endl;
		return E_FAIL;
	}

	//_spPrtPart->SetCurrentFeature(ispInputParent);

	CATIABase *pBase = NULL;
	ispSpecToExtract->QueryInterface(IID_CATIABase, (void **)&pBase);
	if (pBase==NULL)
	{
		return E_FAIL;
	}

	CATIAReference *pReference = NULL;
	spVBPart->CreateReferenceFromObject(pBase,pReference);
	if(pReference==NULL)
	{
		cout<<"CreateReferenceFromObject Faield"<<endl;
		return E_FAIL;
	}

	CATIAHybridShapeExtract * pHybridShapeExtract=NULL;
	spHybridShapeFactory->AddNewExtract(pReference,pHybridShapeExtract);
	if(pHybridShapeExtract==NULL)
	{
		cout<<"AddNewExtract Failed"<<endl;
		return E_FAIL;
	}

	rc=pHybridShapeExtract->put_PropagationType(iPropagation);
	rc=pHybridShapeExtract->put_ComplementaryExtract(false);
	rc=pHybridShapeExtract->put_IsFederated(false);
	rc=pHybridShapeExtract->put_Elem(pReference);
	//rc=pHybridShapeExtract->put_Support(pReference);


	ospExtractSpec=pHybridShapeExtract;
	if (ospExtractSpec==NULL_var)
	{
		cout<<"CreateExtractSolide Failed"<<endl;
		return E_FAIL;
	}

	int trytimes=1;
	if (IsObjectExistUpdateError(ospExtractSpec,trytimes)==TRUE)
	{
		cout<<"CreateVBExtract Try Update Failed"<<endl;
		//return E_FAIL;
	}

	if (ispInputParent!=NULL_var)
	{
		CATIGSMProceduralView_var spProceduralView =NULL_var;
		spProceduralView = ospExtractSpec;
		if (NULL_var != spProceduralView )
		{
			spProceduralView->InsertInProceduralView(ispInputParent);
		}
	}

	return S_OK;
}

CATBoolean TJMWheelHouseDraftGeneralClass::ConvertToSupportSpec(CATBaseUnknown_var ispFeature,CATISpecObject_var &ospSpec)
{
	if (ispFeature==NULL_var)
		return FALSE;

	ospSpec=ispFeature;
	if (ospSpec==NULL_var)
	{
		CATIBRepAccess_var spBRepAccess=ispFeature;
		if (spBRepAccess==NULL_var)
			return FALSE;

		CATIFeaturize_var spFeaturize=spBRepAccess;
		if (spFeaturize==NULL_var)
			return FALSE;

		//ospSpec = spFeaturize->FeaturizeR(MfDuplicateFeature| MfPermanentBody|	MfInitialFeatureSupport | 	MfRelimitedFeaturization);//MfFunctionalFeaturization
		//ospSpec = spFeaturize->FeaturizeR(MfDuplicateFeature| MfPermanentBody|	MfLastFeatureSupport | 	MfRelimitedFeaturization);//MfFunctionalFeaturization
		//ospSpec = spFeaturize->FeaturizeR(MfTemporaryBody|MfSelectingFeatureSupport|MfNoDuplicateFeature);
		ospSpec = spFeaturize->FeaturizeR(MfPermanentBody|MfDefaultFeatureSupport |MfRelimitedFeaturization|MfDuplicateFeature);
		if (ospSpec == NULL_var) 
			return FALSE;
	}

	return TRUE;
}

HRESULT TJMWheelHouseDraftGeneralClass::CreateVBOffset(CATIAPart_var ispiaPart,
														CATIAHybridShapeFactory_var ispiaHybridShapeFact,
														CATISpecObject_var ispSpecToOffset,
														CATISpecObject_var ispInputParent,
														double idOffset,
														boolean iOrientation,
														CATISpecObject_var &ospOffsetSpec)
{
	HRESULT rc=E_FAIL;

	if (ispSpecToOffset==NULL_var)
	{
		return E_FAIL;
	}

	//获得VBPart接口
	CATIAPart_var spVBPart = ispiaPart;
	if (spVBPart==NULL_var)
	{
		cout<<"====> Get CATIAPart failed............"<<endl;
		return E_FAIL;
	}

	//获得工厂
	CATIAHybridShapeFactory_var spHybridShapeFactory=ispiaHybridShapeFact;
	if (spHybridShapeFactory==NULL_var)
	{
		cout<<"====> get CATIAHybridShapeFactory_var failed............"<<endl;
		return E_FAIL;
	}

	//_spPrtPart->SetCurrentFeature(ispInputParent);

	CATIABase *pBase = NULL;
	ispSpecToOffset->QueryInterface(IID_CATIABase, (void **)&pBase);
	if (pBase==NULL)
	{
		return E_FAIL;
	}

	CATIAReference *pReference = NULL;
	spVBPart->CreateReferenceFromObject(pBase,pReference);
	if(pReference==NULL)
	{
		cout<<"CreateReferenceFromObject Faield"<<endl;
		return E_FAIL;
	}

	CATIAHybridShapeOffset *piaHybridShapeOffset=NULL;
	spHybridShapeFactory->AddNewOffset(pReference,idOffset,iOrientation,0.001,piaHybridShapeOffset);
	if(piaHybridShapeOffset==NULL_var)
	{
		cout<<"AddNewOffset Failed"<<endl;
		return E_FAIL;
	}

	ospOffsetSpec=piaHybridShapeOffset;
	if (ospOffsetSpec==NULL_var)
	{
		cout<<"CreateExtractSolide Failed"<<endl;
		return E_FAIL;
	}

	int trytimes=1;
	if (IsObjectExistUpdateError(ospOffsetSpec,trytimes)==TRUE)
	{
		cout<<"CreateVBExtract Try Update Failed"<<endl;
		//return E_FAIL;
	}

	if (ispInputParent!=NULL_var)
	{
		CATIGSMProceduralView_var spProceduralView =NULL_var;
		spProceduralView = ospOffsetSpec;
		if (NULL_var != spProceduralView )
		{
			spProceduralView->InsertInProceduralView(ispInputParent);
		}
	}

	return S_OK;
}

HRESULT TJMWheelHouseDraftGeneralClass::CreateGSMHealing(CATIGSMFactory_var ispiGSMFact,
														 CATISpecObject_var ispiSpecGS,
														 CATISpecObject_var ispiSpecObj,
														 CATISpecObject_var &ospiSpecObjHealing)
{
	CATLISTV(CATISpecObject_var) lstSpecObj;
	lstSpecObj.Append(ispiSpecObj);
	CATIGSMHealing_var spiGSMHealing = ispiGSMFact->CreateHealing(lstSpecObj);
	CATISpecObject_var spiSpecResult=spiGSMHealing;
	if (spiSpecResult==NULL_var)
	{
		cout<<"====> CreateGSMHealing failed............"<<endl;
		return E_FAIL;
	}

	int trytimes=1;
	if (TJMWheelHouseDraftGeneralClass::IsObjectExistUpdateError(spiSpecResult,trytimes)==TRUE)
	{
		cout<<"CreateGSMHealing Try Update Failed"<<endl;
		return E_FAIL;
	}
	if (ispiSpecGS!=NULL_var)
	{
		CATIGSMProceduralView_var spProceduralView =NULL_var;
		spProceduralView = spiSpecResult;
		if (NULL_var != spProceduralView )
		{
			spProceduralView->InsertInProceduralView(ispiSpecGS);
		}
	}

	ospiSpecObjHealing = spiSpecResult;

	return S_OK;

}

HRESULT TJMWheelHouseDraftGeneralClass::MinDistanceBody(CATGeoFactory_var ispiGeoFactory,
														CATTopData iTopdata,
														CATBody_var ispSoildBody,
														CATBody_var ispPointBody,
														double &olength,
														CATBoolean &oissucess)							
{
	CATTry 
	{
		CATDistanceMinBodyBody*piMinDistanceBody=NULL;
		piMinDistanceBody= CATCreateDistanceMinTopo(ispiGeoFactory, &iTopdata, ispSoildBody,ispPointBody,ADVANCED) ;
		if (piMinDistanceBody==NULL)
		{
			cout<<"CATCGMCreateDistanceBodyBodyOp Failed"<<endl;
			return E_FAIL;
		}

		piMinDistanceBody->SetPointComputationMode(TRUE);
		piMinDistanceBody->Run();

		olength=piMinDistanceBody->GetDistance();

		//CATPoint* oPoint1=NULL;
		//CATPoint* oPoint2=NULL;
		//piMinDistanceBody->GetPoints(oPoint1, oPoint2); 
		//if (oPoint1!=NULL&&oPoint2!=NULL)
		//{
		//	oPoint1->GetMathPoint(oMathPoint1);
		//	oPoint2->GetMathPoint(oMathPoint2);
		//	
		//	oPoint1->Release();oPoint1=NULL;
		//	oPoint2->Release();oPoint2=NULL;
		//}

		if (piMinDistanceBody!=NULL)
		{
			delete piMinDistanceBody;
			piMinDistanceBody = NULL;
		}
	}
	CATCatch(CATError , pError)
	{
		oissucess=FALSE;
		return E_FAIL;
	}
	CATEndTry

		oissucess=TRUE;
	return S_OK;
}