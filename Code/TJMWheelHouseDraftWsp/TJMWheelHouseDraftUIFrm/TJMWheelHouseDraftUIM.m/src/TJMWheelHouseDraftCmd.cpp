// COPYRIGHT Dassault Systemes 2021
//===================================================================
//
// TJMWheelHouseDraftCmd.cpp
// The state chart based command: TJMWheelHouseDraftCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jan 2021  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TJMWheelHouseDraftCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TJMWheelHouseDraftCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TJMWheelHouseDraftCmd::TJMWheelHouseDraftCmd() :
  CATStateCommand ("TJMWheelHouseDraftCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,_pDlg(NULL)
,_pEditor(NULL)
,_pHSO(NULL)
,_pSketchAgent(NULL)
,_pLineAgent(NULL)
,_pSurfaceAgent(NULL)
,_pSketchFieldAgent(NULL)
,_pToolingDirFieldAgent(NULL)
,_pSurfaceFieldAgent(NULL)
,_intSelType(0)
{
	_pDlg = new TJMWheelHouseDraftDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pEditor=CATFrmEditor::GetCurrentEditor();
	if (NULL == _pEditor)
	{
		cout<<"GetCurrentEditor Failed"<<endl;
		RequestDelayedDestruction();
		return;
	}

	_pHSO=_pEditor->GetHSO();
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TJMWheelHouseDraftCmd::~TJMWheelHouseDraftCmd()
{
	if (_pDlg != NULL)
	{
		_pDlg->RequestDelayedDestruction();
		_pDlg = NULL;
	}

	if (_pLineAgent!=NULL)
	{
		_pLineAgent->RequestDelayedDestruction();
		_pLineAgent=NULL;
	}

	if (_pSketchAgent!=NULL)
	{
		_pSketchAgent->RequestDelayedDestruction();
		_pSketchAgent=NULL;
	}

	if (_pSketchFieldAgent!=NULL)
	{
		_pSketchFieldAgent->RequestDelayedDestruction();
		_pSketchFieldAgent=NULL;
	}

	if (_pToolingDirFieldAgent!=NULL)
	{
		_pToolingDirFieldAgent->RequestDelayedDestruction();
		_pToolingDirFieldAgent=NULL;
	}

	if (_pSurfaceAgent!=NULL)
	{
		_pSurfaceAgent->RequestDelayedDestruction();
		_pSurfaceAgent=NULL;
	}

	if (_pSurfaceFieldAgent!=NULL)
	{
		_pSurfaceFieldAgent->RequestDelayedDestruction();
		_pSurfaceFieldAgent=NULL;
	}

	if (_pHSO!=NULL)
	{
		_pHSO->Empty();
		_pHSO = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TJMWheelHouseDraftCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&TJMWheelHouseDraftCmd::ActionCancelFunc,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&TJMWheelHouseDraftCmd::ActionCancelFunc,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&TJMWheelHouseDraftCmd::ActionCancelFunc,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&TJMWheelHouseDraftCmd::ActionOKFunc,
		NULL);

	//Sketch选择
	_pSketchAgent = new CATPathElementAgent("Select Sketch");
	_pSketchAgent->SetElementType("CATISketch");
	_pSketchAgent->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithCSO|CATDlgEngWithPSOHSO|CATDlgEngOneShot);

	//Line选择
	_pLineAgent = new CATPathElementAgent("Select Line");
	_pLineAgent->SetElementType("CATLine");
	_pLineAgent->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithCSO|CATDlgEngWithPSOHSO|CATDlgEngOneShot);

	//Surface选择
	_pSurfaceAgent = new CATPathElementAgent("Select Surface");
	_pSurfaceAgent->SetElementType("CATIMeasurableSurface");
	_pSurfaceAgent->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithCSO|CATDlgEngWithPSOHSO|CATDlgEngOneShot);
	CATAcquisitionFilter * pFilterSurface = Filter((FilterMethod) &TJMWheelHouseDraftCmd::CheckSelectedSurface,(void *)NULL);
	_pSurfaceAgent->SetFilter(pFilterSurface);

	_pSurfaceFieldAgent = new CATDialogAgent("Select A Surface Field");
	_pSurfaceFieldAgent->AcceptOnNotify(_pDlg->GetSelectorListFunc(0),
										_pDlg->GetSelectorListFunc(0)->GetListSelectNotification());
	
	_pSketchFieldAgent = new CATDialogAgent("Select A Sketch Field");
	_pSketchFieldAgent->AcceptOnNotify(_pDlg->GetSelectorListFunc(1),
										_pDlg->GetSelectorListFunc(1)->GetListSelectNotification());

	_pToolingDirFieldAgent = new CATDialogAgent("Select Tooling Dir Field");
	_pToolingDirFieldAgent->AcceptOnNotify(_pDlg->GetSelectorListFunc(2),
											_pDlg->GetSelectorListFunc(2)->GetListSelectNotification());


	CATDialogState *pSurfState = GetInitialState("Select WheelHouse Surface");
	pSurfState->AddDialogAgent(_pSurfaceAgent);
	pSurfState->AddDialogAgent(_pSurfaceFieldAgent);
	pSurfState->AddDialogAgent(_pToolingDirFieldAgent);
	pSurfState->AddDialogAgent(_pSketchFieldAgent);

	CATDialogState *pSketchState = AddDialogState("Select Hole Sketch");
	pSketchState->AddDialogAgent(_pSketchAgent);
	pSketchState->AddDialogAgent(_pSurfaceFieldAgent);
	pSketchState->AddDialogAgent(_pToolingDirFieldAgent);
	pSketchState->AddDialogAgent(_pSketchFieldAgent);

	CATDialogState *pToolingDirState = AddDialogState("Select Tooling Direction");
	pToolingDirState->AddDialogAgent(_pLineAgent);
	pToolingDirState->AddDialogAgent(_pSurfaceFieldAgent);
	pToolingDirState->AddDialogAgent(_pToolingDirFieldAgent);
	pToolingDirState->AddDialogAgent(_pSketchFieldAgent);


	//
	AddTransition(pSurfState,pSurfState,
		IsOutputSetCondition(_pSurfaceAgent),
		Action((ActionMethod)& TJMWheelHouseDraftCmd::SelectSurfaceFunc));

	AddTransition(pToolingDirState,pToolingDirState,
		IsOutputSetCondition(_pLineAgent),
		Action((ActionMethod)& TJMWheelHouseDraftCmd::SelectLineFunc));

	AddTransition(pSketchState,pSketchState,
		IsOutputSetCondition(_pSketchAgent),
		Action((ActionMethod)& TJMWheelHouseDraftCmd::SelectSketchFunc));

	//---> Surface
	AddTransition(pSurfState,pSurfState,
		IsOutputSetCondition(_pSurfaceFieldAgent),
		Action((ActionMethod)& TJMWheelHouseDraftCmd::TransToSurfFunc));

	AddTransition(pToolingDirState,pSurfState,
		IsOutputSetCondition(_pSurfaceFieldAgent),
		Action((ActionMethod)& TJMWheelHouseDraftCmd::TransToSurfFunc));

	AddTransition(pSketchState,pSurfState,
		IsOutputSetCondition(_pASurfaceFieldAgent),
		Action((ActionMethod)& TJMWheelHouseDraftCmd::TransToSurfFunc));


	//--->Tooling Direction
	AddTransition(pSurfState,pToolingDirState,
		IsOutputSetCondition(_pToolingDirFieldAgent),
		Action((ActionMethod)& TJMWheelHouseDraftCmd::TransToToolingDirFunc));

	AddTransition(pToolingDirState,pToolingDirState,
		IsOutputSetCondition(_pToolingDirFieldAgent),
		Action((ActionMethod)& TJMWheelHouseDraftCmd::TransToToolingDirFunc));

	AddTransition(pSketchState,pToolingDirState,
		IsOutputSetCondition(_pToolingDirFieldAgent),
		Action((ActionMethod)& TJMWheelHouseDraftCmd::TransToToolingDirFunc));


	//--->Opponent Doc
	AddTransition(pSurfState,pSketchState,
		IsOutputSetCondition(_pSketchFieldAgent),
		Action((ActionMethod)& TJMWheelHouseDraftCmd::TransToSketchFunc));

	AddTransition(pToolingDirState,pSketchState,
		IsOutputSetCondition(_pSketchFieldAgent),
		Action((ActionMethod)& TJMWheelHouseDraftCmd::TransToSketchFunc));

	AddTransition(pSketchState,pSketchState,
		IsOutputSetCondition(_pSketchFieldAgent),
		Action((ActionMethod)& TJMWheelHouseDraftCmd::TransToSketchFunc));

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TJMWheelHouseDraftCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

//************************************
// Method:    ActionCancelFunc
// FullName:  ActionCancelFunc
// Access:    public 
// Returns:   CATBoolean
// Qualifier: cancel动作
// Parameter: void *data
//************************************
CATBoolean TJMWheelHouseDraftCmd::ActionCancelFunc(void * data)
{
	RequestDelayedDestruction();
	return TRUE;
}

//************************************
// Method:    ActionOKFunc
// FullName:  ActionOKFunc
// Access:    public 
// Returns:   CATBoolean
// Qualifier: ok动作
// Parameter: void *data
//************************************
CATBoolean TJMWheelHouseDraftCmd::ActionOKFunc(void * data)
{
	RequestDelayedDestruction();
	return TRUE;
}

//************************************
// Method:    SelectSurfaceFunc
// FullName:  YFCNSLRearPanelFixStrcCmd::SelectSurfaceFunc
// Access:    public 
// Returns:   void
// Qualifier: 选择曲面
// Parameter: void *data
//************************************
void TJMWheelHouseDraftCmd::SelectSurfaceFunc(void * data)
{
	if (_pHSO!=NULL)	_pHSO->Empty();
	//if (_pISO!=NULL)	_pISO->Empty();

	CATBaseUnknown_var spBUSelect = NULL_var;
	CATIProduct_var spiProdSelect = NULL_var;
	CATISpecObject_var spiSpecSelect = NULL_var;
	//STTGeneralCls::TransferSelect(_pSurfaceAgent,spBUSelect,spiProdSelect);
	TJMWheelHouseDraftGeneralClass::TransferSelectToSpecObjOnTree(_pSurfaceAgent,spiSpecSelect,spiProdSelect);
	if (spiSpecSelect == NULL_var || spiProdSelect == NULL_var)
	{
		_pSurfaceAgent->InitializeAcquisition();
		return;
	}

	if (_intSelType==0)
	{
		_spBUSurface = spiSpecSelect;

		_pDlg->GetSelectorListFunc(0)->ClearLine();
		CATUnicodeString strAlias = TJMWheelHouseDraftGeneralClass::GetNameFromBaseUnknownFunc(spiSpecSelect);
		_pDlg->GetSelectorListFunc(0)->SetLine(strAlias,-1,CATDlgDataAdd);
		int iTabRow = 0;
		_pDlg->GetSelectorListFunc(0)->SetSelect(&iTabRow,1);
	}

	_pSurfaceAgent->InitializeAcquisition();
}

//************************************
// Method:    SelectLineFunc
// FullName:  YFCNSLRearPanelFixStrcCmd::SelectLineFunc
// Access:    public 
// Returns:   void
// Qualifier: 选择直线
// Parameter: void *data
//************************************
void TJMWheelHouseDraftCmd::SelectLineFunc(void * data)
{
	if (_pHSO!=NULL)	_pHSO->Empty();
	//if (_pISO!=NULL)	_pISO->Empty();

	CATBaseUnknown_var spBUSelect = NULL_var;
	CATIProduct_var spiProdSelect = NULL_var;
	TJMWheelHouseDraftGeneralClass::TransferSelectToBU(_pLineAgent,spBUSelect,spiProdSelect);
	if (spBUSelect == NULL_var || spiProdSelect == NULL_var)
	{
		_pLineAgent->InitializeAcquisition();
		return;
	}

	if (_intSelType==2)
	{
		_spBUToolingDir = spBUSelect;

		_pDlg->GetSelectorListFunc(2)->ClearLine();
		CATUnicodeString strAlias = TJMWheelHouseDraftGeneralClass::GetNameFromBaseUnknownFunc(spBUSelect);
		_pDlg->GetSelectorListFunc(2)->SetLine(strAlias,-1,CATDlgDataAdd);
		int iTabRow = 0;
		_pDlg->GetSelectorListFunc(2)->SetSelect(&iTabRow,1);
	}

	_pLineAgent->InitializeAcquisition();
}