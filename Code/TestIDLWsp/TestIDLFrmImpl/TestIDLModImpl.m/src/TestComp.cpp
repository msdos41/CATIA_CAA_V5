//===================================================================
// COPYRIGHT MUSIC 2021/05/21
//===================================================================
// TestComp.cpp
// Header definition of class TestComp
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/05/21 Creation: Code generated by the 3DS wizard
//===================================================================

#include "TestComp.h"
#include <iostream>
#include "CATIAApplication.h"

CATImplementClass(TestComp,Implementation,CATBaseUnknown,CATNull);

#include "TIE_CATIVBExtension.h"
TIE_CATIVBExtension(TestComp);


//-----------------------------------------------------------------------------
// TestComp : constructor
//-----------------------------------------------------------------------------
TestComp::TestComp():CATBaseUnknown()
{
//
//TODO: Add the constructor code here
//
}

//-----------------------------------------------------------------------------
// TestComp : destructor
//-----------------------------------------------------------------------------
TestComp::~TestComp()
{
//
// TODO: Place code here.
//
}

//-----------------------------------------------------------------------------
// Implements CATIVBExtension::GetObjects
//-----------------------------------------------------------------------------
HRESULT TestComp::GetObjects (CATBaseUnknown *  iGetItemTarget , CATBaseDispatch *&  oGetItemResult) const
{
	std::cout  << "TestComp::GetObjects" << std::endl;

	HRESULT rc = S_OK;
	if (NULL == iGetItemTarget) {
		return rc;
	}
	// Testing
	CATIAApplication * piApplication = NULL;
	HRESULT hr3 = iGetItemTarget-> QueryInterface (IID_CATIAApplication,
		(void **) & piApplication);
	if (SUCCEEDED (hr3) && NULL!= piApplication) {
		// Get from product
		HRESULT hr4 = piApplication-> QueryInterface (IID_CATBaseDispatch,
			(void **) & oGetItemResult);
		if (SUCCEEDED (hr4) && NULL!= oGetItemResult) {
			rc = S_OK;
		}
		piApplication-> Release ();
		piApplication = NULL;
	}
	return S_OK;
	throw std::exception("Method not implemented.");
}








