// COPYRIGHT Dassault Systemes 2020
//===================================================================
//
// TstEPoint.h
// Provide implementation to interface
//    TstIPoint

//
//===================================================================
//
// Usage notes:
//
//===================================================================
//CAA2 Wizard Generation Report
//EXTENSION:	TestExtendPt
//EXTENSIONTYPE:	DataExtension

//    TIE: TstIPoint

//End CAA2 Wizard Generation Report
//
//  Apr 2020  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#ifndef TstEPoint_H
#define TstEPoint_H

#include "CATBaseUnknown.h"

#include "CATISpecAttrAccess.h"
#include "CATISpecAttrKey.h"

//-----------------------------------------------------------------------

/**
* Class representing xxx.
*
* <br><b>Role</b>: Provide the basic class function...
* <p>
* It implements the interfaces :
*  <ol>
*  <li>@href TstIPoint
*  </ol>
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class TstEPoint: public CATBaseUnknown

{
  CATDeclareClass;

  public:

  // Standard constructors and destructors for an implementation class
  // -----------------------------------------------------------------
     TstEPoint ();
     virtual ~TstEPoint ();

    /**
     * Implements a function from an interface.
     * @href TstIPoint#GetX
     */
     HRESULT GetX (double & oX ) ;

    /**
     * Implements a function from an interface.
     * @href TstIPoint#SetX
     */
     HRESULT SetX (double  iX ) ;

    /**
     * Implements a function from an interface.
     * @href TstIPoint#GetY
     */
     HRESULT GetY (double & oY ) ;

    /**
     * Implements a function from an interface.
     * @href TstIPoint#SetY
     */
     HRESULT SetY (double  iY ) ;

    /**
     * Implements a function from an interface.
     * @href TstIPoint#GetZ
     */
     HRESULT GetZ (double & oZ ) ;

    /**
     * Implements a function from an interface.
     * @href TstIPoint#SetZ
     */
     HRESULT SetZ (double  iZ ) ;


  private:
  // The copy constructor and the equal operator must not be implemented
  // -------------------------------------------------------------------
  TstEPoint (TstEPoint &);
  TstEPoint& operator=(TstEPoint&);

};

//-----------------------------------------------------------------------

#endif
