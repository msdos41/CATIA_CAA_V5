// COPYRIGHT Dassault Systemes 2020
//===================================================================
//
// TstEPoint.cpp
// Provide implementation to interface
//    TstIPoint
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Apr 2020  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TstEPoint.h"
 
CATImplementClass(TstEPoint,
                  DataExtension,
                  CATBaseUnknown,
                  TestExtendPt );
 

//-----------------------------------------------------------------------------
// TstEPoint : constructor
//-----------------------------------------------------------------------------
TstEPoint::TstEPoint():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// TstEPoint : destructor
//-----------------------------------------------------------------------------
TstEPoint::~TstEPoint()
{
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_TstIPoint.h"
TIE_TstIPoint( TstEPoint);


//Methods implementation

//-----------------------------------------------------------------------------
// Implements TstIPoint::GetX
//-----------------------------------------------------------------------------
HRESULT TstEPoint::GetX (double & oX)
{
	//获取CATISpecAttrAccess变量
	CATISpecAttrAccess_var spiSpecAttrAccess(this);
	if (spiSpecAttrAccess==NULL_var)
	{
		return E_FAIL;
	}
	//获取CATISpecAttrKey变量
	CATISpecAttrKey *piSpecAttrKey = spiSpecAttrAccess->GetAttrKey("ptX");
	if (piSpecAttrKey==NULL)
	{
		return E_FAIL;
	}
	//获取参数值
	double retValue=spiSpecAttrAccess->GetDouble(piSpecAttrKey);
	piSpecAttrKey->Release();
	piSpecAttrKey=NULL;

	oX=retValue;
   return S_OK;
}

//-----------------------------------------------------------------------------
// Implements TstIPoint::SetX
//-----------------------------------------------------------------------------
HRESULT TstEPoint::SetX (double  iX)
{
	//获取CATISpecAttrAccess变量
	CATISpecAttrAccess_var spiSpecAttrAccess(this);
	if (spiSpecAttrAccess==NULL_var)
	{
		return E_FAIL;
	}
	//获取CATISpecAttrKey变量
	CATISpecAttrKey *piSpecAttrKey = spiSpecAttrAccess->GetAttrKey("ptX");
	if (piSpecAttrKey==NULL)
	{
		return E_FAIL;
	}
	//设置参数
	spiSpecAttrAccess->UnsetAttributeValue(piSpecAttrKey);
	spiSpecAttrAccess->SetDouble(piSpecAttrKey,iX);

	piSpecAttrKey->Release();
	piSpecAttrKey=NULL;
   return S_OK;
}

//-----------------------------------------------------------------------------
// Implements TstIPoint::GetY
//-----------------------------------------------------------------------------
HRESULT TstEPoint::GetY (double & oY)
{
	//获取CATISpecAttrAccess变量
	CATISpecAttrAccess_var spiSpecAttrAccess(this);
	if (spiSpecAttrAccess==NULL_var)
	{
		return E_FAIL;
	}
	//获取CATISpecAttrKey变量
	CATISpecAttrKey *piSpecAttrKey = spiSpecAttrAccess->GetAttrKey("ptY");
	if (piSpecAttrKey==NULL)
	{
		return E_FAIL;
	}
	//获取参数值
	double retValue=spiSpecAttrAccess->GetDouble(piSpecAttrKey);
	piSpecAttrKey->Release();
	piSpecAttrKey=NULL;

	oY=retValue;
   return S_OK;
}

//-----------------------------------------------------------------------------
// Implements TstIPoint::SetY
//-----------------------------------------------------------------------------
HRESULT TstEPoint::SetY (double  iY)
{
	//获取CATISpecAttrAccess变量
	CATISpecAttrAccess_var spiSpecAttrAccess(this);
	if (spiSpecAttrAccess==NULL_var)
	{
		return E_FAIL;
	}
	//获取CATISpecAttrKey变量
	CATISpecAttrKey *piSpecAttrKey = spiSpecAttrAccess->GetAttrKey("ptY");
	if (piSpecAttrKey==NULL)
	{
		return E_FAIL;
	}
	//设置参数
	spiSpecAttrAccess->UnsetAttributeValue(piSpecAttrKey);
	spiSpecAttrAccess->SetDouble(piSpecAttrKey,iY);

	piSpecAttrKey->Release();
	piSpecAttrKey=NULL;
   return S_OK;
}

//-----------------------------------------------------------------------------
// Implements TstIPoint::GetZ
//-----------------------------------------------------------------------------
HRESULT TstEPoint::GetZ (double & oZ)
{
	//获取CATISpecAttrAccess变量
	CATISpecAttrAccess_var spiSpecAttrAccess(this);
	if (spiSpecAttrAccess==NULL_var)
	{
		return E_FAIL;
	}
	//获取CATISpecAttrKey变量
	CATISpecAttrKey *piSpecAttrKey = spiSpecAttrAccess->GetAttrKey("ptZ");
	if (piSpecAttrKey==NULL)
	{
		return E_FAIL;
	}
	//获取参数值
	double retValue=spiSpecAttrAccess->GetDouble(piSpecAttrKey);
	piSpecAttrKey->Release();
	piSpecAttrKey=NULL;

	oZ=retValue;
   return S_OK;
}

//-----------------------------------------------------------------------------
// Implements TstIPoint::SetZ
//-----------------------------------------------------------------------------
HRESULT TstEPoint::SetZ (double  iZ)
{
	//获取CATISpecAttrAccess变量
	CATISpecAttrAccess_var spiSpecAttrAccess(this);
	if (spiSpecAttrAccess==NULL_var)
	{
		return E_FAIL;
	}
	//获取CATISpecAttrKey变量
	CATISpecAttrKey *piSpecAttrKey = spiSpecAttrAccess->GetAttrKey("ptZ");
	if (piSpecAttrKey==NULL)
	{
		return E_FAIL;
	}
	//设置参数
	spiSpecAttrAccess->UnsetAttributeValue(piSpecAttrKey);
	spiSpecAttrAccess->SetDouble(piSpecAttrKey,iZ);

	piSpecAttrKey->Release();
	piSpecAttrKey=NULL;
   return S_OK;
}

