// COPYRIGHT Dassault Systemes 2014
//===================================================================
//
// ClsOfExcelOperation.cpp
// Header definition of ClsOfExcelOperation
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  May 2014  Creation: Code generated by the CAA wizard  rui.zhang
//===================================================================

//Local
#include "ClsOfExcelOperation.h"
#include "ExcelRW.h"
#include <afx.h>
#include "comutil.h"
 
//CATImplementClass( ClsOfExcelOperation, Implementation, CATBaseUnknown,CATNull );
 
//-----------------------------------------------------------------------------
// ClsOfExcelOperation : constructor
//-----------------------------------------------------------------------------


ClsOfExcelOperation::ClsOfExcelOperation():_pExcelOperation(NULL)
{
	
}

ClsOfExcelOperation::ClsOfExcelOperation(CATUnicodeString strFilePath):_pExcelOperation(NULL)
{
	
}

//-----------------------------------------------------------------------------
// ClsOfExcelOperation : destructor
//-----------------------------------------------------------------------------
ClsOfExcelOperation::~ClsOfExcelOperation()
{
	
}




HRESULT ClsOfExcelOperation::GetExcelInformation(CATUnicodeString strFilePath,
												 CATLISTV(CATUnicodeString) &listOfstrNo,
												 CATLISTV(CATUnicodeString) &listOfstrPartNum,
												 CATLISTV(CATUnicodeString) &listOfstrInst)
{
	HRESULT rc = E_FAIL;
	if (strFilePath == "")
	{
		return E_FAIL;
	}


	CExcelRW ExcelMain;
	const char* ExcelPath = strFilePath.ConvertToChar();
	if(!ExcelMain.Open(ExcelPath))
		return E_FAIL;

	if(!ExcelMain.OpenSheet(1))
		return E_FAIL;
	ExcelMain.GetAllRange();
	int nrow = 0,ncolumn = 0;
	ExcelMain.Get_Rows_Columns(nrow,ncolumn);
	int oRow = 0;
	int oColumn = 0;
	for (int i=1;i<=nrow;i++)
	{
		CString TestItem;
		TestItem = ExcelMain.GetItemText(i,1);
		CString TestItem1;
		TestItem1 = ExcelMain.GetItemText(i+1,1);
		if (TestItem==""&&TestItem1 == "")
		{
			oRow = i-1;
			break;
		}
	}
	for (int i=1;i<=ncolumn;i++)
	{
		CString TestItem;
		TestItem = ExcelMain.GetItemText(1,i); 
		if (TestItem=="")
		{
			oColumn = i-1;
			break;
		}
	}
	for (int i=2;i<=oRow;i++)
	{
		CString ItemNo;
		ItemNo = ExcelMain.GetItemText(i,1); 
		if (ItemNo=="")
		{
			break;
		}
		CATUnicodeString StrNo("");
		BSTR b = ItemNo.AllocSysString();
		StrNo.BuildFromBSTR(b);
		::SysFreeString(b);
		listOfstrNo.Append(StrNo);

		CString ItemPartNum;
		ItemPartNum = ExcelMain.GetItemText(i,2); 
		if (ItemPartNum=="")
		{
			break;
		}
		CATUnicodeString StrPartNum("");
		b = ItemPartNum.AllocSysString();
		StrPartNum.BuildFromBSTR(b);
		::SysFreeString(b);
		listOfstrPartNum.Append(StrPartNum);


		CString ItemInst;
		ItemInst = ExcelMain.GetItemText(i,3); 
		if (ItemInst=="")
		{
			break;
		}
		CATUnicodeString StrInst("");
		b = ItemInst.AllocSysString();
		StrInst.BuildFromBSTR(b);
		::SysFreeString(b);
		listOfstrInst.Append(StrInst);


	}


	ExcelMain.Exit();
	return S_OK ;	
}


HRESULT ClsOfExcelOperation::WriteExcel(CATUnicodeString strSavePath,
										 CATLISTV(CATUnicodeString) listOfstrNo,
										 CATLISTV(CATUnicodeString) listOfstrPartNum,
										 CATLISTV(CATUnicodeString) listOfstrInst)
{




	HRESULT rc = E_FAIL;
	if (strSavePath=="")
	{
		return E_FAIL;
	}

	if (listOfstrNo == NULL||listOfstrPartNum == NULL ||listOfstrInst == NULL)
	{
		return E_FAIL;
	}
	CExcelRW ExcelMain;
	//CString SaveasFilePath = strSavePath.CastToCharPtr();	

	CString StrExcelTemplatePath = strSavePath.ConvertToChar();

	if(!ExcelMain.Open(StrExcelTemplatePath))
		return E_FAIL;

	if(!ExcelMain.OpenSheet(1))
		return E_FAIL;
	ExcelMain.GetAllRange();

	
	int Row =2;
	int Size = listOfstrNo.Size();
	for (int i=1;i<=Size;i++)
	{
		CATUnicodeString strNo = listOfstrNo[i];
		CString itemNo =   strNo.ConvertToChar();
		ExcelMain.SetItemText(i+1,1,itemNo);

		CATUnicodeString strPartNum = listOfstrPartNum[i];
		CString itemPartNum =   strPartNum.ConvertToChar();
		ExcelMain.SetItemText(i+1,2,itemPartNum);

		CATUnicodeString strInst = listOfstrInst[i];
		CString itemInst =   strInst.ConvertToChar();
		ExcelMain.SetItemText(i+1,3,itemInst);
	}
	

	ExcelMain.Save()	;

	ExcelMain.Exit();
	return S_OK;
}

//写入并另存为新文件
HRESULT ClsOfExcelOperation::WriteAsNewExcel(CATUnicodeString strTemplatePath,
											 CATUnicodeString strSavePath,
										     CATLISTV(CATUnicodeString) listOfstrNo,
										     CATLISTV(CATUnicodeString) listOfstrPartNum,
										     CATLISTV(CATUnicodeString) listOfstrInst)
{




	HRESULT rc = E_FAIL;
	if (strTemplatePath=="")
	{
		return E_FAIL;
	}

	if (listOfstrNo == NULL||listOfstrPartNum == NULL ||listOfstrInst == NULL)
	{
		return E_FAIL;
	}
	CExcelRW ExcelMain;
	//CString SaveasFilePath = strSavePath.CastToCharPtr();	

	CString StrExcelTemplatePath = strTemplatePath.ConvertToChar();

	if(!ExcelMain.Open(StrExcelTemplatePath))
		return E_FAIL;

	if(!ExcelMain.OpenSheet(1))
		return E_FAIL;
	ExcelMain.GetAllRange();


	int Row =2;
	int Size = listOfstrNo.Size();
	for (int i=1;i<=Size;i++)
	{
		CATUnicodeString strNo = listOfstrNo[i];
		CString itemNo =   strNo.ConvertToChar();
		ExcelMain.SetItemText(i+1,1,itemNo);

		CATUnicodeString strPartNum = listOfstrPartNum[i];
		CString itemPartNum =   strPartNum.ConvertToChar();
		ExcelMain.SetItemText(i+1,2,itemPartNum);

		CATUnicodeString strInst = listOfstrInst[i];
		CString itemInst =   strInst.ConvertToChar();
		ExcelMain.SetItemText(i+1,3,itemInst);
	}

	CString StrSaveAsPath = strSavePath.ConvertToChar();
	//ExcelMain.Save()	;
	ExcelMain.SaveAs(StrSaveAsPath);
	ExcelMain.Exit();
	return S_OK;
}