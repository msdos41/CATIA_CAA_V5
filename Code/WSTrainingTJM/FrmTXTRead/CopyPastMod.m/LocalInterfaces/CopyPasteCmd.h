// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// CopyPasteCmd.h
// The state chart based command: CopyPasteCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//CAA2 Wizard Generation Report
//   STATECOMMAND
//End CAA2 Wizard Generation Report
//
//  Nov 2018  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#ifndef CopyPasteCmd_H
#define CopyPasteCmd_H

#include "CATStateCommand.h"
#include "CATBoolean.h"
#include "CopyPasteDlg.h"
#include "CATFeatureImportAgent.h"
#include "CATDialogAgent.h"
#include "CATISpecObject.h"
#include "CATIAlias.h"
#include "CATMmrInterPartCopy.h"
#include "CATILinkableObject.h"
#include "CATIProduct.h"
#include "CATIPrtContainer.h"
#include "CATHSO.h"
#include "CATFrmEditor.h"
#include "CATIBuildPath.h"
#include "CATLISTV_CATISpecObject.h"






class CATIndicationAgent;

//----------------------------------------------------------------------

/**
 * Describe your command here.
 * <p>
 * Using this prefered syntax will enable mkdoc to document your class.
 * <p>
 * refer to programming resources of Dialog engine framework.
 * (consult base class description).
 */
class CopyPasteCmd: public CATStateCommand
{
  // Allows customization/internationalization of command's messages
  // ---------------------------------------------------------------
  DeclareResource( CopyPasteCmd, CATStateCommand )

  public:

  CopyPasteCmd();
  virtual ~CopyPasteCmd();

    /**
     * Defines the command automata.
     * <br>
     * <i>(states, transitions and agents)</i>
     */
  virtual void     BuildGraph();

    /**
     * Action associated to state transitions.
     */
  virtual CATBoolean  ActionOne(void * data);
  void ExitCmd(void * data);
  void ActionOK(void * data);
  void SelectElement();
  void SelectDestination();
  void Transform_SelectElement();
  void Transform_SelectDestination();
  HRESULT GetSelectAgtValue(CATFeatureImportAgent * pSelectAgent, CATISpecObject_var &spSpecObj);
  void UpdateHSO(CATISpecObject_var &spSpecObj, CATFrmEditor * pEditor, CATHSO * pHSO);
  void SelectBatchElements(void * data);
  HRESULT GetBatchSelectAgtValue(CATFeatureImportAgent * pSelectAgent, CATLISTV(CATISpecObject_var) &lstSpecObj);
  CATBoolean GetHighlight(void * data);
private:

  //CATIndicationAgent	* _Indication;
  CopyPasteDlg	* _pDlg;

  CATFeatureImportAgent *	_pFeatImpAgtSource;
  CATFeatureImportAgent *	_pFeatImpAgtTarget;

  CATDialogAgent *	_pDiaAgtSource;
  CATDialogAgent *	_pDiaAgtTarget;

  CATISpecObject_var _spSpecObjSource;
  CATISpecObject_var _spSpecObjTarget;

  CATHSO	* _pHSO;
  CATFrmEditor	* _pEditor;

  //CATLISTV(CATISpecObject_var)	_lstSpecObjSource;
  //CATLISTV(CATISpecObject_var)	_lstSpecObjTarget;
  CATLISTV(CATUnicodeString)	_lstStrName;
  CATListValCATISpecObject_var _lstSpecObjSource;
};

//----------------------------------------------------------------------

#endif
