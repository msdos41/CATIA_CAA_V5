// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// CopyPasteCmd.cpp
// The state chart based command: CopyPasteCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2018  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "CopyPasteCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
#include "CATPathElement.h"







CATCreateClass( CopyPasteCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CopyPasteCmd::CopyPasteCmd() :
  CATStateCommand ("CopyPasteCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  //,_Indication(NULL)
{
	_pDlg = NULL;
	_pDlg = new CopyPasteDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pFeatImpAgtSource = NULL;
	_pFeatImpAgtTarget = NULL;
	_pDiaAgtSource = NULL;
	_pDiaAgtTarget = NULL;

	_spSpecObjSource = NULL_var;
	_spSpecObjTarget = NULL_var;


	_pEditor = CATFrmEditor::GetCurrentEditor();
	_pHSO = NULL;
	if (_pEditor != NULL)
	{
		_pHSO = _pEditor->GetHSO();
	}

	_lstSpecObjSource.RemoveAll();
	_lstStrName.RemoveAll();
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CopyPasteCmd::~CopyPasteCmd()
{

   if (_pDlg != NULL)
   {
	   _pDlg->RequestDelayedDestruction();
	   _pDlg = NULL;
   }

   if (_pFeatImpAgtSource != NULL)
   {
	   _pFeatImpAgtSource->RequestDelayedDestruction();
	   _pFeatImpAgtSource = NULL;
   }

   if (_pFeatImpAgtTarget != NULL)
   {
	   _pFeatImpAgtTarget->RequestDelayedDestruction();
	   _pFeatImpAgtTarget = NULL;
   }

   if (_pDiaAgtSource != NULL)
   {
	   _pDiaAgtSource->RequestDelayedDestruction();
	   _pDiaAgtSource = NULL;
   }

   if (_pDiaAgtTarget != NULL)
   {
	   _pDiaAgtTarget->RequestDelayedDestruction();
	   _pDiaAgtTarget = NULL;
   }
   
   _pHSO = NULL;

   _pEditor = NULL;
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void CopyPasteCmd::BuildGraph()
{


  // TODO: Define the StateChart 
  // ---------------------------
  //_Indication = new CATIndicationAgent ("Indication");
  //CATMathPlane PlaneXY;
  //_Indication -> SetMathPlane (PlaneXY);
  //CATDialogState * initialState = GetInitialState("initialState");
  //initialState -> AddDialogAgent (_Indication);
  //
  //AddTransition( initialState, NULL, 
  //               IsOutputSetCondition (_Indication),
  //               Action ((ActionMethod) &CopyPasteCmd::ActionOne));

  AddAnalyseNotificationCB(_pDlg,
	  _pDlg->GetWindCloseNotification(),
	  (CATCommandMethod)&CopyPasteCmd::ExitCmd,
	  NULL);

  AddAnalyseNotificationCB(_pDlg,
	  _pDlg->GetDiaCANCELNotification(),
	  (CATCommandMethod)&CopyPasteCmd::ExitCmd,
	  NULL);

  AddAnalyseNotificationCB(_pDlg,
	  _pDlg->GetDiaOKNotification(),
	  (CATCommandMethod)&CopyPasteCmd::ActionOK,
	  NULL);

  _pFeatImpAgtSource = new CATFeatureImportAgent("Select Element");
  CATLISTV(CATString) typeListSource = NULL;
  typeListSource.Append("CATIMfPoint");
  typeListSource.Append("CATIMfLine");
  //typeListSource.Append("CATIMmiNonOrderedGeometricalSet");
  _pFeatImpAgtSource->SetOrderedTypeList(typeListSource);
  _pFeatImpAgtSource->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithPSOHSO|CATDlgEngWithTooltip|CATDlgEngOneShot);

  _pFeatImpAgtTarget = new CATFeatureImportAgent("Select Destination");
  CATLISTV(CATString) typeListTarget = NULL;
  typeListTarget.Append("CATIMmiNonOrderedGeometricalSet");
  _pFeatImpAgtTarget->SetOrderedTypeList(typeListTarget);
  _pFeatImpAgtTarget->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithPSOHSO|CATDlgEngWithTooltip|CATDlgEngOneShot);

  _pDiaAgtSource = new CATDialogAgent("Copy Element");
  _pDiaAgtSource->AcceptOnNotify(_pDlg->GetSelectorListSource(),
	  _pDlg->GetSelectorListSource()->GetListSelectNotification());

  _pDiaAgtTarget = new CATDialogAgent("Paste Destination");
  _pDiaAgtTarget->AcceptOnNotify(_pDlg->GetSelectorListTarget(),
	  _pDlg->GetSelectorListTarget()->GetListSelectNotification());

  CATDialogState * pDiaStSource = GetInitialState("Copy Element");
  pDiaStSource->AddDialogAgent(_pFeatImpAgtSource);
  pDiaStSource->AddDialogAgent(_pDiaAgtSource);
  pDiaStSource->AddDialogAgent(_pDiaAgtTarget);

  CATDialogState * pDiaStTarget = AddDialogState("Paste Destination");
  pDiaStTarget->AddDialogAgent(_pFeatImpAgtTarget);
  pDiaStTarget->AddDialogAgent(_pDiaAgtSource);
  pDiaStTarget->AddDialogAgent(_pDiaAgtTarget);

  AddTransition(pDiaStSource,pDiaStSource,IsOutputSetCondition(_pFeatImpAgtSource),
	  Action((ActionMethod)&CopyPasteCmd::SelectElement));

  AddTransition(pDiaStSource,pDiaStSource,IsOutputSetCondition(_pDiaAgtSource),
	  Action((ActionMethod)&CopyPasteCmd::GetHighlight));

  AddTransition(pDiaStSource,pDiaStTarget,IsOutputSetCondition(_pDiaAgtTarget),
	  Action((ActionMethod)&CopyPasteCmd::Transform_SelectDestination));
  AddTransition(pDiaStTarget,pDiaStTarget,IsOutputSetCondition(_pFeatImpAgtTarget),
	  Action((ActionMethod)&CopyPasteCmd::SelectDestination));
  AddTransition(pDiaStTarget,pDiaStSource,IsOutputSetCondition(_pDiaAgtSource),
	  Action((ActionMethod)&CopyPasteCmd::Transform_SelectElement));

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CopyPasteCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

void CopyPasteCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
}

void CopyPasteCmd::ActionOK(void * data)
{
	////Copy Paste One element

	//CATISpecObject_var spSourceToCopy = _spSpecObjSource;
	//if (spSourceToCopy == NULL_var)
	//{
	//	return;
	//}
	//CATISpecObject_var spDestination = _spSpecObjTarget;
	//if (spDestination == NULL_var)
	//{
	//	return;
	//}
	//CATMmrInterPartCopy * pPartCopy = new CATMmrInterPartCopy(spSourceToCopy,spDestination);
	//HRESULT rc = pPartCopy->SetLinkMode(FALSE);
	//if (FAILED(rc))
	//{
	//	return;
	//}
	//CATUnicodeString strErrMsg = "Copy Failed";
	//rc = pPartCopy->Run(&strErrMsg);
	//if (FAILED(rc))
	//{
	//	return;
	//}
	//CATISpecObject_var spPasteResult = NULL_var;
	//rc = pPartCopy->GetResult(spPasteResult);

	//CATISpecObject_var spPrtRoot = spDestination->GetRootFather();
	//spPrtRoot->Update();
	//

	//this->RequestDelayedDestruction();

	////Batch Copy and Paste

	CATISpecObject_var spPasteResult = NULL_var;
	CATISpecObject_var spDestination = _spSpecObjTarget;
	if (spDestination == NULL_var)
	{
		return;
	}
	for (int i=1; i<= _lstSpecObjSource.Size(); i++)
	{
		CATMmrInterPartCopy *pPartCopy = new CATMmrInterPartCopy(_lstSpecObjSource[i],spDestination);
		HRESULT rc = pPartCopy->SetLinkMode(FALSE);
		if (FAILED(rc))
		{
			return;
		}
		CATUnicodeString strErrMsg = "Copy Failed";
		rc = pPartCopy->Run(&strErrMsg);
		if (FAILED(rc))
		{
			return;
		}
		pPartCopy->GetResult(spPasteResult);
	}

	CATISpecObject_var spPrtRoot = spPasteResult->GetRootFather();
	spPrtRoot->Update();

	this->RequestDelayedDestruction();



}

void CopyPasteCmd::SelectElement()
{
	CATISpecObject_var spSpecObj = NULL_var;
	GetSelectAgtValue(_pFeatImpAgtSource,spSpecObj);
	if (spSpecObj == NULL_var)
	{
		return;
	}
	_spSpecObjSource = spSpecObj;
	CATIAlias_var spAlias = spSpecObj;
	CATUnicodeString strAlias = "";
	if (spAlias != NULL_var)
	{
		strAlias = spAlias->GetAlias();
	}
	_pDlg->GetSelectorListSource()->ClearLine();
	_pDlg->GetSelectorListSource()->SetLine(strAlias);

	int iTabRow = 0;
	if (_spSpecObjTarget == NULL_var)
	{
		_pDlg->GetSelectorListTarget()->SetSelect(&iTabRow,1,1);
	}

	//UpdateHSO(_spSpecObjSource,_pEditor,_pHSO);
	_pFeatImpAgtSource->InitializeAcquisition();
	
}

void CopyPasteCmd::SelectBatchElements(void * data)
{
	CATISpecObject_var spSpecObj = NULL_var;
	GetSelectAgtValue(_pFeatImpAgtSource,spSpecObj);
	if (spSpecObj == NULL_var)
	{
		return;
	}
	_lstSpecObjSource.Append(spSpecObj);

	CATIAlias_var spAlias = spSpecObj;
	CATUnicodeString strAlias = "";
	if (spAlias != NULL_var)
	{
		strAlias = spAlias->GetAlias();
	}
	_lstStrName.Append(strAlias);
	_pDlg->GetSelectorListSource()->ClearLine();
	for (int i=1; i<= _lstStrName.Size(); i++)
	{
		_pDlg->GetSelectorListSource()->SetLine(_lstStrName[i],-1,CATDlgDataAdd);

		int iTabRow = i-1;
		_pDlg->GetSelectorListSource()->SetSelect(&iTabRow,1,1);
		UpdateHSO(_lstSpecObjSource[i],_pEditor,_pHSO);
	}

	_pFeatImpAgtSource->InitializeAcquisition();


	
}


CATBoolean CopyPasteCmd::GetHighlight(void * data)
{
	//int iNbOfLines = _pDlg->GetSelectorListSource()->GetLineCount();
	//int iNbOfLinesSelected = _pDlg->GetSelectorListSource()->GetSelectCount();
	//int *pSelectLine = new int [iNbOfLinesSelected];
	//_pDlg->GetSelectorListSource()->GetSelect(pSelectLine,iNbOfLinesSelected);
	//UpdateHSO(_lstSpecObjSource[pSelectLine[1]],_pEditor,_pHSO);

	UpdateHSO(_spSpecObjSource,_pEditor,_pHSO);

	//if (_pHSO)
	//{
	//	_pHSO->Empty();
	//}

	//if (_spSpecObjSource != NULL_var && _pEditor != NULL && _pHSO != NULL)
	//{
	//	CATIBuildPath *piBuildPath = NULL;

	//	HRESULT rc = _spSpecObjSource->QueryInterface(IID_CATIBuildPath,(void**)&piBuildPath);

	//	if (SUCCEEDED(rc) && NULL != piBuildPath)
	//	{
	//		CATPathElement context = _pEditor->GetUIActiveObject();
	//		CATPathElement *pPathElement = NULL;
	//		rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
	//		if (pPathElement != NULL)
	//		{
	//			_pHSO->AddElement(pPathElement);
	//			pPathElement->Release();
	//			pPathElement = NULL;
	//		}
	//		piBuildPath->Release();
	//		piBuildPath = NULL;
	//	}

	//}

	//int iTabRow = 0;
	//_pDlg->GetSelectorListSource()->SetSelect(&iTabRow,1,1);
	_pDiaAgtSource->InitializeAcquisition();

	return TRUE;

}

void CopyPasteCmd::SelectDestination()
{
	CATISpecObject_var spSpecObj = NULL_var;
	GetSelectAgtValue(_pFeatImpAgtTarget,spSpecObj);
	if (spSpecObj == NULL_var)
	{
		return;
	}

	_spSpecObjTarget = spSpecObj;
	CATIAlias_var spAlias = spSpecObj;
	CATUnicodeString strAlias = "";
	if (spAlias != NULL_var)
	{
		strAlias = spAlias->GetAlias();
	}
	_pDlg->GetSelectorListTarget()->ClearLine();
	_pDlg->GetSelectorListTarget()->SetLine(strAlias);

	int iTabRow = 0;
	if (_spSpecObjTarget == NULL_var)
	{
		_pDlg->GetSelectorListSource()->SetSelect(&iTabRow,1,1);
	}

	//CATBool elementIsSelected = _pDlg->GetSelectorListSource()->IsSelect(iTabRow);
	//if (TRUE == elementIsSelected)
	//{
	//	UpdateHSO(_spSpecObjSource,_pEditor,_pHSO);
	//}

	//UpdateHSO(_spSpecObjTarget,_pEditor,_pHSO);
	
	_pFeatImpAgtTarget->InitializeAcquisition();
}

void CopyPasteCmd::Transform_SelectElement()
{
	_pDiaAgtSource->InitializeAcquisition();
	_pDiaAgtTarget->InitializeAcquisition();
	_pDlg->GetSelectorListTarget()->ClearSelect();
	
}

void CopyPasteCmd::Transform_SelectDestination()
{
	_pDiaAgtSource->InitializeAcquisition();
	_pDiaAgtTarget->InitializeAcquisition();
	_pDlg->GetSelectorListSource()->ClearSelect();
}

HRESULT CopyPasteCmd::GetSelectAgtValue(CATFeatureImportAgent * pSelectAgent,
										 CATISpecObject_var &spSpecObj)
{
	HRESULT rc = E_FAIL;
	spSpecObj = pSelectAgent->GetElementValue();
	

	pSelectAgent->InitializeAcquisition();
	if (NULL_var == spSpecObj)
	{
		rc = E_FAIL;
	}
	else
	{
		rc = S_OK;
	}
	return rc;
}

HRESULT CopyPasteCmd::GetBatchSelectAgtValue(CATFeatureImportAgent * pSelectAgent, CATLISTV(CATISpecObject_var) &lstSpecObj)
{
	HRESULT rc = E_FAIL;
	CATISpecObject_var spSpecOjbOnSingleElem = NULL_var;
	spSpecOjbOnSingleElem = pSelectAgent->GetElementValue();
	if (NULL_var == spSpecOjbOnSingleElem)
	{
		rc = E_FAIL;
	}
	else
	{
		rc = S_OK;
	}
	lstSpecObj.Append(spSpecOjbOnSingleElem);

	return rc;
}



void CopyPasteCmd::UpdateHSO(CATISpecObject_var &spSpecObj,
								CATFrmEditor * pEditor,
								CATHSO * pHSO)
{
	HRESULT rc = E_FAIL;

	if (pHSO)
	{
		pHSO->Empty();
	}

	if ((spSpecObj != NULL_var) && (pEditor != NULL) && (pHSO != NULL))
	{
		CATIBuildPath *piBuildPath = NULL;

		rc = spSpecObj->QueryInterface(IID_CATIBuildPath,(void**)&piBuildPath);

		if (SUCCEEDED(rc) && NULL != piBuildPath)
		{
			CATPathElement context = pEditor->GetUIActiveObject();
			CATPathElement *pPathElement = NULL;
			rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
			if (pPathElement != NULL)
			{
				pHSO->AddElement(pPathElement);
				pPathElement->Release();
				pPathElement = NULL;
			}
			piBuildPath->Release();
			piBuildPath = NULL;
		}

	}

	int iTabRow = 0;
	_pDlg->GetSelectorListSource()->SetSelect(&iTabRow,1,1);
}