// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// CopyPasteNewCmd.cpp
// The state chart based command: CopyPasteNewCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2018  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "CopyPasteNewCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( CopyPasteNewCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CopyPasteNewCmd::CopyPasteNewCmd() :
  CATStateCommand ("CopyPasteNewCmd", CATDlgEngOneShot, CATCommandModeShared) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_Indication(NULL)
{
	
	_pDlg = NULL;
	_pDlg = new CopyPasteNewDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_lstSpecOnBatchElements = NULL;
	_lstAliasOnSelection = NULL;
	
	
	_pCopyElemAgent = NULL;
	_pPasteDestiAgent = NULL;

	_pCopyElemDlgAgent = NULL;
	_pPasteDestiDlgAgent = NULL;

	_piSpecOnCopyElem = NULL;
	_piSpecOnPasteDesti = NULL;


	_pEditor = CATFrmEditor::GetCurrentEditor();
	_pHSO = NULL;
	if (NULL != _pEditor)
	{
		_pHSO = _pEditor->GetHSO();
	}
	
	
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CopyPasteNewCmd::~CopyPasteNewCmd()
{
	if (NULL != _pDlg)
	{
		_pDlg->RequestDelayedDestruction();
		_pDlg = NULL;
	}

	if (NULL != _pCopyElemAgent)
	{
		_pCopyElemAgent->RequestDelayedDestruction();
		_pCopyElemAgent = NULL;
	}

	if (NULL != _pPasteDestiAgent)
	{
		_pPasteDestiAgent->RequestDelayedDestruction();
		_pPasteDestiAgent = NULL;
	}

	if (NULL != _pCopyElemDlgAgent)
	{
		_pCopyElemDlgAgent->RequestDelayedDestruction();
		_pCopyElemDlgAgent = NULL;
	}

	if (NULL != _pPasteDestiDlgAgent)
	{
		_pPasteDestiDlgAgent->RequestDelayedDestruction();
		_pPasteDestiDlgAgent = NULL;
	}

	if (_piSpecOnCopyElem != NULL)
	{
		_piSpecOnCopyElem->Release();
		_piSpecOnCopyElem = NULL;
	}

	if (_piSpecOnPasteDesti != NULL)
	{
		_piSpecOnPasteDesti->Release();
		_piSpecOnPasteDesti = NULL;
	}

	_pEditor = NULL;

	_pHSO = NULL;

	if ( _lstSpecOnBatchElements!=NULL)
	{
		_lstSpecOnBatchElements.RemoveAll();
		_lstSpecOnBatchElements = NULL;
	}

	if ( _lstAliasOnSelection!=NULL)
	{
		_lstAliasOnSelection.RemoveAll();

		_lstAliasOnSelection = NULL;
	}
	
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void CopyPasteNewCmd::BuildGraph()
{


  // TODO: Define the StateChart 
  // ---------------------------

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&CopyPasteNewCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&CopyPasteNewCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&CopyPasteNewCmd::ActionOK,
		NULL);
	
	//创建Agent
	_pCopyElemAgent = new CATFeatureImportAgent("CopyElementAgent");
	_pPasteDestiAgent = new CATFeatureImportAgent("PasteDestinationAgent");

	_pCopyElemDlgAgent = new CATDialogAgent("CopyElementDialogAgent");
	_pPasteDestiDlgAgent = new CATDialogAgent("PasteDestinationDialogAgent");
	
	//_pCopyElemAgent选择线或者点
	_pCopyElemAgent->SetOrderedElementType("CATIMfMonoDimResult");
	_pCopyElemAgent->AddOrderedElementType("CATCurve");
	_pCopyElemAgent->AddOrderedElementType("CATPoint");
	_pCopyElemAgent->SetBehavior(CATDlgEngWithPrevaluation | CATDlgEngWithCSO     | CATDlgEngOneShot);

	//_pPasteDestiAgent选择几何图形集
	_pPasteDestiAgent->SetOrderedElementType("CATIMmiNonOrderedGeometricalSet");
	_pPasteDestiAgent->SetBehavior(CATDlgEngWithPrevaluation | CATDlgEngWithCSO     | CATDlgEngOneShot);

	//由Agent指定用户交互
	_pCopyElemDlgAgent->AcceptOnNotify(_pDlg->GetSelectorListElemToCopy(),_pDlg->GetSelectorListElemToCopy()->GetListSelectNotification());
	_pPasteDestiDlgAgent->AcceptOnNotify(_pDlg->GetSelectorListDestiToPaste(), _pDlg->GetSelectorListDestiToPaste()->GetListSelectNotification());

	//选择拷贝元素的状态
	CATDialogState * pWaitForCopyElem = GetInitialState("Select Element to Copy");
	pWaitForCopyElem->AddDialogAgent(_pCopyElemAgent);
	pWaitForCopyElem->AddDialogAgent(_pCopyElemDlgAgent);
	pWaitForCopyElem->AddDialogAgent(_pPasteDestiDlgAgent);

	//选择粘贴图形集的状态
	CATDialogState * pWaitForPasteDesti = AddDialogState("Select Destination to Paste");
	pWaitForPasteDesti->AddDialogAgent(_pPasteDestiAgent);
	pWaitForPasteDesti->AddDialogAgent(_pCopyElemDlgAgent);
	pWaitForPasteDesti->AddDialogAgent(_pPasteDestiDlgAgent);

	//From CopyElem to CopyElem
	AddTransition(pWaitForCopyElem,pWaitForCopyElem,
				  IsOutputSetCondition(_pCopyElemAgent),
				  Action((ActionMethod)& CopyPasteNewCmd::SelectCopyElem));

	AddAnalyseNotificationCB(_pDlg->GetSelectorListElemToCopy(),
		_pDlg->GetSelectorListElemToCopy()->GetListSelectNotification(),
		(CATCommandMethod)&CopyPasteNewCmd::SelectCopyDlgAgent,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetSelectorListDestiToPaste(),
		_pDlg->GetSelectorListDestiToPaste()->GetListSelectNotification(),
		(CATCommandMethod)&CopyPasteNewCmd::SelectPasteDlgAgent,
		NULL);

	//
	//AddTransition(pWaitForCopyElem,pWaitForCopyElem,
	//			  IsOutputSetCondition(_pCopyElemDlgAgent),
	//			  Action((ActionMethod)& CopyPasteNewCmd::SelectCopyDlgAgent));

	//From PasteDesti to PasteDesti
	AddTransition(pWaitForPasteDesti,pWaitForPasteDesti,
				  IsOutputSetCondition(_pPasteDestiAgent),
				  Action((ActionMethod)& CopyPasteNewCmd::SelectPasteDesti));
	//AddTransition(pWaitForPasteDesti,pWaitForPasteDesti,
	//			  IsOutputSetCondition(_pPasteDestiDlgAgent),
	//			  Action((ActionMethod)& CopyPasteNewCmd::SelectPasteDlgAgent));

	//From CopyElem to PasteDesti
	AddTransition(pWaitForCopyElem,pWaitForPasteDesti,
				  IsOutputSetCondition(_pPasteDestiDlgAgent),
				  Action((ActionMethod)& CopyPasteNewCmd::SelectPasteDlgAgent));

	//From PasteDesti to CopyElem
	AddTransition(pWaitForPasteDesti,pWaitForCopyElem,
				  IsOutputSetCondition(_pCopyElemDlgAgent),
				  Action((ActionMethod)& CopyPasteNewCmd::SelectCopyDlgAgent));

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CopyPasteNewCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}


void CopyPasteNewCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
}

void CopyPasteNewCmd::ActionOK(void * data)
{
	CATISpecObject_var spSourceToCopy = NULL_var;
	CATISpecObject_var spCopyResult = NULL_var;
	CATISpecObject_var spTarget = _piSpecOnPasteDesti;

	for (int i=1; i<=_lstSpecOnBatchElements.Size(); i++)
	{
		spSourceToCopy = _lstSpecOnBatchElements[i];
		CATMmrInterPartCopy *pPartCopy = new CATMmrInterPartCopy(spSourceToCopy,spTarget);
		HRESULT rc = pPartCopy->SetLinkMode(TRUE);
		if (FAILED(rc))
		{
			return;
		}
		CATUnicodeString oStrErrMsg = "";
		rc = pPartCopy->Run(&oStrErrMsg);
		if (FAILED(rc))
		{
			return;
		}
		
		rc = pPartCopy->GetResult(spCopyResult);
		if (FAILED(rc))
		{
			return;
		}
		delete pPartCopy;
		pPartCopy = NULL;
	}

	CATISpecObject_var spRootOnPart = spCopyResult->GetRootFather();
	spRootOnPart->Update();

	this->RequestDelayedDestruction();


	return;
}

CATBoolean CopyPasteNewCmd::SelectCopyElem(void * data)
{
	if (_pHSO != NULL)
	{
		_pHSO->Empty();
	}

	////单选元素
	//
	//SelectElement(_pCopyElemAgent,_piSpecOnCopyElem);
	//CATIAlias_var spAlias = _piSpecOnCopyElem;
	//CATUnicodeString strAlias = "";
	//if (spAlias != NULL_var)
	//{
	//	strAlias = spAlias->GetAlias();
	//}

	//_pDlg->GetSelectorListElemToCopy()->ClearLine();
	//_pDlg->GetSelectorListElemToCopy()->SetLine(strAlias,-1,CATDlgDataAdd);


	////多选元素
	SelectElement(_pCopyElemAgent,_piSpecOnCopyElem);

	//获取模型树上的显示名称
	CATIAlias_var spAliasOnSelection = _piSpecOnCopyElem;
	CATUnicodeString strAliasOnSelection = "";
	if (NULL_var != spAliasOnSelection)
	{
		strAliasOnSelection = spAliasOnSelection->GetAlias();
	}
	//判断当前选择对象是否已经存在在列表中
	int iNbOccur = 0;
	iNbOccur = _lstSpecOnBatchElements.NbOccur(_piSpecOnCopyElem);

	//如果不存在，在多选列表中显示
	if (iNbOccur == 0)
	{
		_lstSpecOnBatchElements.Append(_piSpecOnCopyElem);



		_lstAliasOnSelection.Append(strAliasOnSelection);
		_pDlg->GetSelectorListElemToCopy()->ClearLine();

		for (int i =1; i <= _lstAliasOnSelection.Size(); i++)
		{
			_pDlg->GetSelectorListElemToCopy()->SetLine(_lstAliasOnSelection[i], -1, CATDlgDataAdd);
			int iTabRow = i-1;
			_pDlg->GetSelectorListElemToCopy()->SetSelect(&iTabRow,1,1);
		}
	}
	//如果存在，则选中该行
	else
	{
		_pDlg->GetSelectorListElemToCopy()->SetSelect(&strAliasOnSelection,1,1);
	}

	_pCopyElemAgent->InitializeAcquisition();

	return TRUE;
}

CATBoolean CopyPasteNewCmd::SelectPasteDesti(void * data)
{
	if (_pHSO != NULL)
	{
		_pHSO->Empty();
	}

	SelectElement(_pPasteDestiAgent,_piSpecOnPasteDesti);
	CATIAlias_var spAlias = _piSpecOnPasteDesti;
	CATUnicodeString strAlias = "";
	if (spAlias != NULL_var)
	{
		strAlias = spAlias->GetAlias();
	}

	_pDlg->GetSelectorListDestiToPaste()->ClearLine();
	_pDlg->GetSelectorListDestiToPaste()->SetLine(strAlias,-1,CATDlgDataAdd);

	_pPasteDestiAgent->InitializeAcquisition();

	return TRUE;
}

void CopyPasteNewCmd::SelectCopyDlgAgent(void * data)
{
	/////////只能单选时的单选高亮
	//SetActiveDlgAgent(_piSpecOnCopyElem);
	//_pDlg->GetSelectorListDestiToPaste()->ClearSelect();
	//_pCopyElemDlgAgent->InitializeAcquisition();

	////////多选时的单选高亮
	//先判断有没有选择
	//有的话通过行数返回找到对应SpecObject
	if (_lstSpecOnBatchElements == NULL)
	{
		return;
	}
	//if (_lstSpecOnBatchElements.Size() >0)
	//{
		int oTabRow = 0 ;
		_pDlg->GetSelectorListElemToCopy()->GetSelect(&oTabRow,1);
		SetActiveDlgAgent(_lstSpecOnBatchElements[oTabRow+1]);
		_pDlg->GetSelectorListDestiToPaste()->ClearSelect();
		_pCopyElemDlgAgent->InitializeAcquisition();
	//}
	////没有选择的话则输入空
	//else
	//{
	//	//CATISpecObject *spSpecOnNoSelection = NULL;
	//	SetActiveDlgAgent(_piSpecOnCopyElem);
	//	_pDlg->GetSelectorListDestiToPaste()->ClearSelect();
	//	_pCopyElemDlgAgent->InitializeAcquisition();
	//}
	//
	//return TRUE;
}

CATBoolean CopyPasteNewCmd::SelectPasteDlgAgent(void * data)
{
	SetActiveDlgAgent(_piSpecOnPasteDesti);
	_pDlg->GetSelectorListElemToCopy()->ClearSelect();
	_pPasteDestiDlgAgent->InitializeAcquisition();
	return TRUE;
}


//点击Selectorlist后高亮选择元素
void CopyPasteNewCmd::SetActiveDlgAgent(CATISpecObject *spSpecOnDlgAgent)
{
	if (_pHSO != NULL)
	{
		_pHSO->Empty();
	}

	if ((spSpecOnDlgAgent != NULL) && (_pEditor != NULL) && (_pHSO != NULL))
	{
		CATIBuildPath *piBuildPath = NULL;
		HRESULT rc = spSpecOnDlgAgent->QueryInterface(IID_CATIBuildPath,(void**) &piBuildPath);
		if (SUCCEEDED(rc))
		{
			CATPathElement context = _pEditor->GetUIActiveObject();
			CATPathElement *pPathElement = NULL;

			rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
			if (pPathElement != NULL)
			{
				_pHSO->AddElement(pPathElement);
				pPathElement->Release();
				pPathElement = NULL;
			}
			piBuildPath->Release();
			piBuildPath = NULL;
		}
	}
	
}


//单选元素转换为CATISpecObject
void CopyPasteNewCmd::SelectElement(CATFeatureImportAgent *pFeatAgent,CATISpecObject *&piSpecOnELement)   //输出的参数要加引用或者双指针
{
	HRESULT rc = E_FAIL;

	if (pFeatAgent == NULL)
	{
		return;
	}
	CATISpecObject *piSpecOnSelection = NULL;
	CATBaseUnknown *pSelection = pFeatAgent->GetElementValue(pFeatAgent->GetValue());
	if (NULL != pSelection)
	{
		rc = pSelection->QueryInterface(IID_CATISpecObject,(void**)&piSpecOnSelection);
		if (FAILED(rc))
		{
			return;
		}
		piSpecOnELement = piSpecOnSelection;

	}
}

