// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// CreateCubeFilletCmd.cpp
// The state chart based command: CreateCubeFilletCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Dec 2018  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "CreateCubeFilletCmd.h"
#include "CATIndicationAgent.h"


#include "CATCreateExternalObject.h"



CATCreateClass( CreateCubeFilletCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CreateCubeFilletCmd::CreateCubeFilletCmd() :
  CATStateCommand ("CreateCubeFilletCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_Indication(NULL)
{
	_pDlg = NULL;
	_pDlg = new CreateCubeFilletDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CreateCubeFilletCmd::~CreateCubeFilletCmd()
{
   if (_Indication != NULL) 
      _Indication->RequestDelayedDestruction();

   if (_pDlg != NULL)
   {
	   _pDlg->RequestDelayedDestruction();
	   _pDlg = NULL;
   }
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void CreateCubeFilletCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&CreateCubeFilletCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&CreateCubeFilletCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&CreateCubeFilletCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&CreateCubeFilletCmd::ActionOK,
		NULL);
}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CreateCubeFilletCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}


void CreateCubeFilletCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
}

void CreateCubeFilletCmd::ActionOK(void * data)
{
	//
	CATIPrtFactory_var spPrtFactOnDoc = NULL_var;
	CATISketchFactory_var spSketchFactOnDoc = NULL_var;
	CATICkeParmFactory_var spCkeParmFactOnDoc = NULL_var;
	CATIMfBRepFactory_var spBRepFactOnDoc = NULL_var;
	//HRESULT rc = GetCurrentPartInformation(spPrtFactOnDoc,spSketchFactOnDoc,spCkeParmFactOnDoc);
	HRESULT rc = GetCurrentPartInformationUpdate(spPrtFactOnDoc,spSketchFactOnDoc,spCkeParmFactOnDoc,spBRepFactOnDoc);
	if (FAILED(rc))
	{
		return;
	}
	//
	CATISpecObject_var spSpecObjOnPart = NULL_var;
	GetCurrentObject(spSpecObjOnPart);
	if (NULL_var == spSpecObjOnPart)
	{
		return;
	}
	//
	CATISpecObject_var spSpecPlaneXOY = NULL_var;
	CATISpecObject_var spSpecPlaneYOZ = NULL_var;
	CATISpecObject_var spSpecPlaneXOZ = NULL_var;
	rc = GetDatumPlanes(spSpecObjOnPart,spSpecPlaneXOY,spSpecPlaneYOZ,spSpecPlaneXOZ);
	if (FAILED(rc))
	{
		return;
	}
	//定义工作对象到PartBody下
	CATIPrtPart_var spPartOnCurrent(spSpecObjOnPart);
	DefineInWorkObject(spPartOnCurrent,1);
	//画草图
	//开始画草图
	CATISpecObject_var spSpecSketch = NULL_var;
	rc = CreateSketchSquare(spSketchFactOnDoc,spSpecPlaneXOY,spSpecSketch);
	if (FAILED(rc))
	{
		return;
	}
	//拉伸Pad实体
	//开始画Pad
	CATISpecObject_var spSpecPad = NULL_var;
	CATMathDirection iDirSketch(0,0,1);
	double dFirstLimit = (_pDlg->GetSpinnerFirstLimit()->GetCurrentValue());
	double dSecondLimit = (_pDlg->GetSpinnerSecondLimit()->GetCurrentValue());
	if (dFirstLimit == 0 && dSecondLimit == 0)
	{
		return;
	}
	rc = CreatePad(spPrtFactOnDoc,spSpecSketch,dFirstLimit,dSecondLimit,iDirSketch,spSpecPad);
	if (FAILED(rc))
	{
		return;
	}

	//-----竖面倒角----使用BrepFactory下创建Brep边的list
	//找到sketch中的4根线
	CATListValCATI2DWFGeometry_var spLst2DGeoOnSketch = NULL;
	CATISketch_var spSketchOnPad(spSpecSketch);
	rc = spSketchOnPad->GetComponents(CATI2DLine::ClassName(),spLst2DGeoOnSketch);
	if (FAILED(rc) || spLst2DGeoOnSketch == NULL)
	{
		return;
	}
	cout<<spLst2DGeoOnSketch.Size()<<endl;
	//循环出4根竖线
	CATLISTV(CATISpecObject_var) lstOfShapeFeatureSide;
	lstOfShapeFeatureSide.Append(spSpecPad);
	lstOfShapeFeatureSide.Append(spSpecPad);
	//
	CATListOfCATUnicodeString lstOfKeyWordsSide;
	lstOfKeyWordsSide.Append(MfKeyExtrudedFrom);
	lstOfKeyWordsSide.Append(MfKeyExtrudedFrom);
	//
	CATLISTV(CATISpecObject_var) lstOfProfileElemSide;
	CATLISTV(CATISpecObject_var) lstOfBRepEdgeSideOnPad;
	CATIMfBRep_var spiBrepFeatureSideOnPad = NULL_var;
	for (int i=1; i<spLst2DGeoOnSketch.Size();i++)
	{
		lstOfProfileElemSide.Append(spLst2DGeoOnSketch[i]);
		lstOfProfileElemSide.Append(spLst2DGeoOnSketch[i+1]);
		//

		spiBrepFeatureSideOnPad = spBRepFactOnDoc->CreateMfRBRep(lstOfShapeFeatureSide,lstOfKeyWordsSide,lstOfProfileElemSide,NULL_var);
		if (spiBrepFeatureSideOnPad == NULL_var)
		{
			return;
		}

		lstOfBRepEdgeSideOnPad.Append(spiBrepFeatureSideOnPad);
		lstOfProfileElemSide = NULL;
	}

	lstOfProfileElemSide.Append(spLst2DGeoOnSketch[spLst2DGeoOnSketch.Size()]);
	lstOfProfileElemSide.Append(spLst2DGeoOnSketch[1]);
	//
	spiBrepFeatureSideOnPad = spBRepFactOnDoc->CreateMfRBRep(lstOfShapeFeatureSide,lstOfKeyWordsSide,lstOfProfileElemSide,NULL_var);
	if (spiBrepFeatureSideOnPad == NULL_var)
	{
		return;
	}

	lstOfBRepEdgeSideOnPad.Append(spiBrepFeatureSideOnPad);

	//
	CATISpecObject_var spSpecOnFilletSide = NULL_var;
	double dRadius;
	dRadius = _pDlg->GetSpinnerRadius()->GetCurrentValue();
	spSpecOnFilletSide = spPrtFactOnDoc->CreateSolidFillet(&lstOfBRepEdgeSideOnPad,TANGENCY,dRadius);

	if (spSpecOnFilletSide == NULL_var)
	{
		return;
	}
	spSpecObjOnPart->Update();

	//倒角，通过从CATCell中特征化出Brep元素，并且过滤出想要的线段，生成BrepEdge的list
	CATLISTV(CATISpecObject_var) lstBRepFeatures;
	GetBRepFeaturesLines(spPartOnCurrent,lstBRepFeatures);
	cout<<"lstBRepFeatures.size  "<<lstBRepFeatures.Size()<<endl;
	CATISpecObject_var spSpecOnFilletRest = NULL_var;
	spSpecOnFilletRest = spPrtFactOnDoc->CreateSolidFillet(&lstBRepFeatures,TANGENCY,dRadius);
	if (spSpecOnFilletRest == NULL_var)
	{
		return;
	}
	//
	spSpecObjOnPart->Update();
	//
	ExitCmd(data);
}

HRESULT CreateCubeFilletCmd::GetCurrentPartInformation(CATIPrtFactory_var &spPrtFactory,
												CATISketchFactory_var &spSketchFactory,
												CATICkeParmFactory_var &spParmFactory)
{

	HRESULT rc = E_FAIL;

	CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor == NULL)
	{
		return E_FAIL;
	}
	CATDocument *pDoc = pEditor ->GetDocument();
	if (pDoc == NULL)
	{
		return E_FAIL;
	}
	CATIContainerOfDocument_var spConODocs = pDoc;
	if (spConODocs == NULL_var)
	{
		return E_FAIL;
	}
	CATIContainer * pSpecContainer = NULL;
	rc = spConODocs ->GetSpecContainer(pSpecContainer);
	if (pSpecContainer == NULL_var)
	{
		return E_FAIL;
	}
	rc = pSpecContainer->QueryInterface(IID_CATIPrtFactory,(void**)&spPrtFactory);
	if (spPrtFactory == NULL_var)
	{
		return E_FAIL;
	}
	rc = pSpecContainer->QueryInterface(IID_CATISketchFactory,(void**)&spSketchFactory);
	if (spSketchFactory == NULL_var)
	{
		return E_FAIL;
	}
	rc = pSpecContainer->QueryInterface(IID_CATICkeParmFactory,(void**)&spParmFactory);
	if (spParmFactory == NULL_var)
	{
		return E_FAIL;
	}

	return rc;
}

HRESULT CreateCubeFilletCmd::GetCurrentPartInformationUpdate(CATIPrtFactory_var &spPrtFactory,
													   CATISketchFactory_var &spSketchFactory,
													   CATICkeParmFactory_var &spParmFactory,
													   CATIMfBRepFactory_var &spBrepFactory)
{

	HRESULT rc = E_FAIL;

	CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor == NULL)
	{
		return E_FAIL;
	}
	CATDocument *pDoc = pEditor ->GetDocument();
	if (pDoc == NULL)
	{
		return E_FAIL;
	}
	CATIContainerOfDocument_var spConODocs = pDoc;
	if (spConODocs == NULL_var)
	{
		return E_FAIL;
	}
	CATIContainer * pSpecContainer = NULL;
	rc = spConODocs ->GetSpecContainer(pSpecContainer);
	if (pSpecContainer == NULL_var)
	{
		return E_FAIL;
	}
	rc = pSpecContainer->QueryInterface(IID_CATIPrtFactory,(void**)&spPrtFactory);
	if (spPrtFactory == NULL_var)
	{
		return E_FAIL;
	}
	rc = pSpecContainer->QueryInterface(IID_CATISketchFactory,(void**)&spSketchFactory);
	if (spSketchFactory == NULL_var)
	{
		return E_FAIL;
	}
	rc = pSpecContainer->QueryInterface(IID_CATICkeParmFactory,(void**)&spParmFactory);
	if (spParmFactory == NULL_var)
	{
		return E_FAIL;
	}

	rc = pSpecContainer->QueryInterface(IID_CATIMfBRepFactory,(void**)&spBrepFactory);
	if (spBrepFactory == NULL_var)
	{
		return E_FAIL;
	}

	return rc;
}

HRESULT CreateCubeFilletCmd::GetDatumPlanes(CATISpecObject_var spSpecObjPart,CATISpecObject_var &spSpecPlaneXOY,CATISpecObject_var &spSpecPlaneYOZ,CATISpecObject_var &spSpecPlaneXOZ)
{
	HRESULT rc = E_FAIL;
	if (spSpecObjPart == NULL_var)
	{
		return E_FAIL;
	}
	CATIPrtPart_var spPart = NULL_var;
	spSpecObjPart->QueryInterface(IID_CATIPrtPart, (void**)&spPart);
	if (spPart == NULL_var)
	{
		return E_FAIL;
	}
	//获取基准面
	CATLISTV(CATISpecObject_var) spListRefPlanes = NULL;
	spListRefPlanes = spPart->GetReferencePlanes();
	spSpecPlaneXOY = spListRefPlanes[1];
	spSpecPlaneYOZ = spListRefPlanes[2];
	spSpecPlaneXOZ = spListRefPlanes[3];
	if (spSpecPlaneXOY == NULL_var || spSpecPlaneYOZ == NULL_var || spSpecPlaneXOZ == NULL_var)
	{
		return E_FAIL;
	}
	else
	{
		rc = S_OK;
	}
	return rc;
}

void CreateCubeFilletCmd::GetCurrentObject(CATISpecObject_var &spSpecObjPart)
{
	CATFrmEditor *pFrmEditor = CATFrmEditor::GetCurrentEditor();
	if (pFrmEditor == NULL)
	{
		return ;
	}
	CATDocument *pDoc = pFrmEditor->GetDocument();
	if(NULL==pDoc)
	{
		return ;
	}
	CATInit * piInitOnDoc = NULL;
	HRESULT rc = pDoc->QueryInterface(IID_CATInit, (void**)&piInitOnDoc);
	if(SUCCEEDED(rc)&&piInitOnDoc!=NULL) 
	{
		CATIPrtContainer *piPrtContainerOnRoot =NULL;
		piPrtContainerOnRoot =(CATIPrtContainer*)piInitOnDoc->GetRootContainer("CATIPrtContainer");
		if (piPrtContainerOnRoot != NULL)
		{
			spSpecObjPart = piPrtContainerOnRoot->GetPart() ;
			piPrtContainerOnRoot->Release();
			piPrtContainerOnRoot = NULL;
		}
		piInitOnDoc->Release();
		piInitOnDoc=NULL;

	}
}


HRESULT CreateCubeFilletCmd::CreateSketchSquare(CATISketchFactory_var spSktFactory,
									            CATISpecObject_var spSupportPlane,
									            CATISpecObject_var &spSpecSketch)
{
	HRESULT rc = E_FAIL;
	if (spSktFactory == NULL_var || spSupportPlane == NULL_var)
	{
		return E_FAIL;
	}
	spSpecSketch = spSktFactory->CreateSketch(spSupportPlane,0);
	if (spSpecSketch == NULL_var)
	{
		return E_FAIL;
	}
	//
	CATISketchEditor_var spSketchEditor = NULL_var;
	spSpecSketch->QueryInterface(IID_CATISketchEditor,(void**)&spSketchEditor);
	if (spSketchEditor == NULL_var)
	{
		return E_FAIL;
	}
	rc = spSketchEditor->OpenEdition();
	//获得草图工厂
	CATI2DWFFactory_var spWF2DFactOnSketch(spSketchEditor);
	if (spWF2DFactOnSketch == NULL_var)
	{
		return E_FAIL;
	}
	//获得草图约束工厂
	CATI2DConstraintFactory_var spConstraint2DFactory(spSketchEditor);
	if (spConstraint2DFactory == NULL_var)
	{
		return E_FAIL;
	}
	CATISketch_var spSketch = NULL_var;
	spSpecSketch->QueryInterface(IID_CATISketch,(void**)&spSketch);
	if (spSketch == NULL_var)
	{
		return E_FAIL;
	}
	//获取草图坐标轴
	CATI2DAxis_var spSupport;
	spSketch->GetAbsolute2DAxis(spSupport);
	CATISpecObject_var spSpecHDirection = NULL_var;
	CATISpecObject_var spSpecVDirection = NULL_var;
	spSpecHDirection = spSupport->GetHDirection();
	spSpecVDirection = spSupport->GetVDirection();
	//----画四边形
	//画点
	//
	double d2DPoint1_H = 0;
	double d2DPoint1_V = 0;
	double d2DPoint1[2] = {d2DPoint1_H,d2DPoint1_V};
	CATISpecObject_var sp2DPoint1 = NULL_var;
	sp2DPoint1 = spWF2DFactOnSketch->CreatePoint(d2DPoint1);
	//
	double d2DPoint2_H = 100;
	double d2DPoint2_V = 0;
	double d2DPoint2[2] = {d2DPoint2_H,d2DPoint2_V};
	CATISpecObject_var sp2DPoint2 = NULL_var;
	sp2DPoint2 = spWF2DFactOnSketch->CreatePoint(d2DPoint2);
	//
	double d2DPoint3_H = 100;
	double d2DPoint3_V = 100;
	double d2DPoint3[2] = {d2DPoint3_H,d2DPoint3_V};
	CATISpecObject_var sp2DPoint3 = NULL_var;
	sp2DPoint3 = spWF2DFactOnSketch->CreatePoint(d2DPoint3);
	//
	double d2DPoint4_H = 0;
	double d2DPoint4_V = 100;
	double d2DPoint4[2] = {d2DPoint4_H,d2DPoint4_V};
	CATISpecObject_var sp2DPoint4 = NULL_var;
	sp2DPoint4 = spWF2DFactOnSketch->CreatePoint(d2DPoint4);
	//画线
	//
	CATISpecObject_var sp2DLine1 = spWF2DFactOnSketch->CreateLine(d2DPoint1,d2DPoint2);
	if (sp2DLine1 == NULL_var)
	{
		return E_FAIL;
	}
	//
	CATISpecObject_var sp2DLine2 = spWF2DFactOnSketch->CreateLine(d2DPoint2,d2DPoint3);
	if (sp2DLine2 == NULL_var)
	{
		return E_FAIL;
	}
	//
	CATISpecObject_var sp2DLine3 = spWF2DFactOnSketch->CreateLine(d2DPoint3,d2DPoint4);
	if (sp2DLine3 == NULL_var)
	{
		return E_FAIL;
	}
	//
	CATISpecObject_var sp2DLine4 = spWF2DFactOnSketch->CreateLine(d2DPoint4,d2DPoint1);
	if (sp2DLine4 == NULL_var)
	{
		return E_FAIL;
	}
	//线线之间连接
	//
	CATI2DCurve_var sp2DCurve1(sp2DLine1);
	if (sp2DCurve1 == NULL_var)
	{
		return E_FAIL;
	}
	sp2DCurve1->SetStartPoint(sp2DPoint1);
	sp2DCurve1->SetEndPoint(sp2DPoint2);
	//
	CATI2DCurve_var sp2DCurve2(sp2DLine2);
	if (sp2DCurve2 == NULL_var)
	{
		return E_FAIL;
	}
	sp2DCurve2->SetStartPoint(sp2DPoint2);
	sp2DCurve2->SetEndPoint(sp2DPoint3);
	//
	CATI2DCurve_var sp2DCurve3(sp2DLine3);
	if (sp2DCurve3 == NULL_var)
	{
		return E_FAIL;
	}
	sp2DCurve3->SetStartPoint(sp2DPoint3);
	sp2DCurve3->SetEndPoint(sp2DPoint4);
	//
	CATI2DCurve_var sp2DCurve4(sp2DLine4);
	if (sp2DCurve4 == NULL_var)
	{
		return E_FAIL;
	}
	sp2DCurve4->SetStartPoint(sp2DPoint4);
	sp2DCurve4->SetEndPoint(sp2DPoint1);
	//约束
	CATISpecObject_var sp2DCst1 = spConstraint2DFactory->CreateConstraint(sp2DLine1,NULL,sp2DLine3,NULL,NULL,NULL,NULL,Cst2DType_Distance,0,0);
	CATISpecObject_var sp2DCst2 = spConstraint2DFactory->CreateConstraint(sp2DLine2,NULL,sp2DLine4,NULL,NULL,NULL,NULL,Cst2DType_Distance,0,0);
	//CATISpecObject_var sp2DCst3 = spConstraint2DFactory->CreateConstraint(sp2DLine1,NULL,spSpecHDirection,NULL,NULL,NULL,NULL,Cst2DType_Distance,0,0);
	//CATISpecObject_var sp2DCst4 = spConstraint2DFactory->CreateConstraint(sp2DLine4,NULL,spSpecVDirection,NULL,NULL,NULL,NULL,Cst2DType_Distance,0,1);

	//Cst2DType_Reference就是Fix操作
	CATISpecObject_var sp2DCst3 = spConstraint2DFactory->CreateConstraint(sp2DLine1,NULL,NULL,NULL,NULL,NULL,NULL,Cst2DType_Reference,0,0);
	CATISpecObject_var sp2DCst4 = spConstraint2DFactory->CreateConstraint(sp2DLine4,NULL,NULL,NULL,NULL,NULL,NULL,Cst2DType_Reference,0,1);

	rc = spSketchEditor->CloseEdition();

	return rc;
}


HRESULT CreateCubeFilletCmd::CreatePad(CATIPrtFactory_var spPrtFactory,
								       CATISpecObject_var spSpecSketch,
								       double dFirstLimit,
									   double dSecondLimit,
									   CATMathDirection iDirection,
								       CATISpecObject_var &spSpecPad)
{
	HRESULT rc = E_FAIL;
	if (spPrtFactory == NULL_var || spSpecSketch == NULL_var)
	{
		return E_FAIL;
	}
	spSpecPad = spPrtFactory->CreatePad(spSpecSketch,dFirstLimit,dSecondLimit,iDirection);
	if (spSpecPad == NULL_var)
	{
		return E_FAIL;
	}
	//
	rc = S_OK;
	return rc;
}

void CreateCubeFilletCmd::DefineInWorkObject(CATIPrtPart_var ispiPart,
											 int iToolType)
{
	CATIPartRequest *piPartAsRequest = NULL;
	HRESULT rc = ispiPart->QueryInterface(IID_CATIPartRequest, (void**)&piPartAsRequest);
	if (FAILED(rc)||piPartAsRequest == NULL)
	{
		return;
	}
	CATISpecObject_var spMainBody = NULL_var;
	rc = piPartAsRequest->GetMainBody("", spMainBody);
	if (spMainBody == NULL_var)
	{
		return;
	}
	CATIBasicTool_var spCurrentTool = ispiPart->GetCurrentTool();
	CATIMechanicalTool_var spMechanicalSet = spCurrentTool;
	CATIMmiNonOrderedGeometricalSet_var spGeometricalSet = spCurrentTool;
	if (iToolType == 1)
	{
		if (spMechanicalSet == NULL_var)
		{
			ispiPart->SetCurrentFeature(spMainBody);
		}
	}
	return;
}

//该方法暂时获取失败
void CreateCubeFilletCmd::GetAllBRepFeatures(CATIPrtPart_var ispiPart,
											 CATLISTV(CATISpecObject_var) &lstBRepFeatures)
{
	CATIPartRequest *piPartAsRequest = NULL;
	HRESULT rc = ispiPart->QueryInterface(IID_CATIPartRequest, (void**)&piPartAsRequest);
	if (FAILED(rc)||piPartAsRequest == NULL)
	{
		return;
	}
	CATISpecObject_var spMainBody = NULL_var;
	rc = piPartAsRequest->GetMainBody("", spMainBody);
	if (FAILED(rc) || spMainBody == NULL_var)
	{
		return;
	}
	CATIBodyRequest_var spiBodyRequestOnMainBody = spMainBody;
	CATLISTV(CATBaseUnknown_var) lstResult;
	rc = spiBodyRequestOnMainBody->GetResults("",lstResult);
	if (FAILED(rc) || lstResult == NULL)
	{
		return;
	}
	int nbLstResult = lstResult.Size();
	cout<<"lstResult.size = "<<nbLstResult<<endl;
	for (int i =1; i<= nbLstResult; i++)
	{
		CATIAlias_var spAlias = lstResult[i];
		CATUnicodeString strAlias = spAlias->GetAlias();
		cout<<strAlias<<endl;
	}
	CATIGeometricalElement_var spiGeoFeatureOnResult = lstResult[1];
	if (spiGeoFeatureOnResult == NULL_var)
	{
		return;
	}
	lstBRepFeatures = spiGeoFeatureOnResult->GetBRepFeatures("CATIMfRedge");
	if (lstBRepFeatures == NULL)
	{
		return;
	}
	return;
}


void CreateCubeFilletCmd::GetBRepFeaturesLines(CATIPrtPart_var ispiPart,
											 CATLISTV(CATISpecObject_var) &lstBRepFeaturesCircle)
{
	CATIPartRequest *piPartAsRequest = NULL;
	HRESULT rc = ispiPart->QueryInterface(IID_CATIPartRequest, (void**)&piPartAsRequest);
	if (FAILED(rc)||piPartAsRequest == NULL)
	{
		return;
	}
	CATISpecObject_var spMainBody = NULL_var;
	rc = piPartAsRequest->GetMainBody("", spMainBody);
	if (FAILED(rc) || spMainBody == NULL_var)
	{
		return;
	}
	CATIBodyRequest_var spiBodyRequestOnMainBody = spMainBody;
	CATLISTV(CATBaseUnknown_var) lstResult;
	rc = spiBodyRequestOnMainBody->GetResults("",lstResult);
	if (FAILED(rc) || lstResult == NULL)
	{
		return;
	}
	int nbLstResult = lstResult.Size();
	cout<<"lstResult.size = "<<nbLstResult<<endl;
	for (int i =1; i<= nbLstResult; i++)
	{
		CATIAlias_var spAlias = lstResult[i];
		CATUnicodeString strAlias = spAlias->GetAlias();
		cout<<strAlias<<endl;
	}
	CATIGeometricalElement_var spiGeoFeatureOnResult = lstResult[1];
	if (spiGeoFeatureOnResult == NULL_var)
	{
		return;
	}
	CATBody_var spBodyTopo = spiGeoFeatureOnResult->GetBodyResult();
	if (spBodyTopo == NULL_var)
	{
		return;
	}
	CATLISTP(CATCell) lstCells = NULL;
	spBodyTopo->GetAllCells(lstCells,1);
	for (int iCurrentCell = 1; iCurrentCell <= lstCells.Size(); iCurrentCell++)
	{
		CATGeometry *pGeometry = lstCells[iCurrentCell]->GetGeometry();
		if (NULL != pGeometry && pGeometry->IsATypeOf(CATCurveType))
		{
			CATCurve *pCurve = (CATCurve *)pGeometry;
			CATMathCurve *pMathCurve = pCurve->GetMathCurve();
			if (pMathCurve && pMathCurve->IsATypeOf(CATMathLineType))
			{
				CATMathLine *pMathLine = (CATMathLine *)pMathCurve;
				CATMathVector dirMathLine;
				pMathLine->GetDirection(dirMathLine);
				CATMathVector dirZ(0,0,1);
				CATMathVector dirY(0,1,0);
				if (dirMathLine.IsParallel(dirZ) || dirMathLine.IsParallel(dirY))
				{
					delete pMathLine;
					pMathLine = NULL;
					continue;
				}
				CATCell_var spCell = lstCells[iCurrentCell];
				CATIBRepAccess_var spBRepAccess = ::CATBRepDecode(spCell,spiGeoFeatureOnResult);
				if (NULL_var != spBRepAccess)
				{
					CATIFeaturize *piFeaturizeOnCell = NULL;
					rc = spBRepAccess->QueryInterface(IID_CATIFeaturize, (void**)&piFeaturizeOnCell);
					if (FAILED(rc) || piFeaturizeOnCell == NULL)
					{
						return;
					}
					CATISpecObject_var spSpecFeaturizeOnCell = piFeaturizeOnCell->FeaturizeR();
					lstBRepFeaturesCircle.Append(spSpecFeaturizeOnCell);
				}
				delete pMathCurve;
				pMathCurve = NULL;
			}
		}
	}
	return;
}