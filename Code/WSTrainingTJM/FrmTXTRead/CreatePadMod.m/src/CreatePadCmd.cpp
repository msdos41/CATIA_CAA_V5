// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// CreatePadCmd.cpp
// The state chart based command: CreatePadCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Dec 2018  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "CreatePadCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"


CATCreateClass( CreatePadCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CreatePadCmd::CreatePadCmd() :
  CATStateCommand ("CreatePadCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_Indication(NULL)
{
	_pDlg = NULL;
	_pDlg = new CreatePadDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CreatePadCmd::~CreatePadCmd()
{
   if (_Indication != NULL) 
      _Indication->RequestDelayedDestruction();

   if (_pDlg != NULL)
   {
	   _pDlg->RequestDelayedDestruction();
	   _pDlg = NULL;
   }
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void CreatePadCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&CreatePadCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&CreatePadCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&CreatePadCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&CreatePadCmd::ActionOK,
		NULL);
}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CreatePadCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

void CreatePadCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
}

void CreatePadCmd::ActionOK(void * data)
{
	CATIPrtFactory_var spPrtFactOnDoc = NULL_var;
	CATISketchFactory_var spSketchFactOnDoc = NULL_var;
	CATICkeParmFactory_var spCkeParmFactOnDoc = NULL_var;
	HRESULT rc = GetCurrentPartInformation(spPrtFactOnDoc,spSketchFactOnDoc,spCkeParmFactOnDoc);
	if (FAILED(rc))
	{
		return;
	}

	CATISpecObject_var spSpecObjOnDoc = NULL_var;
	GetCurrentObject(spSpecObjOnDoc);
	if (NULL_var == spSpecObjOnDoc)
	{
		return;
	}

	CATISpecObject_var spSpecPlaneXOY = NULL_var;
	CATISpecObject_var spSpecPlaneYOZ = NULL_var;
	CATISpecObject_var spSpecPlaneXOZ = NULL_var;
	rc = GetDatumPlanes(spSpecObjOnDoc,spSpecPlaneXOY,spSpecPlaneYOZ,spSpecPlaneXOZ);
	if (FAILED(rc))
	{
		return;
	}

	CATISpecObject_var spSpecObjOnSketch = spSketchFactOnDoc->CreateSketch(spSpecPlaneXOY);
	if (NULL_var == spSpecObjOnSketch)
	{
		return;
	}
	spSpecObjOnSketch->Update();

	CATISketch_var spSketchOnCurrent = spSpecObjOnSketch;
	if (NULL_var == spSketchOnCurrent)
	{
		return;
	}
	spSketchOnCurrent->OpenEdition();

	CATI2DWFFactory_var sp2DFactOnSketch = spSketchOnCurrent;
	//获取当前草图的坐标原点
	CATI2DAxis_var spAxisOnSketch = NULL_var;
	rc = spSketchOnCurrent->GetAbsolute2DAxis(spAxisOnSketch);
	if (FAILED(rc) || spAxisOnSketch ==NULL_var)
	{
		return;
	}
	CATI2DPoint_var spOriginPointOnSketch = spAxisOnSketch->GetOriginPoint();
	////画线
	//CATI2DPoint_var spPt_StartOnLine1;
	//CATI2DPoint_var spPt_EndOnLine1;
	//CATI2DLine_var spLine1;
	//double pt_StartOnLine1[2] = {0,0};
	//double pt_EndOnLine1[2] = {50,50};

	//spPt_StartOnLine1 = sp2DFactOnSketch->CreatePoint(pt_StartOnLine1);
	//spPt_EndOnLine1 = sp2DFactOnSketch->CreatePoint(pt_EndOnLine1);
	//spLine1 = sp2DFactOnSketch->CreateLine(pt_StartOnLine1,pt_EndOnLine1);

	//画圆
	CATI2DCircle_var spCircle1;
	double pt_CenterOnCircle1[2] = {0,0};
	double dRadiusOnCircle1 = 20;
	spCircle1 = sp2DFactOnSketch->CreateCircle(pt_CenterOnCircle1,dRadiusOnCircle1);

	//对圆做约束
	CATI2DConstraintFactory_var spConstraintFactOnSketch = spSketchOnCurrent;
	spConstraintFactOnSketch->CreateConstraint(spCircle1,NULL,NULL,NULL,NULL,NULL,NULL,Cst2DType_Radius,0,0);
	CATI2DPoint_var spCenterOnCirle1 = spCircle1->GetCenter();
	spConstraintFactOnSketch->CreateConstraint(spOriginPointOnSketch,NULL,spCenterOnCirle1,NULL,NULL,NULL,NULL,Cst2DType_On,0,0);
	
	spSketchOnCurrent->CloseEdition();

	//创建Pad
	CATMathDirection dirZ(0.,0.,1.);
	double firstLimit = 20;
	double secondLimit = 20;

	CATISpecObject_var spSpecObjOnBody = spPrtFactOnDoc->CreatePad(spSketchOnCurrent,firstLimit,secondLimit,dirZ);

	spSpecObjOnDoc->Update();

	return;
}

HRESULT CreatePadCmd::GetCurrentPartInformation(CATIPrtFactory_var &spPrtFactory,
												CATISketchFactory_var &spSketchFactory,
												CATICkeParmFactory_var &spParmFactory)
{

	HRESULT rc = E_FAIL;

	CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor == NULL)
	{
		return E_FAIL;
	}
	CATDocument *pDoc = pEditor ->GetDocument();
	if (pDoc == NULL)
	{
		return E_FAIL;
	}
	CATIContainerOfDocument_var spConODocs = pDoc;
	if (spConODocs == NULL_var)
	{
		return E_FAIL;
	}
	CATIContainer * pSpecContainer = NULL;
	rc = spConODocs ->GetSpecContainer(pSpecContainer);
	if (pSpecContainer == NULL_var)
	{
		return E_FAIL;
	}
	rc = pSpecContainer->QueryInterface(IID_CATIPrtFactory,(void**)&spPrtFactory);
	if (spPrtFactory == NULL_var)
	{
		return E_FAIL;
	}
	rc = pSpecContainer->QueryInterface(IID_CATISketchFactory,(void**)&spSketchFactory);
	if (spSketchFactory == NULL_var)
	{
		return E_FAIL;
	}
	rc = pSpecContainer->QueryInterface(IID_CATICkeParmFactory,(void**)&spParmFactory);
	if (spParmFactory == NULL_var)
	{
		return E_FAIL;
	}

	return rc;
}

HRESULT CreatePadCmd::GetDatumPlanes(CATISpecObject_var spSpecObjPart,CATISpecObject_var &spSpecPlaneXOY,CATISpecObject_var &spSpecPlaneYOZ,CATISpecObject_var &spSpecPlaneXOZ)
{
	HRESULT rc = E_FAIL;
	if (spSpecObjPart == NULL_var)
	{
		return E_FAIL;
	}
	CATIPrtPart_var spPart = NULL_var;
	spSpecObjPart->QueryInterface(IID_CATIPrtPart, (void**)&spPart);
	if (spPart == NULL_var)
	{
		return E_FAIL;
	}
	//获取基准面
	CATLISTV(CATISpecObject_var) spListRefPlanes = NULL;
	spListRefPlanes = spPart->GetReferencePlanes();
	spSpecPlaneXOY = spListRefPlanes[1];
	spSpecPlaneYOZ = spListRefPlanes[2];
	spSpecPlaneXOZ = spListRefPlanes[3];
	if (spSpecPlaneXOY == NULL_var || spSpecPlaneYOZ == NULL_var || spSpecPlaneXOZ == NULL_var)
	{
		return E_FAIL;
	}
	else
	{
		rc = S_OK;
	}
	return rc;
}

void CreatePadCmd::GetCurrentObject(CATISpecObject_var &spSpecObjPart)
{
	CATFrmEditor *pFrmEditor = CATFrmEditor::GetCurrentEditor();
	if (pFrmEditor == NULL)
	{
		return ;
	}
	CATDocument *pDoc = pFrmEditor->GetDocument();
	if(NULL==pDoc)
	{
		return ;
	}
	CATInit * piInitOnDoc = NULL;
	HRESULT rc = pDoc->QueryInterface(IID_CATInit, (void**)&piInitOnDoc);
	if(SUCCEEDED(rc)&&piInitOnDoc!=NULL) 
	{
		CATIPrtContainer *piPrtContainerOnRoot =NULL;
		piPrtContainerOnRoot =(CATIPrtContainer*)piInitOnDoc->GetRootContainer("CATIPrtContainer");
		if (piPrtContainerOnRoot != NULL)
		{
			spSpecObjPart = piPrtContainerOnRoot->GetPart() ;
			piPrtContainerOnRoot->Release();
			piPrtContainerOnRoot = NULL;
		}
		piInitOnDoc->Release();
		piInitOnDoc=NULL;

	}
}