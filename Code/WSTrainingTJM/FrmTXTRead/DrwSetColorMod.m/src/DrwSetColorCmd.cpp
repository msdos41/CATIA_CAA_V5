// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// DrwSetColorCmd.cpp
// The state chart based command: DrwSetColorCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Dec 2018  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "DrwSetColorCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"





CATCreateClass( DrwSetColorCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
DrwSetColorCmd::DrwSetColorCmd() :
  CATStateCommand ("DrwSetColorCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_Indication(NULL)
{
	_pDlg = NULL;
	_pDlg = new DrwSetColorDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pFeaImpAgt = NULL;

	_pDlgAgt = NULL;

	_pEditor = CATFrmEditor::GetCurrentEditor();
	_pHSO = NULL;
	if (NULL != _pEditor)
	{
		_pHSO = _pEditor->GetHSO();
	}
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
DrwSetColorCmd::~DrwSetColorCmd()
{
   if (_Indication != NULL) 
      _Indication->RequestDelayedDestruction();

   if (_pDlg != NULL)
   {
	   _pDlg->RequestDelayedDestruction();
	   _pDlg = NULL;
   }

   if (_pFeaImpAgt != NULL)
   {
	   _pFeaImpAgt->RequestDelayedDestruction();
	   _pFeaImpAgt = NULL;
   }

   if (_pDlgAgt != NULL)
   {
	   _pDlgAgt->RequestDelayedDestruction();
	   _pDlgAgt = NULL;
   }

   _pEditor = NULL;

   _pHSO = NULL;
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void DrwSetColorCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&DrwSetColorCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&DrwSetColorCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&DrwSetColorCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&DrwSetColorCmd::ActionOK,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaAPPLYNotification(),
		(CATCommandMethod)&DrwSetColorCmd::ActionApply,
		NULL);

	//
	_pFeaImpAgt = new CATFeatureImportAgent("Select an Element");

	_pDlgAgt = new CATDialogAgent("Select Dialog Agent");

	//
	_pFeaImpAgt->SetOrderedElementType("CATIMfZeroDimResult");
	_pFeaImpAgt->AddOrderedElementType("CATIMfMonoDimResult");
	_pFeaImpAgt->AddOrderedElementType("CATIMfBiDimResult");
	_pFeaImpAgt->AddOrderedElementType("CATIMfTriDimResult");
	_pFeaImpAgt->AddOrderedElementType("CATIMfInfiniteResult");
	_pFeaImpAgt->AddOrderedElementType("CATISketchElement"); //获取草图元素，同时也能获取2维图纸中的元素
	_pFeaImpAgt->SetBehavior(CATDlgEngWithPrevaluation | CATDlgEngWithCSO     | CATDlgEngOneShot);


	//
	_pDlgAgt->AcceptOnNotify(_pDlg->GetSelectorListObjectSelection(),_pDlg->GetSelectorListObjectSelection()->GetListSelectNotification());

	//
	CATDialogState *pDlgState = GetInitialState("Select an Element");
	pDlgState->AddDialogAgent(_pFeaImpAgt);
	pDlgState->AddDialogAgent(_pDlgAgt);

	//
	AddTransition(pDlgState,pDlgState,
		IsOutputSetCondition(_pFeaImpAgt),
		Action((ActionMethod)& DrwSetColorCmd::SelectElem));


	//
	//AddAnalyseNotificationCB(_pDlg->GetComboColor(),
	//	_pDlg->GetComboColor()->GetComboSelectNotification(),
	//	(CATCommandMethod)&DrwSetColorCmd::ComboColorChange,
	//	NULL);

	//AddAnalyseNotificationCB(_pDlg->GetComboLineType(),
	//	_pDlg->GetComboLineType()->GetComboSelectNotification(),
	//	(CATCommandMethod)&DrwSetColorCmd::ComboLineTypeChange,
	//	NULL);


}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean DrwSetColorCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

void DrwSetColorCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
}

void DrwSetColorCmd::ActionOK(void * data)
{
	ActionApply(data);
	ExitCmd(data);
}

void DrwSetColorCmd::ActionApply(void * data)
{
	//判断是否选了元素
	if ( NULL_var == _spSpecSelection)
	{
		MessageBox(NULL, _T("Please select object. "), _T("Note"), MB_OK); 
		return;
	}
	//设置颜色
	unsigned char  iRed = 0;
	unsigned char  iGreen =0;
	unsigned char  iBlue= 0;
	int selIndex = _pDlg->GetComboColor()->GetSelect();
	CATUnicodeString str = "";
	_pDlg->GetComboColor()->GetLine(str,iRed,iGreen,iBlue,selIndex);
	int iColorR = (int) iRed;
	int iColorG = (int) iGreen;
	int iColorB = (int) iBlue;
	HRESULT rc = SetSpecObjColor(_spSpecSelection,iColorR,iColorG,iColorB);
	if (FAILED(rc))
	{
		return;
	}
	//设置线型
	int selIndexLineType = _pDlg->GetComboLineType()->GetSelect();
	int iIndexLineType = selIndexLineType + 1;
	rc = SetSpecObjLineType(_spSpecSelection,iIndexLineType);
	if (FAILED(rc))
	{
		return;
	}
	//设置线粗
	int selIndexLineTH = _pDlg->GetComboLintThickness()->GetSelect();
	int iIndexLineTH = selIndexLineTH + 1;
	rc = SetSpecObjLineThickness(_spSpecSelection,iIndexLineTH);
	if (FAILED(rc))
	{
		return;
	}
	//对选取元素的所有关联元素上色
	CATLISTV(CATISpecObject_var) lstRelateItem = NULL;
	//GetRelatedElement(_piSpecSelection, lstRelateItem);
	GetRelatedElementUpdate(_spSpecSelection, lstRelateItem);
	for (int i = 1; i<= lstRelateItem.Size(); i++)
	{
		rc = SetSpecObjColor(lstRelateItem[i],iColorR,iColorG,iColorB);
		if (FAILED(rc))
		{
			return;
		}
		rc = SetSpecObjLineType(lstRelateItem[i],iIndexLineType);
		if (FAILED(rc))
		{
			return;
		}
		rc = SetSpecObjLineThickness(lstRelateItem[i],iIndexLineTH);
		if (FAILED(rc))
		{
			return;
		}
	}
}

//选取元素，高亮，并显示在选择框中
CATBoolean DrwSetColorCmd::SelectElem(void * data)
{
	if (_pHSO != NULL)
	{
		_pHSO->Empty();
	}

	SelectElement(_pFeaImpAgt,_spSpecSelection);
	//
	CATIAlias_var spAlias = _spSpecSelection;
	CATUnicodeString strAlias = "";
	if (spAlias != NULL_var)
	{
		strAlias = spAlias->GetAlias();
	}
	_pDlg->GetSelectorListObjectSelection()->ClearLine();
	_pDlg->GetSelectorListObjectSelection()->SetLine(strAlias,-1,CATDlgDataAdd);
	//
	//SetActiveDlgAgent(_piSpecSelection);
	SetHighlight(_pFeaImpAgt);
	//
	_pFeaImpAgt->InitializeAcquisition();

	return TRUE;
}

//选择元素，转换成SpecObj
void DrwSetColorCmd::SelectElement(CATFeatureImportAgent *pFeatAgent,CATISpecObject_var &spSpecOnSelection)   //输出的参数要加引用或者双指针
{
	HRESULT rc = E_FAIL;

	if (pFeatAgent == NULL)
	{
		return;
	}
	CATISpecObject *piSpecOnSelection = NULL;
	CATBaseUnknown *pSelection = pFeatAgent->GetElementValue(pFeatAgent->GetValue());
	if (NULL != pSelection)
	{
		rc = pSelection->QueryInterface(IID_CATISpecObject,(void**)&piSpecOnSelection);
		if (FAILED(rc))
		{
			return;
		}
		spSpecOnSelection = piSpecOnSelection;
	}
}

void DrwSetColorCmd::ComboColorChange( void * data )
{
	unsigned char  iRed = 0;
	unsigned char  iGreen =0;
	unsigned char  iBlue= 0;
	int selIndex = _pDlg->GetComboColor()->GetSelect();
	CATUnicodeString str = "";
	_pDlg->GetComboColor()->GetLine(str,iRed,iGreen,iBlue,selIndex);
	_pDlg->GetComboColor()->SetLine("",iRed,iGreen,iBlue,0,CATDlgDataModify);
	_pDlg->GetComboColor()->SetSelect(0,0);

}

void DrwSetColorCmd::ComboLineTypeChange(void * data)
{
	unsigned short Mask = 0xffff;
	unsigned short Repeat = 1;
	CATUnicodeString strVal = "";
	unsigned short Weight = 1;
	int selIndex = _pDlg->GetComboLineType()->GetSelect();
	_pDlg->GetComboLineType()->GetLine(strVal,Mask,Repeat,Weight,selIndex);
	_pDlg->GetComboLineType()->SetLine("",Mask,Repeat,Weight,0,CATDlgDataModify);
	_pDlg->GetComboLineType()->SetSelect(0,0);
}

//设置颜色
HRESULT DrwSetColorCmd::SetSpecObjColor(CATISpecObject_var iSpecObj,int iColorR,int iColorG,int iColorB)
{
	CATIVisProperties *piGraphProp=NULL;
	HRESULT rc = iSpecObj->QueryInterface(IID_CATIVisProperties,(void**)&piGraphProp);
	if( FAILED(rc) || piGraphProp == NULL ) return rc;

	CATVisPropertiesValues Attribut;
	Attribut.SetColor(iColorR,iColorG,iColorB);
	piGraphProp->SetPropertiesAtt(Attribut,CATVPColor,CATVPMesh ,0,0);
	piGraphProp->Release();
	piGraphProp=NULL;

	CATIModelEvents *piME = NULL;
	rc = iSpecObj->QueryInterface( IID_CATIModelEvents,(void **) &piME);
	if( FAILED(rc) || piME == NULL ) return rc;
	CATModifyVisProperties notif(iSpecObj, CATPathElement(iSpecObj), CATVPMesh ,CATVPColor,Attribut);
	piME->Dispatch(notif);
	piME->Release();
	piME= NULL ;

	return rc;
}

//设置线型
HRESULT DrwSetColorCmd::SetSpecObjLineType(CATISpecObject_var iSpecObj,int iIndexLineType)
{
	CATIVisProperties *piGraphProp=NULL;
	HRESULT rc = iSpecObj->QueryInterface(IID_CATIVisProperties,(void**)&piGraphProp);
	if( FAILED(rc) || piGraphProp == NULL ) return rc;
	//判断输出一下选择的到底是哪种
	CATVisGeomType TypeLine = CATVPLine;
	CATVisGeomType TypeEdge = CATVPEdge;
	HRESULT rc1 = piGraphProp->IsGeomTypeDefined(TypeEdge);
	if (FAILED(rc1))
	{
		cout<<"not a CATVPEdge"<<endl;
	}
	HRESULT rc2 = piGraphProp->IsGeomTypeDefined(TypeLine);
	if (FAILED(rc2))
	{
		cout<<"not a CATVPLine"<<endl;
	}
	//
	CATVisPropertiesValues Attribut;
	Attribut.SetLineType(iIndexLineType);
	piGraphProp->SetPropertiesAtt(Attribut,CATVPLineType,CATVPLine ,0,0);
	piGraphProp->Release();
	piGraphProp=NULL;

	CATIModelEvents *piME = NULL;
	rc = iSpecObj->QueryInterface( IID_CATIModelEvents,(void **) &piME);
	if( FAILED(rc) || piME == NULL ) return rc;
	CATModifyVisProperties notif(iSpecObj, CATPathElement(iSpecObj), CATVPLine ,CATVPLineType,Attribut);
	piME->Dispatch(notif);
	piME->Release();
	piME= NULL ;

	return rc;
}

//设置线粗
HRESULT DrwSetColorCmd::SetSpecObjLineThickness(CATISpecObject_var iSpecObj,int iIndexLineTH)
{
	CATIVisProperties *piGraphProp=NULL;
	HRESULT rc = iSpecObj->QueryInterface(IID_CATIVisProperties,(void**)&piGraphProp);
	if( FAILED(rc) || piGraphProp == NULL ) return rc;
	//判断输出一下选择的到底是哪种
	CATVisGeomType TypeLine = CATVPLine;
	CATVisGeomType TypeEdge = CATVPEdge;
	HRESULT rc1 = piGraphProp->IsGeomTypeDefined(TypeEdge);
	if (FAILED(rc1))
	{
		cout<<"not a CATVPEdge"<<endl;
	}
	HRESULT rc2 = piGraphProp->IsGeomTypeDefined(TypeLine);
	if (FAILED(rc2))
	{
		cout<<"not a CATVPLine"<<endl;
	}
	//
	CATVisPropertiesValues Attribut;
	Attribut.SetWidth(iIndexLineTH);
	piGraphProp->SetPropertiesAtt(Attribut,CATVPWidth,CATVPLine ,0,0);
	piGraphProp->Release();
	piGraphProp=NULL;

	CATIModelEvents *piME = NULL;
	rc = iSpecObj->QueryInterface( IID_CATIModelEvents,(void **) &piME);
	if( FAILED(rc) || piME == NULL ) return rc;
	CATModifyVisProperties notif(iSpecObj, CATPathElement(iSpecObj), CATVPLine ,CATVPWidth,Attribut);
	piME->Dispatch(notif);
	piME->Release();
	piME= NULL ;

	return rc;
}

void DrwSetColorCmd::SetActiveDlgAgent(CATISpecObject *spSpecOnDlgAgent)
{
	if (_pHSO != NULL)
	{
		_pHSO->Empty();
	}

	if ((spSpecOnDlgAgent != NULL) && (_pEditor != NULL) && (_pHSO != NULL))
	{
		CATIBuildPath *piBuildPath = NULL;
		HRESULT rc = spSpecOnDlgAgent->QueryInterface(IID_CATIBuildPath,(void**) &piBuildPath);
		if (SUCCEEDED(rc))
		{
			CATPathElement context = _pEditor->GetUIActiveObject();
			CATPathElement *pPathElement = NULL;

			rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
			if (pPathElement != NULL)
			{
				_pHSO->AddElement(pPathElement);
				pPathElement->Release();
				pPathElement = NULL;
			}
			piBuildPath->Release();
			piBuildPath = NULL;
		}
	}

}

void DrwSetColorCmd::SetHighlight(CATFeatureImportAgent *ipFeatImpAgt)
{

	CATPathElement* pPathEle = NULL;
	pPathEle = ipFeatImpAgt->GetValue();
	if (pPathEle != NULL)
	{
		_pHSO->Empty();
		_pHSO->AddElements(pPathEle);
		_pHSO->EndAddElements();
	}
}

HRESULT DrwSetColorCmd::GetRelatedElement(CATISpecObject *ipiSpecObj,CATLISTV(CATISpecObject_var) &lstRelateItem)
{
	//从拾取的元素找到对应的Product
	HRESULT rc = S_OK;
	CATIDftGenGeom *piGenGeom = NULL;
	rc = ipiSpecObj->QueryInterface(IID_CATIDftGenGeom, (void**)&piGenGeom);
	if (FAILED(rc)||piGenGeom == NULL)
	{
		return E_FAIL;
	}
	IUnknown *piUnknown = NULL;
	rc = piGenGeom->GetProduct(IID_CATIProduct,&piUnknown);
	if (FAILED(rc) || piUnknown == NULL)
	{
		return E_FAIL;
	}
	CATIProduct *piProd = NULL;
	rc = piUnknown->QueryInterface(IID_CATIProduct,(void**)&piProd);
	if (FAILED(rc) || piProd == NULL)
	{
		return E_FAIL;
	}
	CATIProduct_var spRefProd = piProd->GetReferenceProduct();
	cout<< spRefProd->GetPartNumber()<<endl;
	////根据获取的Product找到生成的所有图纸元素
	//先获取所有视图
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	CATDocument *pDoc = pEditor->GetDocument();
	CATIDrawing *piDrawing = NULL;
	CATIDftDocumentServices *piDftDocServices = NULL;
	rc = pDoc->QueryInterface(IID_CATIDftDocumentServices, (void **)&piDftDocServices);
	if (FAILED(rc) || piDftDocServices == NULL)
	{
		return E_FAIL;
	}
	piDftDocServices->GetDrawing(IID_CATIDrawing, (void **)&piDrawing);
	piDftDocServices->Release();
	if (piDrawing == NULL)
	{
		return E_FAIL;
	}
	CATISheet_var spCurrentSheet = piDrawing->GetCurrentSheet();
	CATLISTV(CATISpecObject_var) lstViews = NULL;
	lstViews = spCurrentSheet->GetViewList();
	if (lstViews == NULL)
	{
		return E_FAIL;
	}
	cout<<"Views Count: "<<lstViews.Size()<<endl;
	//从视图转到CATIDftGenGeomAccess接口
	for (int i = 1; i<= lstViews.Size(); i++)
	{
		CATIDftView *piView = NULL;
		rc = lstViews[i]->QueryInterface(IID_CATIDftView,(void**)&piView);
		if (FAILED(rc) || piView == NULL)
		{
			return E_FAIL;
		}
		IUnknown *piGenView = NULL;
		rc = piView->GetApplicativeExtension(IID_CATIDftGenView,&piGenView);
		if (FAILED(rc) || piGenView == NULL)
		{
			continue;
		}
		CATIDftGenGeomAccess *piGenGeomAccess = NULL;
		rc = piGenView->QueryInterface(IID_CATIDftGenGeomAccess, (void**)&piGenGeomAccess);
		if (FAILED(rc) || piGenGeomAccess == NULL)
		{
			return E_FAIL;
		}
		//从选取的对象获得3D中对应的CATGeometry
		//
		//CATLISTP(CATCell) *lstCells = NULL;
		//rc = piGenGeom->GetGeometryOfOrigin(&lstCells);
		//if (FAILED(rc))
		//{
		//	return E_FAIL;
		//}
		//cout<<"list cells: "<<lstCells->Size()<<endl;
		//for (int iCurrentCell =1; iCurrentCell <= lstCells->Size(); iCurrentCell++)
		//{
		//	CATGeometry *pGeometry = (*lstCells)[iCurrentCell]->GetGeometry();
		//	if (pGeometry == NULL)
		//	{
		//		continue;
		//	}
		//	CATIUnknownList *piList = NULL;
		//	rc = piGenGeomAccess->GetGeneratedItemForm3DGeom(IID_CATIDftGenGeom,pGeometry,piProd,&piList);
		//	if (FAILED(rc) || piList == NULL)
		//	{
		//		cout<<"transfer to CATIDftGenGeom list failed"<<endl;
		//		continue;
		//	}
		//	unsigned int iCountList = 0;
		//	rc = piList->Count(&iCountList);
		//	for (int j = 0; j< iCountList; j++)
		//	{
		//		IUnknown *pItem = NULL;
		//		rc = piList->Item(j,&pItem);
		//		if (FAILED(rc))
		//		{
		//			return E_FAIL;
		//		}
		//		CATISpecObject *pRelateItem = NULL;
		//		rc = pItem->QueryInterface(IID_CATISpecObject,(void**)&pRelateItem);
		//		if (FAILED(rc))
		//		{
		//			cout<<"transfer to CATISpecObject failed"<<endl;
		//			return E_FAIL;
		//		}
		//		lstRelateItem.Append(pRelateItem);
		//	}
		//}

		//以下在 CATCell->GetGeometry失败
		CATBody *pPartTopoBody = NULL;
		rc = piGenGeom->GetBody(&pPartTopoBody);
		if (FAILED(rc) || pPartTopoBody == NULL)
		{
			return E_FAIL;
		}
		CATCell *pCell = NULL;
		pCell = pPartTopoBody->CreateCell(3);
		CATGeometry *pCurrentGeom = pCell->GetGeometry();
		CATLISTP(CATCell) lstCells = NULL;
		pPartTopoBody->GetAllCells(lstCells,3);
		cout<<lstCells.Size()<<endl;
		for (int iCurrentCell =1; iCurrentCell <= lstCells.Size(); iCurrentCell++)
		{
			CATGeometry *pGeometry = lstCells[iCurrentCell]->GetGeometry();
			if (pGeometry == NULL)
			{
				return E_FAIL;
			}
			CATIUnknownList *piList = NULL;
			rc = piGenGeomAccess->GetGeneratedItemForm3DGeom(IID_CATISpecObject,pGeometry,spRefProd,&piList);
			if (FAILED(rc) || piList == NULL)
			{
				cout<<"transfer to specobj list failed"<<endl;
				return E_FAIL;
			}
			unsigned int iCountList = 0;
			rc = piList->Count(&iCountList);
			for (int j = 0; j< iCountList; j++)
			{
				IUnknown *pItem = NULL;
				rc = piList->Item(j,&pItem);
				if (FAILED(rc))
				{
					return E_FAIL;
				}
				CATISpecObject *pRelateItem = NULL;
				rc = pItem->QueryInterface(IID_CATISpecObject,(void**)&pRelateItem);
				lstRelateItem.Append(pRelateItem);
			}
		}
	}
	return rc;
}

//从2D中某单一元素通过比对相同的链接Product，返回出2D的list
HRESULT DrwSetColorCmd::GetRelatedElementUpdate(CATISpecObject_var ispSpecDrwObj,CATLISTV(CATISpecObject_var) &lstRelateItem)
{
	HRESULT rc = S_OK;
	//
	CATIProduct_var spRefProduct = NULL_var;
	rc = GetLinkedProduct(ispSpecDrwObj,spRefProduct);
	if (FAILED(rc) || spRefProduct == NULL_var)
	{
		return E_FAIL;
	}
	//先获取所有视图
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	CATDocument *pDoc = pEditor->GetDocument();
	CATIDrawing *piDrawing = NULL;
	CATIDftDocumentServices *piDftDocServices = NULL;
	rc = pDoc->QueryInterface(IID_CATIDftDocumentServices, (void **)&piDftDocServices);
	if (FAILED(rc) || piDftDocServices == NULL)
	{
		return E_FAIL;
	}
	piDftDocServices->GetDrawing(IID_CATIDrawing, (void **)&piDrawing);
	piDftDocServices->Release();
	if (piDrawing == NULL)
	{
		return E_FAIL;
	}
	CATISheet_var spCurrentSheet = piDrawing->GetCurrentSheet();
	CATLISTV(CATISpecObject_var) lstViews = NULL;
	lstViews = spCurrentSheet->GetViewList();
	if (lstViews == NULL)
	{
		return E_FAIL;
	}
	//同时包含了每个视图和对应的Background，所以是乘以2
	cout<<"Views Count: "<<lstViews.Size()<<endl;
	//开始遍历每个View
	for (int i = 1; i <= lstViews.Size(); i++)
	{
		CATIDftView *piView = NULL;
		rc = lstViews[i]->QueryInterface(IID_CATIDftView,(void**)&piView);
		if (FAILED(rc) || piView == NULL)
		{
			return E_FAIL;
		}
		IUnknown *piGenView = NULL;
		rc = piView->GetApplicativeExtension(IID_CATIDftGenView,&piGenView);
		if (FAILED(rc) || piGenView == NULL)
		{
			continue;
		}
		CATIDftGenGeomAccess *piGenGeomAccess = NULL;
		rc = piGenView->QueryInterface(IID_CATIDftGenGeomAccess, (void**)&piGenGeomAccess);
		if (FAILED(rc) || piGenGeomAccess == NULL)
		{
			return E_FAIL;
		}
		//获得视图内的所有生成元素
		CATIUnknownList *pLstElem = NULL;
		rc=piGenGeomAccess->GetAllGeneratedItems(IID_CATIDftGenGeom, &pLstElem);
		if (FAILED(rc) || pLstElem == NULL)
		{
			return E_FAIL;
		}
		unsigned int iElemNum;
		pLstElem->Count(&iElemNum);
		//遍历每个元素，获得对应的Product，并判断是否和refproduct一致
		for(int i=0;i<iElemNum;i++)
		{
			IUnknown* pItemSingle=NULL;
			pLstElem->Item(i, &pItemSingle);
			if (NULL==pItemSingle)
			{
				continue;
			}
			CATIDftGenGeom* pGenGeomSingle=NULL;
			pItemSingle->QueryInterface(IID_CATIDftGenGeom, (void**)&pGenGeomSingle);
			if (NULL==pGenGeomSingle)
			{
				cout<<"Get CATIDftGenGeom Failed"<<endl;
				continue;
			}
			CATISpecObject_var spDrwObjectRelated = NULL_var;
			pGenGeomSingle->QueryInterface(IID_CATISpecObject, (void**)&spDrwObjectRelated);
			if (spDrwObjectRelated == NULL_var)
			{
				continue;
			}
			CATIProduct_var spProdLinked = NULL_var;
			rc = GetLinkedProduct(spDrwObjectRelated,spProdLinked);
			if (FAILED(rc) || spProdLinked == NULL_var)
			{
				return E_FAIL;
			}
			if (spProdLinked->IsEqual(spRefProduct))
			{
				lstRelateItem.Append(spDrwObjectRelated);
			}
		}
	}
	return rc;
}

//从2D元素返回出对应的Product(CATPart)
HRESULT DrwSetColorCmd::GetLinkedProduct(CATISpecObject_var ispSpecDrwObj, CATIProduct_var &ospProductLinked)
{
	HRESULT rc = S_OK;
	CATIDftGenGeom *piGenGeom = NULL;
	rc = ispSpecDrwObj->QueryInterface(IID_CATIDftGenGeom, (void**)&piGenGeom);
	if (FAILED(rc)||piGenGeom == NULL)
	{
		return E_FAIL;
	}
	IUnknown *piUnknown = NULL;
	rc = piGenGeom->GetProduct(IID_CATIProduct,&piUnknown);
	if (FAILED(rc) || piUnknown == NULL)
	{
		return E_FAIL;
	}
	CATIProduct *piProd = NULL;
	rc = piUnknown->QueryInterface(IID_CATIProduct,(void**)&piProd);
	if (FAILED(rc) || piProd == NULL)
	{
		return E_FAIL;
	}
	ospProductLinked = piProd->GetReferenceProduct();
	return rc;
}

//从2D元素返回出对应的3D内的实体
HRESULT DrwSetColorCmd::GetLinked3DElement(CATISpecObject_var ispSpecDrwObj, CATISpecObject_var &ospSpec3DObj)
{
	HRESULT rc = S_OK;
	//
	CATIDftGenGeom *piGenGeom = NULL;
	rc = ispSpecDrwObj->QueryInterface(IID_CATIDftGenGeom, (void**)&piGenGeom);
	if (FAILED(rc)||piGenGeom == NULL)
	{
		return E_FAIL;
	}
	//
	CATBody *pPartTopoBody = NULL;
	rc = piGenGeom->GetBody(&pPartTopoBody);
	if (FAILED(rc) || pPartTopoBody == NULL)
	{
		return E_FAIL;
	}
	CATBody_var spPartBody = pPartTopoBody;
	if (spPartBody == NULL_var)
	{
		return E_FAIL;
	}
	//
	CATLISTP(CATCell) *plstCell = NULL;
	rc = piGenGeom->GetGeometryOfOrigin(&plstCell);
	if (plstCell == NULL || plstCell->Size() == 0)
	{
		return  E_FAIL;
	}
	int iSizeGeom = plstCell->Size();
	//
	for (int i =1; i <= iSizeGeom; i++)
	{
		CATIBRepAccess_var spBreAcess= CATBRepDecodeCellInBody((*plstCell)[i],spPartBody);
		if (spBreAcess == NULL_var)
		{
			continue;
		}
		CATISpecObject_var spSpecObj = spBreAcess->GetInitialFeature();
		if (spSpecObj == NULL_var)
		{
			continue;
		}
		ospSpec3DObj = spSpecObj;
		break;
	}

	return rc;
}