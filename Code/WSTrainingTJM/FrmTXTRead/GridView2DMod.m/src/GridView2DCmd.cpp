// COPYRIGHT Dassault Systemes 2019
//===================================================================
//
// GridView2DCmd.cpp
// The state chart based command: GridView2DCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jan 2019  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "GridView2DCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"


CATCreateClass( GridView2DCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
GridView2DCmd::GridView2DCmd() :
  CATStateCommand ("GridView2DCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_Indication(NULL)
{
	_pDlg = NULL;
	_pDlg = new GridView2DDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	ShowGridLine();
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
GridView2DCmd::~GridView2DCmd()
{
   if (_Indication != NULL) 
      _Indication->RequestDelayedDestruction();

   if (_pDlg != NULL)
   {
	   _pDlg->RequestDelayedDestruction();
	   _pDlg = NULL;
   }
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void GridView2DCmd::BuildGraph()
{

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean GridView2DCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

void GridView2DCmd::ShowGridLine()
{
	CAT2DBagRep *p2DBagRep = new CAT2DBagRep();
	CreateGridLine(p2DBagRep);
	_pDlg->GetNavi2DViewer()->AddRep((CAT2DRep*)p2DBagRep);
	_pDlg->GetNavi2DViewer()->Reframe();
	return;
}

void GridView2DCmd::CreateRepFor2DLine(CATMathPoint2Df  iPoints[] , int num,CAT2DCustomRep *& p2DCustomRep)
{
	if (p2DCustomRep==NULL)
	{
		return ;
	}

	CAT2DPolylineGP * pLineGP = new CAT2DPolylineGP(iPoints,num) ;

	//CAT2DLineGP
	CATGraphicAttributeSet LineAG ;
	LineAG.SetColor(GREEN);
	LineAG.SetThickness(1);
	LineAG.SetLineType(1);

	p2DCustomRep->AddGP(pLineGP,LineAG);

	CAT2DBoundingBox BoundingSphere(-100,100,-100,100);
	p2DCustomRep->SetBoundingElement(BoundingSphere) ;

}

void GridView2DCmd::CreateGridLine(CAT2DBagRep * p2DBagRep)
{
	CATMathPoint2Df inputPoints[4];
	CATMathPoint2D MathPoint1(0,0);
	CATMathPoint2D MathPoint2(20,30);
	CATMathPoint2D MathPoint3(50,50);
	CATMathPoint2D MathPoint4(-50,-30);
	inputPoints[0] = MathPoint1;
	inputPoints[1] = MathPoint2;
	inputPoints[2] = MathPoint3;
	inputPoints[3] = MathPoint4;
	//
	CAT2DCustomRep *pCustomRepLine = new CAT2DCustomRep();
	CreateRepFor2DLine(inputPoints,4,pCustomRepLine);
    p2DBagRep->AddChild(*pCustomRepLine);
	//
	for (int i = 0; i <4; i++)
	{
		CATUnicodeString strText = "";
		int iConvert = strText.BuildFromNum(i+1);
		CAT2DCustomRep *pCustomRepText = new CAT2DCustomRep();
		CreateRepFor2DText(inputPoints[i],strText,pCustomRepText);
		p2DBagRep->AddChild(*pCustomRepText);
	}
	
	return;
}

void GridView2DCmd::CreateRepFor2DText(CATMathPoint2Df  iPoints , CATUnicodeString istrText ,CAT2DCustomRep *& p2DCustomRep)
{
	if (p2DCustomRep==NULL)
	{
		return ;
	}
	//AnchorPointPosition是指参考点相对于Text的位置，而不是Text相对于参考点的位置
	CAT2DAnnotationTextGP * pTextGP = new CAT2DAnnotationTextGP(iPoints,istrText,BOTTOM_RIGHT) ;

	//CAT2DLineGP
	CATGraphicAttributeSet TextAG ;
	TextAG.SetColor(RED);
	TextAG.SetThickness(1);
	TextAG.SetLineType(1);

	p2DCustomRep->AddGP(pTextGP,TextAG);

	CAT2DBoundingBox BoundingSphere(-100,100,-100,100);
	p2DCustomRep->SetBoundingElement(BoundingSphere);

}