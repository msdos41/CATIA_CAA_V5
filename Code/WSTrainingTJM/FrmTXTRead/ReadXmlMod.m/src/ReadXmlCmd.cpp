// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// ReadXmlCmd.cpp
// The state chart based command: ReadXmlCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Dec 2018  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "ReadXmlCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"





CATCreateClass( ReadXmlCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
ReadXmlCmd::ReadXmlCmd() :
  CATStateCommand ("ReadXmlCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_Indication(NULL)
{
	_pDlg = NULL;
	_pDlg = new ReadXmlDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pFileWindow = NULL;

	_strSavePath = "";
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
ReadXmlCmd::~ReadXmlCmd()
{
   if (_Indication != NULL) 
      _Indication->RequestDelayedDestruction();

   if (_pDlg != NULL)
   {
	   _pDlg->RequestDelayedDestruction();
	   _pDlg = NULL;
   }

   if (_pFileWindow != NULL)
   {
	   _pFileWindow->RequestDelayedDestruction();
	   _pFileWindow = NULL;
   }
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void ReadXmlCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&ReadXmlCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&ReadXmlCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&ReadXmlCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&ReadXmlCmd::ActionOK,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButtonReadXml(),
		_pDlg->GetPushButtonReadXml()->GetPushBActivateNotification(),
		(CATCommandMethod)&ReadXmlCmd::ReadXml,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButtonSelectPath(),
		_pDlg->GetPushButtonSelectPath()->GetPushBActivateNotification(),
		(CATCommandMethod)&ReadXmlCmd::SelectDirectory,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButtonWriteXml(),
		_pDlg->GetPushButtonWriteXml()->GetPushBActivateNotification(),
		(CATCommandMethod)&ReadXmlCmd::WriteXml,
		NULL);

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean ReadXmlCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

void ReadXmlCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
}

void ReadXmlCmd::ActionOK(void * data)
{
	CATUnicodeString strDate;
	CATUnicodeString strTime;
	GetCurrentTimeAndDate(strDate,strTime);
	cout<<strDate<<"  "<<strTime<<endl;
	ExitCmd(data);
}

void ReadXmlCmd::ReadXml(void * data)
{
	CATUnicodeString strFileName = "Config.xml";
	CATUnicodeString strFolderName = "Template";
	CATListValCATUnicodeString lstTagNames = NULL;
	CATListValCATUnicodeString lstAttr = NULL;
	CATListValCATUnicodeString lstTexts = NULL;
	//读取xml模板信息
	HRESULT rc = ReadXMLUpdate(strFileName,strFolderName,lstTagNames,lstAttr,lstTexts);
	if (FAILED(rc))
	{
		return;
	}
	//信息在selectorlist上显示
	for (int i=1; i<= lstTagNames.Size(); i++)
	{
		CATUnicodeString strShowInfo = lstTagNames[i]+" : " + lstAttr[i] + lstTexts[i];
		_pDlg->GetSelectorListShowXml()->SetLine(strShowInfo,-1,CATDlgDataAdd);
	}
	
	

}

void ReadXmlCmd::WriteXml(void * data)
{
	if (_strSavePath == "")
	{
		return;
	}
	CATIProduct *piRootProduct = NULL;
	HRESULT rc = GetRootProduct(piRootProduct);
	if (FAILED(rc) || piRootProduct == NULL)
	{
		return;
	}
	CATLISTP(CATIProduct) lstSubParts = NULL;
	GetAllSubParts(piRootProduct,lstSubParts);
	if (lstSubParts.Size() == 0)
	{
		return;
	}
	for (int i =1; i<= lstSubParts.Size(); i++)
	{
		CATListValCATUnicodeString lstPropertyNames = NULL;
		CATListValCATUnicodeString lstValues = NULL;
		rc = GetProperties(lstSubParts[i],lstPropertyNames,lstValues);
		if (FAILED(rc))
		{
			return;
		}
	}
	rc = WriteNewXMLupdate(_strSavePath,lstSubParts);
	if (FAILED(rc))
	{
		return;
	}
}

void ReadXmlCmd::SelectDirectory(void * data)
{
	//新建窗口
	_pFileWindow = new CATDlgFile(_pDlg,"Create new XML",CATDlgFileSave);
	_pFileWindow->SetVisibility(CATDlgShow);
	//过滤Excel文档
	CATUnicodeString TypeDescription = "XML Files";
	CATString TypeExtension = "*.xml";
	_pFileWindow->SetFilterStrings(&TypeDescription,&TypeExtension,1);
	//点击save按钮以后的动作
	AddAnalyseNotificationCB(_pFileWindow,
		_pFileWindow->GetDiaOKNotification(),
		(CATCommandMethod)&ReadXmlCmd::ShowSavePath,
		NULL);
	//点击cancel后的动作
	AddAnalyseNotificationCB(_pFileWindow,
		_pFileWindow->GetDiaCANCELNotification(),
		(CATCommandMethod)&ReadXmlCmd::FileWindowExitCmd,
		NULL);

	return;
}

void ReadXmlCmd::FileWindowExitCmd(void * data)
{
	_pFileWindow->RequestDelayedDestruction();
	_pFileWindow = NULL;
}

void ReadXmlCmd::ShowSavePath(void * data)
{
	//把旧的地址显示清空
	_pDlg->GetEditorSavePath()->ClearLine();
	//显示新的选择地址
	_pFileWindow->GetSelection(_strSavePath);
	CATUnicodeString strFileFormat = ".xml";
	if (-1 == _strSavePath.SearchSubString(strFileFormat,0,CATUnicodeString::CATSearchModeBackward))
	{
		_strSavePath = _strSavePath + strFileFormat;
	}
	_pDlg->GetEditorSavePath()->SetText(_strSavePath);

	//关闭File窗口
	FileWindowExitCmd(data);

}

HRESULT ReadXmlCmd::GetResourseFile(CATUnicodeString &CATEnvPath,CATUnicodeString FileFullName,CATUnicodeString folderName)
{
	if(CATUnicodeString("") == FileFullName)
	{
		return E_FAIL;
	}

	//从环境变量中获取路径
	CATUnicodeString strSearchPath("");
	char* value = NULL;
	if ( CATLibSuccess == CATGetEnvValue("CATGraphicPath", &value ))//通过读取环境变量中参数值
	{
		strSearchPath = value;
		CATUnicodeString strName = "";
		strName.Append(folderName);
		strName.Append("\\");
		strName.Append(FileFullName);
		const char * pFilePath = ::CATFindPath(strName,value);	  

		if (value!=NULL)
		{
			delete value;
			value = NULL;
		}
		CATEnvPath = pFilePath;
		return S_OK;
	}
	else
	{		 
		return E_FAIL;
	}
}

HRESULT ReadXmlCmd::OpenXML(CATUnicodeString istrXMLPath,CATIDOMDocument_var &ospDOMDocument)
{
	if (CATUnicodeString("") == istrXMLPath) return E_FAIL;

	HRESULT rc(E_FAIL);

	CATIXMLDOMDocumentBuilder_var builder = NULL_var;
	rc = ::CreateCATIXMLDOMDocumentBuilder(builder);
	if (FAILED(rc) || NULL_var == builder) 
		return E_FAIL;

	CATIXMLSAXFactory_var   spIXMLSAXFactory(NULL_var);
	rc = ::CreateCATIXMLSAXFactory(spIXMLSAXFactory);
	if (FAILED(rc) || NULL_var == spIXMLSAXFactory) 
		return E_FAIL;

	CATListOfCATUnicodeString strListOfReadOption(1);
	strListOfReadOption.Append(CATUnicodeString("CATDoValidation"));
	CATListOfCATUnicodeString strListOfReadOptionValue(1);
	strListOfReadOptionValue.Append(CATUnicodeString("false"));

	rc = builder->Parse(istrXMLPath,ospDOMDocument,strListOfReadOption,strListOfReadOptionValue);
	if (FAILED(rc) || NULL_var == ospDOMDocument) 
		return E_FAIL;
	//_spbuilder = builder;
	return S_OK;
}

/*
HRESULT ReadXmlCmd::ReadXML(CATUnicodeString strFileName,
								 CATUnicodeString strFolderName,
								 CATUnicodeString &strPartName,
								 CATUnicodeString &strInstanceName,
								 CATUnicodeString &strMass,
								 CATUnicodeString &strMaterial,
								 CATUnicodeString &strDesigner,
								 CATUnicodeString &strDate)
{
	HRESULT rc = S_OK;

	CATUnicodeString strXMLPath("");
	rc = GetResourseFile(strXMLPath,strFileName,strFolderName);
	if (CATUnicodeString("") == strXMLPath)
	{
		MessageBox (NULL ,_T("配置文件丢失，请检查！"),L"Information",MB_OK);
		return E_FAIL;
	}
	else
	{
		CATIDOMDocument_var spDomDocument;
		rc = OpenXML(strXMLPath,spDomDocument);
		if (NULL_var == spDomDocument)
		{
			MessageBox (NULL ,_T("配置文件丢失，请检查！"),L"Information",MB_OK);
			return E_FAIL;
		}
		_spDOMDocument = spDomDocument;
		CATIDOMNodeList_var listDOMNode1 = NULL_var;
		spDomDocument->GetElementsByTagName("PartInfor",listDOMNode1);
		if (NULL_var == listDOMNode1)
		{
			MessageBox (NULL ,_T("读取配置文件失败，请检查！"),L"Information",MB_OK);
			return E_FAIL;
		}

		unsigned int iNodeLength1 = 0;
		listDOMNode1->GetLength(iNodeLength1);
		if (0 == iNodeLength1) 
		{
			MessageBox (NULL ,_T("读取配置文件失败，请检查！"),L"Information",MB_OK);
			return E_FAIL;
		}
		for (int i = 0;i < iNodeLength1;i++)
		{
			CATIDOMNode_var spConfNode = NULL_var;
			listDOMNode1->Item(i,spConfNode);
			CATIDOMElement_var spConfNodeElement = spConfNode;
			if (NULL_var != spConfNodeElement)
			{	
				spConfNodeElement->GetAttribute("PartName",strPartName);
				spConfNodeElement->GetAttribute("InstanceName",strInstanceName);
				spConfNodeElement->GetAttribute("Mass",strMass);
				spConfNodeElement->GetAttribute("Material",strMaterial);
				spConfNodeElement->GetAttribute("Designer",strDesigner);
				spConfNodeElement->GetAttribute("Date",strDate);
			}
			else
			{
				MessageBox (NULL ,_T("读取配置文件失败，请检查！"),L"Information",MB_OK);
				return E_FAIL;
			}
		}
	}
	return rc;
}
*/


HRESULT ReadXmlCmd::ReadXMLUpdate(CATUnicodeString strFileName,
							CATUnicodeString strFolderName,
							CATListValCATUnicodeString &lstTags,
							CATListValCATUnicodeString &lstAttrbutes,
							CATListValCATUnicodeString &lstTexts)
{
	HRESULT rc = S_OK;

	CATUnicodeString strXMLPath("");
	rc = GetResourseFile(strXMLPath,strFileName,strFolderName);
	if (CATUnicodeString("") == strXMLPath)
	{
		MessageBox (NULL ,_T("配置文件丢失，请检查！"),L"Information",MB_OK);
		return E_FAIL;
	}
	else
	{
		CATIDOMDocument_var spDomDocument;
		rc = OpenXML(strXMLPath,spDomDocument);
		if (NULL_var == spDomDocument)
		{
			MessageBox (NULL ,_T("配置文件丢失，请检查！"),L"Information",MB_OK);
			return E_FAIL;
		}
		//_spDOMDocument = spDomDocument;
		//首先获取根元素
		CATIDOMElement_var spRootElement = NULL_var;
		rc = spDomDocument->GetDocumentElement(spRootElement);
		if (NULL_var == spRootElement)
		{
			MessageBox (NULL ,_T("配置文件丢失，请检查！"),L"Information",MB_OK);
			return E_FAIL;
		}
		//再获取根元素下的所有子节点，包括了#text以及element
		CATIDOMNodeList_var listDOMNode1 = NULL_var;
		rc = spRootElement->GetChildNodes(listDOMNode1);
		if (NULL_var == listDOMNode1)
		{
			MessageBox (NULL ,_T("读取配置文件失败，请检查！"),L"Information",MB_OK);
			return E_FAIL;
		}
		unsigned int iNodeLength1 = 0;
		listDOMNode1->GetLength(iNodeLength1);
		if (0 == iNodeLength1) 
		{
			MessageBox (NULL ,_T("读取配置文件失败，请检查！"),L"Information",MB_OK);
			return E_FAIL;
		}
		cout<<iNodeLength1<<endl; //childnodes包含了直属的#text以及子element和对应的#text
		for (int i = 0; i<iNodeLength1; i++)
		{
			CATIDOMNode_var spNode = NULL_var;
			listDOMNode1->Item(i,spNode);
			//先排除掉#text，获得Element
			CATIDOMElement_var spChildElement = spNode;
			if (spChildElement == NULL)
			{
				continue;
			}
			//获取Element的Tag Name
			CATUnicodeString strElemTagName = "";
			rc = spChildElement->GetNodeName(strElemTagName);
			cout<<strElemTagName<<endl;
			lstTags.Append(strElemTagName);
			//获取Element下的texts
			CATIDOMNodeList_var lstChildChildNodes = NULL_var;
			rc = spChildElement->GetChildNodes(lstChildChildNodes);
			unsigned int iNodeCount = 0;
			lstChildChildNodes->GetLength(iNodeCount);
			cout<<"child nodes: "<<iNodeCount<<endl;
			if (0 == iNodeCount)
			{
				lstTexts.Append("");
			}
			else
			{
				for (int j = 0; j< iNodeCount; j++)
				{
					CATIDOMNode_var spTextNode = NULL_var;
					lstChildChildNodes->Item(j,spTextNode);
					CATUnicodeString strText = "";
					rc = spTextNode->GetNodeValue(strText);
					if (FAILED(rc))
					{
						MessageBox (NULL ,_T("读取配置文件失败，请检查！"),L"Information",MB_OK);
						return E_FAIL;
					}
					lstTexts.Append(strText);
				}
			}
			//获取Element下的Attributes
			CATIDOMNamedNodeMap_var spChildAttributes = NULL_var;
			rc = spChildElement->GetAttributes(spChildAttributes);
			if (spChildAttributes == NULL_var)
			{
				MessageBox (NULL ,_T("读取配置文件失败，请检查！"),L"Information",MB_OK);
				return E_FAIL;
			}
			CATUnicodeString strAttr = "";
			int iLengthAttr = 0;
			rc = spChildAttributes->GetLength(iLengthAttr);
			//等于0表示没有Attribute
			if (iLengthAttr == 0)
			{
				lstAttrbutes.Append("");
			}
			else
			{
				for (int k = 0; k<iLengthAttr; k++)
				{
					CATIDOMNode_var spAttrNode = NULL_var;
					rc = spChildAttributes->Item(k,spAttrNode);
					if (spAttrNode == NULL_var)
					{
						MessageBox (NULL ,_T("读取配置文件失败，请检查！"),L"Information",MB_OK);
						return E_FAIL;
					}
					CATIDOMAttr_var spAttr = spAttrNode;
					CATUnicodeString strAttrName = "";
					CATUnicodeString strAttrValue = "";
					rc = spAttr->GetName(strAttrName);
					if (strAttrName == "")
					{
						MessageBox (NULL ,_T("读取配置文件失败，请检查！"),L"Information",MB_OK);
						return E_FAIL;
					}
					rc = spAttr->GetValue(strAttrValue);
					if (strAttrValue == "")
					{
						MessageBox (NULL ,_T("读取配置文件失败，请检查！"),L"Information",MB_OK);
						return E_FAIL;
					}
					strAttr.Append(strAttrName + "=\""+ strAttrValue + "\" ");
				}
				lstAttrbutes.Append(strAttr);
			}
		}
		//for (int i = 0;i < iNodeLength1;i++)
		//{
		//	CATIDOMNode_var spConfNode = NULL_var;
		//	listDOMNode1->Item(i,spConfNode);
		//	CATIDOMElement_var spConfNodeElement = spConfNode;
		//	if (NULL_var != spConfNodeElement)
		//	{	
		//		spConfNodeElement->GetAttribute("PartName",strPartName);
		//		spConfNodeElement->GetAttribute("InstanceName",strInstanceName);
		//		spConfNodeElement->GetAttribute("Mass",strMass);
		//		spConfNodeElement->GetAttribute("Material",strMaterial);
		//		spConfNodeElement->GetAttribute("Designer",strDesigner);
		//		spConfNodeElement->GetAttribute("Date",strDate);
		//	}
		//	else
		//	{
		//		MessageBox (NULL ,_T("读取配置文件失败，请检查！"),L"Information",MB_OK);
		//		return E_FAIL;
		//	}
		//}
	}
	return rc;
}

HRESULT ReadXmlCmd::GetRootProduct(CATIProduct *&opiRootProduct)
{
	//获取Document
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor == NULL)
	{
		return E_FAIL;
	}
	CATDocument *pDoc = pEditor->GetDocument();
	if (pDoc == NULL)
	{
		return E_FAIL;
	}

	//获取根元素集合的第一个，就是根product,最终要转到CATIProduct
	CATIDocRoots *piDocRootsOnDoc = NULL;
	HRESULT rc = pDoc->QueryInterface(IID_CATIDocRoots,(void**)&piDocRootsOnDoc);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATListValCATBaseUnknown_var *pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct = NULL_var;
	if (pRootProducts->Size())
	{
		spRootProduct = (*pRootProducts)[1];
		delete pRootProducts;
		pRootProducts = NULL;
	}

	piDocRootsOnDoc->Release();

	//CATIProduct *piProductOnRoot = NULL;
	rc = spRootProduct->QueryInterface(IID_CATIProduct, (void**)&opiRootProduct);
	if (FAILED(rc) || piDocRootsOnDoc == NULL)
	{
		return E_FAIL;
	}

	return S_OK;
}

//获取所有子Part
void ReadXmlCmd::GetAllSubParts(CATIProduct *ipiRootProduct, CATLISTP(CATIProduct) &lstSubParts)
{
	//获取所有children
	CATListValCATBaseUnknown_var *lstChildren = ipiRootProduct->GetAllChildren();
	if (lstChildren == NULL)
	{
		return;
	}
	//过滤出Part
	CATIProduct_var spChild = NULL_var;
	lstSubParts = NULL;

	for (int i = 1; i <= lstChildren->Size(); i++)
	{
		spChild = (*lstChildren)[i];
		if (FALSE == IsProduct(spChild))
		{
			CATIProduct_var spRefProduct = spChild->GetReferenceProduct(); 
			CATIProduct *piRefProductOnChild = NULL;
			HRESULT rc = spRefProduct->QueryInterface(IID_CATIProduct, (void**)&piRefProductOnChild);
			lstSubParts.Append(piRefProductOnChild);
		}
	}
	//去掉重复Part
	for (int i = 1; i<=lstSubParts.Size(); i++)
	{
		for (int j = lstSubParts.Size(); j>i; j--)
		{
			if (lstSubParts[i] == lstSubParts[j])
			{
				lstSubParts.RemovePosition(j);
			}
		}
	}
	return;
}

//判断是否为PRD check if is a product
CATBoolean ReadXmlCmd::IsProduct(CATIProduct_var ispiPrd)
{
	HRESULT rc = S_OK;

	CATBoolean isProduct=FALSE;

	CATIProduct *piPrd=NULL;
	rc = ispiPrd->QueryInterface(IID_CATIProduct,(void **)&piPrd);

	CATIProduct_var spRefPrd=ispiPrd->GetReferenceProduct();
	piPrd->Release();  piPrd = NULL;

	if (spRefPrd==NULL_var)
	{
		isProduct = TRUE;
		cout<<"==>Get ReferenceProduct failed"<<endl;
		return isProduct;
	}

	CATILinkableObject *piLinkObj=NULL;
	rc=spRefPrd->QueryInterface(IID_CATILinkableObject,(void **)&piLinkObj);
	if( FAILED(rc) || !piLinkObj ) 
	{
		cout << "==> Get CATILinkableObject error !" << endl;
		return isProduct;
	}

	CATDocument *pDoc=piLinkObj->GetDocument();
	piLinkObj->Release();  piLinkObj = NULL;
	if( !pDoc ) 
	{
		cout << "==> Get CATDocument error !" << endl;
		return isProduct;
	}

	CATIDocId *pDocID;
	CATUnicodeString typeDoc="";
	rc = pDoc->GetDocId(&pDocID);
	if( !(FAILED(rc)) )
		rc = pDocID->GetType(typeDoc);
	//cout << " ==> The type of document is: " << typeDoc << endl;

	if( typeDoc == "CATProduct" )
		isProduct = TRUE;

	return isProduct;
}

HRESULT ReadXmlCmd::GetProperties(CATIProduct *ipiProduct,
								  CATListValCATUnicodeString &lstNames,
								  CATListValCATUnicodeString &lstValues)
{
	if (ipiProduct == NULL)
	{
		return E_FAIL;
	}
	cout<<ipiProduct->GetPartNumber()<<endl;

	CATIAttributesDescription *piAttrDesc = NULL;
	HRESULT rc = ipiProduct->QueryInterface(IID_CATIAttributesDescription, (void**)&piAttrDesc);
	if (FAILED(rc) || piAttrDesc == NULL)
	{
		return E_FAIL;
	}
	CATIInstance *piInstance = NULL;
	rc = ipiProduct->QueryInterface(IID_CATIInstance, (void**)&piInstance);
	if (FAILED(rc) || piInstance == NULL)
	{
		return E_FAIL;
	}
	CATListValCATAttributeInfos attrInfoList;
	rc = piAttrDesc->List(&attrInfoList);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	int iAttrCount = attrInfoList.Size();
	for (int i = 1; i<= iAttrCount; i++)
	{
		CATAttributeInfos attrInfo = attrInfoList[i];
		CATUnicodeString strPropertyName = attrInfo.Name();
		//CATUnicodeString valueType = attrInfo.Type()->Name();
		CATIValue *pValue = piInstance->GetValue(strPropertyName);
		CATUnicodeString strValue;
		if (pValue == NULL) 
		{
			strValue = "** undefined **";
		} 
		else 
		{
			rc = pValue->AsString(strValue);
			if (FAILED(rc))
				strValue = "** failed to convert **";
			if (strValue == "")
			{
				strValue = "undefined";
			}
		}
		lstNames.Append(strPropertyName);
		lstValues.Append(strValue);
	}
	for (int i = 1; i<= lstNames.Size();i++)
	{
		cout<<lstNames[i]<<" : "<<lstValues[i]<<endl;
	}

	return S_OK;
}

HRESULT ReadXmlCmd::WriteNewXMLupdate(CATUnicodeString strPath,
									  CATLISTP(CATIProduct) ilstProducts)
{

	if (strPath == "")
	{
		return E_FAIL;
	}


	CATIXMLDOMDocumentBuilder_var builder;
	HRESULT hr = ::CreateCATIXMLDOMDocumentBuilder(builder);
	if (FAILED(hr) || (builder == NULL_var))
	{
		return E_FAIL;
	}

	CATIDOMImplementation_var implementation;
	hr = builder->GetDOMImplementation(implementation);
	if (FAILED(hr) || (implementation == NULL_var)) 
		return E_FAIL;

	CATIDOMDocumentType_var docType;

	CATIDOMDocument_var document;
	hr = implementation->CreateDocument("", "PartInfoList", docType, document);
	if (FAILED(hr) || (document == NULL_var)) 
		return E_FAIL;


	//Root Element
	CATIDOMElement_var spRootElement = NULL_var;
	hr = document->CreateElement("PartInfoList", spRootElement);
	if (FAILED(hr) || (spRootElement == NULL_var)) 
		return E_FAIL;

	CATUnicodeString strDate = "" ;
	CATUnicodeString strTime = "" ;
	GetCurrentTimeAndDate(strDate,strTime);
	hr = spRootElement->SetAttribute("Date", strDate); // 写"Date "会E_Fail，不能加空格
	hr = spRootElement->SetAttribute("Time", strTime);
	
	//hr = spRootElement->SetAttribute("xmlns", "http://www.plmxml.org/Schemas/PLMXMLSchema");
	//hr = spRootElement->SetAttribute("schemaVersion", "6");   
	//hr = spRootElement->SetAttribute("language", "en-us");	  
	//hr = spRootElement->SetAttribute("date", "2018/12/20");	    
	//hr = spRootElement->SetAttribute("time", "11:37");	    
	//hr = spRootElement->SetAttribute("author", "unset");
	hr = document->AppendChild(spRootElement);
	if (FAILED(hr)) 
		return E_FAIL;

	//Root Element下一级

	//CATUnicodeString strIdHeader = "Header";
	for (int i =1; i<= ilstProducts.Size(); i++)
	{
		CATIDOMElement_var spPartInfoElement = NULL_var;
		hr = document->CreateElement("PartInfo", spPartInfoElement);
		if (FAILED(hr) || (spPartInfoElement == NULL_var))
			return E_FAIL;
		CATListValCATUnicodeString lstPropertyNames = NULL;
		CATListValCATUnicodeString lstValues = NULL;
		hr = GetProperties(ilstProducts[i],lstPropertyNames,lstValues);
		if (FAILED(hr))
		{
			return E_FAIL;
		}
		for (int j=1; j<= lstPropertyNames.Size(); j++)
		{
			hr = spPartInfoElement->SetAttribute(lstPropertyNames[j],lstValues[j]);
		}
		hr = spRootElement->AppendChild(spPartInfoElement);
		if (FAILED(hr)) 
			return E_FAIL;
	}
	//
	CATListOfCATUnicodeString writeOptions;
	writeOptions.Append("CATEncoding");
	writeOptions.Append("CATIndentation");
	writeOptions.Append("CATIndentationCharacter");
	CATListOfCATUnicodeString writeOptionValues;
	writeOptionValues.Append("UTF-8");
	//writeOptionValues.Append("utf-8");
	writeOptionValues.Append("1");
	writeOptionValues.Append("\t");
	hr = builder->WriteToFile(document, strPath, writeOptions, writeOptionValues);
	if(FAILED(hr))
	{
		return E_FAIL;
	}
	else
	{
		return S_OK;
	}

}


void ReadXmlCmd::GetCurrentTimeAndDate(CATUnicodeString &strDate, CATUnicodeString &strTime)
{
	time_t now = time(0);
	tm *currentTime = localtime(&now);
	//
	int iYear = currentTime->tm_year + 1900;
	char pszYear[] = ""; //实际上， char * a=”string1”; 的写法是不规范的！因为a指向了即字符常量，一旦strcpy(a,”string2”)就糟糕了，试图向只读的内存区域写入，程序会崩溃的
	int i = sprintf(pszYear,"%d",iYear);
	CATUnicodeString strYear(pszYear);
	cout<<strYear<<endl;
	//
	int iMonth = currentTime->tm_mon + 1;
	char pszMon[] = "";
	sprintf(pszMon,"%02d",iMonth);
	CATUnicodeString strMonth(pszMon);
	//
	int iDay = currentTime->tm_mday;
	char pszDay[] = "";
	sprintf(pszDay,"%02d",iDay);
	CATUnicodeString strDay(pszDay);
	strDate.Append(strYear);
	strDate.Append("/");
	strDate.Append(strMonth);
	strDate.Append("/");
	strDate.Append(strDay);
	//
	int iHour = currentTime->tm_hour;
	char pszHour[] = "";
	sprintf(pszHour,"%02d",iHour);
	CATUnicodeString strHour(pszHour);
	//
	int iMin = currentTime->tm_min;
	char pszMin[] = "";
	sprintf(pszMin,"%02d",iMin);
	CATUnicodeString strMin(pszMin);
	//
	int iSec = currentTime->tm_sec;
	char pszSec[] = "";
	sprintf(pszSec,"%02d",iSec);
	CATUnicodeString strSec(pszSec);
	strTime.Append(strHour);
	strTime.Append(":");
	strTime.Append(strMin);
	strTime.Append(":");
	strTime.Append(strSec);
}