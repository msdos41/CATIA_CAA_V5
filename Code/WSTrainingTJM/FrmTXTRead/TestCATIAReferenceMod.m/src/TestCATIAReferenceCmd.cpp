// COPYRIGHT Dassault Systemes 2020
//===================================================================
//
// TestCATIAReferenceCmd.cpp
// The state chart based command: TestCATIAReferenceCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Mar 2020  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestCATIAReferenceCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TestCATIAReferenceCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestCATIAReferenceCmd::TestCATIAReferenceCmd() :
  CATStateCommand ("TestCATIAReferenceCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,_pDlg(NULL)
,_pGeneralCls(NULL)
,_pSurfaceAgent(NULL),_pSurfaceFieldAgent(NULL)
,_piaBase(NULL)
{
	_pDlg = new TestCATIAReferenceDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pGeneralCls = new GeneralClass();

	CATUnicodeString strString = "123456789";
	CATUnicodeString strSubString1 = strString.SubString(1,100);		//结果是""
	CATUnicodeString strSubString2 = strString.SubString(10,100);		//结果是""
	cout<<"........................."<<endl;
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestCATIAReferenceCmd::~TestCATIAReferenceCmd()
{
	if (_pDlg != NULL)
	{
		_pDlg->RequestDelayedDestruction();
		_pDlg = NULL;
	}

	if (_pGeneralCls != NULL)
	{
		delete _pGeneralCls;
		_pGeneralCls = NULL;
	}

	if (_pSurfaceAgent != NULL)
	{
		_pSurfaceAgent->RequestDelayedDestruction();
		_pSurfaceAgent = NULL;
	}

	if (_pSurfaceFieldAgent != NULL)
	{
		_pSurfaceFieldAgent->RequestDelayedDestruction();
		_pSurfaceFieldAgent = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestCATIAReferenceCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&TestCATIAReferenceCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&TestCATIAReferenceCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&TestCATIAReferenceCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&TestCATIAReferenceCmd::ActionHighlightFromBU,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaAPPLYNotification(),
		(CATCommandMethod)&TestCATIAReferenceCmd::ActionHighlightFromSpecObj,
		NULL);

	//Surface选择
	_pSurfaceAgent = new CATFeatureImportAgent("Select Surface");
	_pSurfaceAgent->SetElementType("CATSurface");
	_pSurfaceAgent->SetElementType("CATCurve");
	_pSurfaceAgent->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithCSO|CATDlgEngWithPSOHSO|CATDlgEngOneShot);

	_pSurfaceFieldAgent = new CATDialogAgent("Select Surface Field");
	_pSurfaceFieldAgent->AcceptOnNotify(_pDlg->GetSelectorListSurface(),
										_pDlg->GetSelectorListSurface()->GetListSelectNotification());

	CATDialogState *pDlgStateSurface = GetInitialState("Select");
	pDlgStateSurface->AddDialogAgent(_pSurfaceAgent);
	pDlgStateSurface->AddDialogAgent(_pSurfaceFieldAgent);

	AddTransition( pDlgStateSurface, pDlgStateSurface, 
		IsOutputSetCondition (_pSurfaceAgent),
		Action ((ActionMethod) &TestCATIAReferenceCmd::ActionSurfaceSelect));
}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TestCATIAReferenceCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

CATBoolean TestCATIAReferenceCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
	return TRUE;
}

CATBoolean TestCATIAReferenceCmd::ActionHighlightFromBU(void * data)
{
	//
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor!=NULL)
	{
		CATHSO *pHSO = pEditor->GetHSO();
		pHSO->Empty();
	}
	CATIProduct_var spiProdRoot = NULL_var;
	_pGeneralCls->GetRootProductUpdate(spiProdRoot);
	if (spiProdRoot!=NULL_var)
	{
		if (_strRefStringFromBU != "")
		{
			CATIAProduct_var spiaRootProd = spiProdRoot;
			if (spiaRootProd != NULL_var)
			{
				BSTR bstrRefString;
				_strRefStringFromBU.ConvertToBSTR(&bstrRefString);
				CATIAReference *piaRef = NULL;
				HRESULT rc = spiaRootProd->CreateReferenceFromName(bstrRefString,piaRef);
				if (SUCCEEDED(rc)&&piaRef!=NULL)
				{
					CATBaseUnknown_var spBU = NULL_var;
					rc = GetObjectFromReference(piaRef,spBU);
					if (SUCCEEDED(rc) && spBU!=NULL_var)
					{
						AddHSO(spBU);
					}
				}
			}

			CATIPrtContainer_var spiPrtCont = NULL_var;
			_pGeneralCls->GetPrtContFromPrd(spiProdRoot,spiPrtCont);
			if (spiPrtCont!=NULL_var)
			{
				CATIPrtPart_var spiPart = spiPrtCont->GetPart();
				CATIAPart_var spiaPart = spiPart;
				if (spiaPart != NULL_var)
				{
					BSTR bstrRefString;
					_strRefStringFromBU.ConvertToBSTR(&bstrRefString);
					CATIAReference *piaRef = NULL;
					HRESULT rc = spiaPart->CreateReferenceFromName(bstrRefString,piaRef);
					if (SUCCEEDED(rc)&&piaRef!=NULL)
					{
						CATBaseUnknown_var spBU = NULL_var;
						rc = GetObjectFromReference(piaRef,spBU);
						if (SUCCEEDED(rc) && spBU!=NULL_var)
						{
							AddHSO(spBU);
						}
					}
				}
			}
		}
	}

	return TRUE;
}

CATBoolean TestCATIAReferenceCmd::ActionHighlightFromSpecObj(void * data)
{
	//
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor!=NULL)
	{
		CATHSO *pHSO = pEditor->GetHSO();
		pHSO->Empty();
	}
	CATIProduct_var spiProdRoot = NULL_var;
	_pGeneralCls->GetRootProductUpdate(spiProdRoot);
	if (spiProdRoot!=NULL_var)
	{
		if (_strRefStringFromSpecObj != "")
		{
			CATIAProduct_var spiaRootProd = spiProdRoot;
			CATIPrtContainer_var spiPrtCont = NULL_var;
			_pGeneralCls->GetPrtContFromPrd(spiProdRoot,spiPrtCont);
			if (spiPrtCont!=NULL_var)
			{
				CATIPrtPart_var spiPart = spiPrtCont->GetPart();
				CATIAPart_var spiaPart = spiPart;
				if (spiaPart != NULL_var && _piaBase!=NULL)
				{
					BSTR bstrRefString;
					_strRefStringFromSpecObj.ConvertToBSTR(&bstrRefString);
					CATIAReference *piaRef = NULL;
					//HRESULT rc = spiaPart->CreateReferenceFromName(bstrRefString,piaRef);
					HRESULT rc = spiaPart->CreateReferenceFromBRepName(bstrRefString,_piaBase,piaRef);
					if (SUCCEEDED(rc)&&piaRef!=NULL)
					{
						CATISpecObject_var spiSpecObj = NULL_var;
						rc = GetSpecFromReference(piaRef,spiSpecObj);
						//rc = GetSpecFromReferenceVBA(spiaPart,piaRef,spiSpecObj);
						if (SUCCEEDED(rc) && spiSpecObj!=NULL_var)
						{
							CATISpecObject_var spiSpecObjNew = NULL_var;

							AddHSO(spiSpecObj);
							/*
							CATBaseUnknown *pBU = NULL;
							if (SUCCEEDED(spiSpecObj->QueryInterface(IID_CATBaseUnknown,(void**)&pBU)))
							{
								CATIBRepAccess_var spiBRepAccess = pBU;
								if (!!spiBRepAccess)
								{
									CATIFeaturize_var spiFeaturize = spiBRepAccess; 
									if (!!spiFeaturize)
										//特征化
										spiSpecObjNew = spiFeaturize->FeaturizeR(MfPermanentBody|MfDefaultFeatureSupport|MfRelimitedFeaturization|MfDuplicateFeature);
								}
								//_pGeneralCls->SetHighlight(pBU);
								AddHSO(spiSpecObjNew);
							}
							*/
							//CATBody_var spBodyObj = _pGeneralCls->GetBodyFromFeature(spiSpecObj);
							//if (spBodyObj!=NULL_var)
							//{
							//	CATLISTP(CATCell) lstCell;
							//	spBodyObj->GetAllCells(lstCell,2);
							//	if (_spBody!=NULL_var)
							//	{
							//		_pGeneralCls->SetHighlightCells(_spBody,lstCell,2);
							//	}
							//}
						}
					}
				}
			}
			/*
			if (spiaRootProd != NULL_var)
			{
				BSTR bstrRefString;
				_strRefStringFromSpecObj.ConvertToBSTR(&bstrRefString);
				CATIAReference *piaRef = NULL;
				HRESULT rc = spiaRootProd->CreateReferenceFromName(bstrRefString,piaRef);
				if (SUCCEEDED(rc)&&piaRef!=NULL)
				{
					CATISpecObject_var spiSpecObj = NULL_var;
					rc = GetSpecFromReference(piaRef,spiSpecObj);
					if (SUCCEEDED(rc) && spiSpecObj!=NULL_var)
					{
						AddHSO(spiSpecObj);
					}
				}
			}
			*/
		}
	}
	return TRUE;
}

void TestCATIAReferenceCmd::ActionSurfaceSelect(void * data)
{
	//
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor!=NULL)
	{
		CATHSO *pHSO = pEditor->GetHSO();
		pHSO->Empty();
	}

	//
	CATBaseUnknown *pBUSelect = NULL;
	CATPathElement *pPath = _pSurfaceAgent->GetValue();
	pBUSelect = _pSurfaceAgent->GetElementValue(pPath);

	CATUnicodeString strAlias = _pGeneralCls->GetNameFromBaseUnknownFunc(pBUSelect);

	_pDlg->GetSelectorListSurface()->ClearLine();

	_pDlg->GetSelectorListSurface()->SetLine(strAlias,-1,CATDlgDataAdd);

	int iTabRow = 0;
	_pDlg->GetSelectorListSurface()->SetSelect(&iTabRow,1);

	//
	_pGeneralCls->SetHighlight(pBUSelect);
	//
	CATISpecObject_var spiSpecSelect = GetSpecFromBaseUnknownFunc(pBUSelect);
	if (spiSpecSelect !=NULL_var)
	{
		_strRefStringFromBU = GetReferenceStringFromBU(pBUSelect);
		CATUnicodeString strStringSpc = GetReferenceStringFromSpecObj(spiSpecSelect);
		_strRefStringFromSpecObjVBA = GetReferenceStringFromSpecObjVBA(spiSpecSelect);	//这个没用，出来就是face，后面字符串都没有

		//_strRefStringFromSpecObj = InsertStringsIntoString(strStringSpc,511,"\" & \"");
		_strRefStringFromSpecObj = strStringSpc;

	}
	//获取所选面的body上的最后一步特征作为后续上下文的输入
	CATISpecObject_var spiSpecMechTool = _pGeneralCls->GetMechanicalToolFromPath(pPath);
	_spBody = _pGeneralCls->GetBodyFromFeature(spiSpecMechTool);
	CATIMechanicalTool_var spiMechTool = spiSpecMechTool;
	if (spiMechTool!=NULL_var)
	{
		CATISpecObject_var spiSpecLastFeature = spiMechTool->GetLastShapeFeature();
		if (spiSpecLastFeature != NULL_var)
		{
			CATIABase *piaBaseContext = NULL;
			//if (SUCCEEDED(spiSpecLastFeature->QueryInterface(IID_CATIABase,(void**)&piaBaseContext)))
			//{
			//	_piaBase = piaBaseContext;
			//}
			if (SUCCEEDED(GetCATIABaseAccessFromSpec(spiSpecLastFeature,&piaBaseContext)))
			{
				_piaBase = piaBaseContext;
			}
			
		}
	}
	//
	ofstream OutFile("C:\\DataInfo.txt",ios::app);

	OutFile<<_strRefStringFromBU<<endl;
	OutFile<<_strRefStringFromSpecObj<<endl;
	OutFile<<_strRefStringFromSpecObjVBA<<endl;

	_pSurfaceAgent->InitializeAcquisition();
}

CATUnicodeString TestCATIAReferenceCmd::GetReferenceStringFromBU(CATBaseUnknown_var ispBU)
{
	CATUnicodeString ostrRefName = "";
	if (ispBU == NULL_var)
	{
		return ostrRefName;
	}
	//Get From BaseUnknown
	CATIAReference *piaReference = NULL;
	HRESULT rc = GetReferenceFromObject(ispBU,piaReference);
	if (FAILED(rc) || piaReference == NULL)
	{
		return ostrRefName;
	}
	CATBSTR bstrRefName;
	piaReference->get_DisplayName(bstrRefName);
	ostrRefName.BuildFromBSTR(bstrRefName);

	return ostrRefName;

}

CATUnicodeString TestCATIAReferenceCmd::GetReferenceStringFromSpecObj(CATISpecObject_var ispiSpecObj)
{
	CATUnicodeString ostrRefName = "";
	if (ispiSpecObj == NULL_var)
	{
		return ostrRefName;
	}
	//Get From SpecObj
	CATIAReference *piaReference = NULL;
	HRESULT rc = GetReferenceFromSpec(ispiSpecObj,piaReference);
	if (FAILED(rc) || piaReference == NULL)
	{
		return ostrRefName;
	}
	CATBSTR bstrRefName;
	piaReference->get_DisplayName(bstrRefName);
	ostrRefName.BuildFromBSTR(bstrRefName);

	return ostrRefName;

}

CATUnicodeString TestCATIAReferenceCmd::GetReferenceStringFromSpecObjVBA(CATISpecObject_var ispiSpecObj)
{
	CATUnicodeString ostrRefName = "";
	CATIProduct_var spiProdRoot = NULL_var;
	_pGeneralCls->GetRootProductUpdate(spiProdRoot);
	if (spiProdRoot != NULL_var)
	{
		CATIPrtContainer_var spiPrtCont = NULL_var;
		_pGeneralCls->GetPrtContFromPrd(spiProdRoot,spiPrtCont);
		if (spiPrtCont != NULL_var)
		{
			CATIPrtPart_var spiPart = spiPrtCont->GetPart();
			CATIAPart_var spiaPart = spiPart;
			if (spiaPart != NULL_var)
			{
				CATIABase *piaBaseObj = NULL;
				if (SUCCEEDED(ispiSpecObj->QueryInterface(IID_CATIABase,(void**)&piaBaseObj)))
				{
					CATIAReference *piaRef = NULL;
					if (SUCCEEDED(spiaPart->CreateReferenceFromGeometry(piaBaseObj,piaRef)))
					{
						CATBSTR bstrRefName;
						piaRef->get_DisplayName(bstrRefName);
						ostrRefName.BuildFromBSTR(bstrRefName);
					}
				}
			}
		}
	}

	return ostrRefName;
}

//描述：高亮某对象
//输入：CATISpecObject对象
//输出：CATBoolean
//返回：CATBoolean
CATBoolean TestCATIAReferenceCmd::AddHSO( CATBaseUnknown_var ispSpecSelect )
{
	HRESULT rc=S_OK;

	CATFrmEditor * pEditor=NULL;
	pEditor = CATFrmEditor::GetCurrentEditor();
	if(pEditor==NULL)
		return FALSE;

	CATHSO * pHSO = pEditor->GetHSO();
	if(pHSO==NULL)
		return FALSE;

	if (pHSO != NULL)
		pHSO->Empty();

	if ((ispSpecSelect != NULL_var) && (pEditor != NULL) && (pHSO != NULL))
	{
		CATIBuildPath *piBuildPath = NULL;
		HRESULT rc = ispSpecSelect->QueryInterface(IID_CATIBuildPath,(void**) &piBuildPath);
		if (SUCCEEDED(rc))
		{
			CATPathElement context = pEditor->GetUIActiveObject();
			CATPathElement *pPathElement = NULL;

			rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
			if (pPathElement != NULL)
			{
				pHSO->AddElement(pPathElement);
				pPathElement->Release();
				pPathElement = NULL;
			}
			piBuildPath->Release();
			piBuildPath = NULL;
		}
	}

	return TRUE;
}

//CATBaseUnknown特征化到CATSpecObject
CATISpecObject_var TestCATIAReferenceCmd::GetSpecFromBaseUnknownFunc(CATBaseUnknown* ipBUOfObject)
{
	cout<<"GetSpecFromBaseUnknownFunc()"<<endl;
	if (!ipBUOfObject)
	{
		cout<<"Internal error :GetSpecFromBaseUnknownFunc()->CATBaseUnknown is NULL "<<endl;
		return NULL_var;
	}

	CATISpecObject_var spiSpecOfObj = NULL_var;
	spiSpecOfObj = ipBUOfObject;
	if (!spiSpecOfObj)
	{
		CATIBRepAccess_var spiBRepAccess = ipBUOfObject;
		if (!!spiBRepAccess)
		{
			CATIFeaturize_var spiFeaturize = spiBRepAccess; 
			if (!!spiFeaturize)
				//特征化
				spiSpecOfObj = spiFeaturize->FeaturizeR(MfPermanentBody|MfDefaultFeatureSupport|MfRelimitedFeaturization|MfDuplicateFeature);
		}

	}


	return spiSpecOfObj;
}

//在字符串中根据指定的间距插入指定字符串，主要用于测试CAA获取的字符转换到Macro获取的字符，每隔512个字符长度会插入" & "
CATUnicodeString TestCATIAReferenceCmd::InsertStringsIntoString(CATUnicodeString istrBase,int iStep,CATUnicodeString istrInsert)
{
	CATUnicodeString ostrResult = "";
	int i=1;
	while(istrBase.GetLengthInChar()>= iStep)
	{
		if (i==1)
		{
			CATUnicodeString strTemp = istrBase.SubString(0,iStep);
			strTemp = strTemp + istrInsert;
			istrBase.ReplaceSubString(0,iStep,"");
			ostrResult = ostrResult + strTemp;
			i++;
		}
		else
		{
			CATUnicodeString strTemp = istrBase.SubString(0,iStep+1);
			strTemp = strTemp + istrInsert;
			istrBase.ReplaceSubString(0,iStep+1,"");
			ostrResult = ostrResult + strTemp;
		}

	}
	ostrResult = ostrResult + istrBase;
	return ostrResult;
}

//
HRESULT TestCATIAReferenceCmd::GetSpecFromReferenceVBA(CATIAPart_var ispiaPart,CATIAReference *ipiaRef,CATISpecObject_var &ospiSpecObj)
{
	HRESULT rc = S_OK;
	CATIAFactory *piaFactory = NULL;
	rc = ispiaPart->get_HybridShapeFactory(piaFactory);
	if (FAILED(rc)||piaFactory==NULL)
	{
		return E_FAIL;
	}
	CATIAHybridShapeFactory_var spiaHybShapeFact = piaFactory;
	if (spiaHybShapeFact ==NULL_var)
	{
		return E_FAIL;
	}
	CATIAHybridShapeExtract *piaExtract = NULL;
	rc = spiaHybShapeFact->AddNewExtract(ipiaRef,piaExtract);
	if (FAILED(rc)||piaExtract==NULL)
	{
		return E_FAIL;
	}
	piaExtract->put_PropagationType(3);
	piaExtract->put_ComplementaryExtract(FALSE);
	piaExtract->put_IsFederated(FALSE);
	ospiSpecObj = piaExtract;
	return rc;
}