// COPYRIGHT Dassault Systemes 2019
//===================================================================
//
// TestCrossDocCmd.cpp
// The state chart based command: TestCrossDocCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jun 2019  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestCrossDocCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
#include "CATCSO.h"
#include "CATICkeParm.h"


CATCreateClass( TestCrossDocCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestCrossDocCmd::TestCrossDocCmd() :
  CATStateCommand ("TestCrossDocCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,_pOtherDocAgent(NULL)
,_pOtherDocFieldAgent(NULL)
,_pOtherDocMultiAgent(NULL)
,_pOtherDocMultiFieldAgent(NULL)
,_pEditor(NULL)
,_pHSO(NULL)
,_pGeneralCls(NULL)
{
	_pDlg = NULL;
	_pDlg = new TestCrossDocDlg();
	_pDlg->Build();
	//_pDlg->SetVisibility(CATDlgShow);

	_pGeneralCls = new GeneralClass();

	_pEditor = CATFrmEditor::GetCurrentEditor();
	if (_pEditor==NULL)
	{
		this->RequestDelayedDestruction();
	}
	_pHSO = _pEditor->GetHSO();




	/*	去除数字字符串末尾多余0的测试代码
	CATUnicodeString strString1 = "1.600";
	CATUnicodeString strString2 = "10.000";
	CATUnicodeString strString3 = "2555";
	CATUnicodeString strString4 = "111.444";
	_pGeneralCls->RemoveLastZeroesFromString(strString1);
	_pGeneralCls->RemoveLastZeroesFromString(strString2);
	_pGeneralCls->RemoveLastZeroesFromString(strString3);
	_pGeneralCls->RemoveLastZeroesFromString(strString4);
	cout<<strString1<<endl;
	cout<<strString2<<endl;
	cout<<strString3<<endl;
	cout<<strString4<<endl;
	cout<<"---------------"<<endl;

	*/

	/*	license检查并选择的测试代码
	_pGeneralCls->CheckStaticLicense("_MD2.slt+");

	*/

	/*	读取xml获取比例的测试代码
	vector<CATListOfDouble> vecScale;
	_pGeneralCls->GetScaleFromXML("ISO_Scale.xml",vecScale);
	for (int i=0;i<vecScale.size();i++)
	{
		for (int j=1;j<=vecScale[i].Size();j++)
		{
			cout<<vecScale[i][j];
		}
		cout<<"\n";
	}
	*/

	/*
	//创建表格测试代码
	CATDocument *pDoc = _pEditor->GetDocument();
	vector<CATIDftSheet*> lstSheets;
	_pGeneralCls->GetAllSheets(pDoc,lstSheets);
	CATIView_var spiBackGrdView = NULL_var;
	_pGeneralCls->GetBackgroundViewOfSheet(lstSheets[0],spiBackGrdView);
	if (spiBackGrdView != NULL_var)
	{
		vector<CATListOfCATUnicodeString> lstTableContents;
		CATListOfCATUnicodeString lstOneRowContents = NULL;
		const wchar_t* iName=NULL;
		CATUnicodeString strName;


		iName = L"No.";
		strName.BuildFromWChar(iName);
		lstOneRowContents.Append(strName);
		iName = L"Level";
		strName.BuildFromWChar(iName);
		lstOneRowContents.Append(strName);
		iName = L"Part No.";
		strName.BuildFromWChar(iName);
		lstOneRowContents.Append(strName);

		lstTableContents.push_back(lstOneRowContents);

		CATIADrawingTable *piaDrwTable = NULL;
		_pGeneralCls->CreatePartInfoTable(spiBackGrdView,0,0,1,3,"Test Table",lstTableContents,piaDrwTable);
	}

	*/

	/* 拆分中英文字符的测试代码

	wchar_t *wchart = L"旁白: ：John, go the hell, 可以吗?";
	CATUnicodeString strTestString = "";
	strTestString.BuildFromWChar(wchart);
	CATListOfCATUnicodeString lstEnString = NULL;
	CATListOfCATUnicodeString lstZhString = NULL;
	_pGeneralCls->SeparateEnZhString(strTestString,lstEnString,lstZhString);
	cout<<"---------Separate String-----------"<<endl;
	//输出英文
	for (int i=1; i <= lstEnString.Size(); i++)
	{
		char chEN;
		CAAUStringConvertToChar(lstEnString[i],&chEN);
		cout<<CAAUStringBuildFromChar(&chEN)<<endl;
	}
	//输出中文
	for (int i=1; i <= lstZhString.Size(); i++)
	{
		wchar_t *wcharZH = new wchar_t[1000];
		//CAAUStringConvertToWChar(lstZhString[i],wcharZH);
		lstZhString[i].ConvertToWChar(wcharZH);
		char hh[256];
		WideCharToMultiByte(CP_ACP,0,wcharZH,wcslen(wcharZH)+1,hh,256,NULL,NULL);
		cout<<hh<<endl;
	}
	ofstream txtfile("C:\\Users\\Administrator\\Desktop\\1.txt",ios::app);
	for (int i=1; i <= lstEnString.Size(); i++)
	{
		char strchar[1000];
		CAAUStringConvertToChar(lstEnString[i],strchar);
		txtfile<<strchar<<"\n";
	}
	for (int i=1; i <= lstZhString.Size(); i++)
	{
		//txt写入中文，unicode转到wchar再转到char
		wchar_t strchar[1000];
		string s;
		//CAAUStringConvertToWChar(lstZhString[i],strchar);
		lstZhString[i].ConvertToWChar(strchar);
		char hh[256];
		WideCharToMultiByte(CP_ACP,0,strchar,wcslen(strchar)+1,hh,256,NULL,NULL);
		//_pGeneralCls->Wchar_tToString(s,strchar);
		txtfile<<hh<<"\n";
	}
	txtfile.close();

	cout<<"----------Chinese String index:"<<endl;
	for (int i=1; i <= lstZhString.Size(); i++)
	{
		int iPos = strTestString.SearchSubString(lstZhString[i]);
		cout<<iPos<<endl;
	}



	*/

	/*
	//获得图纸中的视图的类型，当Section或者Detail视图Isolate以后，他们的视图类型会变成之前关联的最原始的投影视图的类型
	cout<<"--------------Get View Type--------------"<<endl;
	CATDocument *pDoc = _pEditor->GetDocument();
	CATLISTV(CATISpecObject_var) lstSpecOnViews = NULL;
	_pGeneralCls->GetAllViews(pDoc,lstSpecOnViews);
	if (lstSpecOnViews.Size() > 0)
	{
		for (int i=1; i <= lstSpecOnViews.Size(); i++)
		{
			CATIView_var spiView = lstSpecOnViews[i];
			//测试该视图是否Isolate
			CATILinkableObject_var spiLinkObj = spiView->GetDoc();
			if (spiLinkObj == NULL_var)
			{
				cout<<"--Isolate View--"<<endl;
			}
			CATIDftView_var spiDftView = spiView;
			if (spiDftView != NULL_var)
			{
				//CATDrwViewType viewType = spiView->GetViewType();
				CATDftViewType viewType;
				spiDftView->GetViewType(&viewType);
				cout<<viewType<<endl;
			}
		}
	}

	*/

	/* 图纸中创建 ISOView的相关测试代码
	
	vector<CATIDftSheet*> lstSheets;
	_pGeneralCls->GetAllSheets(pDoc,lstSheets);
	CATLISTP(CATIProduct) lstProducts = NULL;
	_pGeneralCls->GetAllRootPrdFromWindows(lstProducts);
	CATIView_var spiViewISO = _pGeneralCls->CreateISOView(lstSheets[0],lstProducts[1]);

	*/

	/* 图纸中创建DetailView的相关测试代码

	vector<CATIDftSheet*> lstSheets;
	_pGeneralCls->GetAllSheets(pDoc,lstSheets);
	CATIView_var spiView = lstSpecOnViews[3];
	double arrdCirclePos[2] = {5,5};
	double arrdViewPos[2] = {100,200};
	CATIView_var spiViewDetail = _pGeneralCls->CreateDetailView(lstSheets[0],lstSpecOnViews[3],arrdCirclePos,15,2,arrdViewPos,"Detail","AA","");

	*/

	/* 图纸实例化相关测试代码

	CATDocument *pDoc = _pEditor->GetDocument();
	vector<CATIDftSheet*> lstSheets;
	_pGeneralCls->GetAllSheets(pDoc,lstSheets);

	CATUnicodeString strSheetFormat = "";
	double dblWidth = 0;
	double dblHeight = 0;
	_pGeneralCls->GetSheetFormatAndSize(lstSheets[0],strSheetFormat,dblWidth,dblHeight);

	CATIView_var spiViewBackground = NULL_var;
	_pGeneralCls->GetBackgroundViewOfSheet(lstSheets[0],spiViewBackground);
	if (spiViewBackground != NULL_var)
	{
		//激活View
		CATIDftView *piDftView=NULL;
		HRESULT rc=spiViewBackground->QueryInterface(IID_CATIDftView,(void**)&piDftView);
		if(FAILED(rc)||piDftView==NULL) 
		{
			return;
		}
		piDftView->Activate();
		//
		CATI2DWFFactory_var spi2DWFFactory = spiViewBackground;
		double arrd[2] = {100,100};
		CATISpecObject_var spiSpecPoint = spi2DWFFactory->CreatePoint(arrd);
		spiSpecPoint->Update();
	}

	CATIDftSheet *piDftDetailSheet = NULL;
	CATUnicodeString strSheetName = "aaa";
	_pGeneralCls->CreateDetailSheet(pDoc,strSheetName,piDftDetailSheet);

	CATIView_var spiViewAdd = _pGeneralCls->CreateDetailView(piDftDetailSheet);
	if (spiViewAdd != NULL_var)
	{
		CATIDftView *piDftView=NULL;
		HRESULT rc=spiViewAdd->QueryInterface(IID_CATIDftView,(void**)&piDftView);
		if(FAILED(rc)||piDftView==NULL) 
		{
			return;
		}
		piDftView->Activate();
		//
		CATI2DWFFactory_var spi2DWFFactory = spiViewAdd;
		double arrd[2] = {100,100};
		CATISpecObject_var spiSpecCircle = spi2DWFFactory->CreateCircle(arrd,20);
		spiSpecCircle->Update();
	}
	CATMathPoint2D mathPt2D(50,50);
	CATBaseUnknown *pBUView = spiViewAdd;
	_pGeneralCls->InsertSymbol(spiViewBackground,"Circle",mathPt2D,pBUView,1);

	*/

	/*3D模型树遍历属性，计算包围盒等测试代码

	CATIProduct_var spiRootProduct = NULL_var;
	_pGeneralCls->GetRootProductUpdate(spiRootProduct);
	CATUnicodeString strName = spiRootProduct->GetPartNumber();

	CATLISTP(CATIProduct) lstRootProduct = NULL;
	_pGeneralCls->GetAllRootPrdFromWindows(lstRootProduct);
	if (lstRootProduct.Size() != 0)
	{
		for (int i=1; i <= lstRootProduct.Size(); i++)
		{
			CATUnicodeString strRootName = lstRootProduct[i]->GetPartNumber();
			cout<<strRootName<<endl;
		}
	}

	CATLISTV(CATISpecObject_var) lstSpecOnParmSet;
	CATIParmPublisher_var spiParmPub=spiRootProduct;
	if(NULL_var != spiParmPub)
	{
		spiParmPub->GetAllChildren("CATICkeParameterSet",lstSpecOnParmSet);	//CATICkeParameterSet , CATICkeParm
	}
	for (int i=1; i <= lstSpecOnParmSet.Size(); i++)
	{
		//Alias获得的名称和Name方法获得的一样，得到的ParameterSet仅仅是名称，不是路径
		CATISpecObject_var spiSpecOnParmSet = lstSpecOnParmSet[i];
		CATIAlias_var spiAliasOnParmSet = spiSpecOnParmSet;
		if (spiAliasOnParmSet != NULL_var)
		{
			CATUnicodeString strParmSetName = spiAliasOnParmSet->GetAlias();
			cout<<"============"<<strParmSetName<<"=================="<<endl;
		}
		//
		CATICkeParameterSet_var spiCkeParmSet = lstSpecOnParmSet[i];
		if (spiCkeParmSet != NULL_var)
		{
			CATUnicodeString strParmSetName = spiCkeParmSet->Name();
			cout<<"============"<<strParmSetName<<"=================="<<endl;
		}
		
		CATIParmPublisher_var spiParmPublisher = spiSpecOnParmSet;
		if (spiParmPublisher != NULL_var)
		{
			CATLISTV(CATISpecObject_var) lstSpecOnParm = NULL;
			spiParmPublisher->GetDirectChildren("CATICkeParm",lstSpecOnParm);
			for (int j=1; j<=lstSpecOnParm.Size(); j++)
			{
				//转到Alias或者Name方法，会得到完整的ParameterSet的路径+名称
				CATIAlias_var spiAliasOnParm = lstSpecOnParm[j];
				if (spiAliasOnParm != NULL_var)
				{
					CATUnicodeString strParmName = spiAliasOnParm->GetAlias();
					cout<<"------------"<<strParmName<<"-----------"<<endl;
				}

				CATICkeParm_var spiCkeParm = lstSpecOnParm[j];
				if (spiCkeParm != NULL_var)
				{
					CATUnicodeString strParmName = spiCkeParm->Name();
					cout<<"------------"<<strParmName<<"-----------"<<endl;
				}
			}

		}
	}

	double dblParm = 0;
	_pGeneralCls->GetParameterOfObject(spiRootProduct,"Parameters","Length.7",dblParm);
	//取出的属性的double值需要乘1000，才能换算到界面上显示的mm值
	dblParm = 1000*dblParm;

	CATMathBox mathBoxAll;
	HRESULT rc = _pGeneralCls->Get3DBoundingBoxFromProduct(spiRootProduct,mathBoxAll);
	CATMathPoint mathPointHigh;
	CATMathPoint mathPointLow;
	if (SUCCEEDED(rc))
	{
		mathBoxAll.GetHighLimit(mathPointHigh);
		mathBoxAll.GetLowLimit(mathPointLow);
	}

	CATMathBox CATMathBoxSingle;
	CATMathBoxSingle = _pGeneralCls->Get3DBoundingBoxOfSinglePart(spiRootProduct);

	*/

 	
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestCrossDocCmd::~TestCrossDocCmd()
{
   if (_pDlg != NULL)
   {
	   _pDlg->RequestDelayedDestruction();
	   _pDlg = NULL;
   }

   if (_pOtherDocAgent != NULL)
   {
	   _pOtherDocAgent->RequestDelayedDestruction();
	   _pOtherDocAgent = NULL;
   }

   if (_pOtherDocFieldAgent != NULL)
   {
	   _pOtherDocFieldAgent->RequestDelayedDestruction();
	   _pOtherDocFieldAgent = NULL;
   }

   if (_pOtherDocMultiAgent != NULL)
   {
	   _pOtherDocMultiAgent->RequestDelayedDestruction();
	   _pOtherDocMultiAgent = NULL;
   }

   if (_pOtherDocMultiFieldAgent != NULL)
   {
	   _pOtherDocMultiFieldAgent->RequestDelayedDestruction();
	   _pOtherDocMultiFieldAgent = NULL;
   }

   if (_pGeneralCls != NULL)
   {
	   delete _pGeneralCls;
	   _pGeneralCls = NULL;
   }

   _pHSO = NULL;
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestCrossDocCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&TestCrossDocCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&TestCrossDocCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&TestCrossDocCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&TestCrossDocCmd::ActionOK,
		NULL);

	_pOtherDocAgent= new CATOtherDocumentAgent("SelectionCircleId","CATBasicMultiDocumentCommand","CATDialogEngine");	//CATBasicMultiDocumentCommand , CATMultiDocumentCommand
	_pOtherDocAgent->SetOrderedElementType( "CATSurface" );
	//_pOtherDocAgent->AddOrderedElementType( "CATIPrtPart" );
	_pOtherDocAgent->SetBehavior( CATDlgEngWithCSO|CATDlgEngWithPrevaluation|CATDlgEngRepeat);

	_pOtherDocMultiAgent= new CATOtherDocumentAgent("Multi Select","CAADegSampleMultiDocumentCommand","CAADegMultiDocCmd");	//CATBasicMultiDocumentCommand , CATMultiDocumentCommand
	//_pOtherDocMultiAgent->SetOrderedElementType( "CATIProduct" );
	//_pOtherDocMultiAgent->AddOrderedElementType( "CATIPrtPart" );
	//_pOtherDocMultiAgent->SetOrderedElementType( "CATSurface" );
	//_pOtherDocMultiAgent->SetElementType("CATPoint");
	//_pOtherDocMultiAgent->SetElementType("CATCurve");
	_pOtherDocMultiAgent->SetElementType("CATSurface");

	//如果使用CATDlgEngMultiAcquisitionCtrl，则CATDlgEngRepeat不能用
	_pOtherDocMultiAgent->SetBehavior( CATDlgEngMultiAcquisition|CATDlgEngWithPrevaluation|CATDlgEngWithCSO | CATDlgEngRepeat | CATDlgEngNotReactivated);	//CATDlgEngRepeat , CATDlgEngMultiAcquisition , CATDlgEngNotReactivated

	_pOtherDocFieldAgent = new CATDialogAgent("Select CrossDoc Field Agent");
	_pOtherDocFieldAgent->AcceptOnNotify(_pDlg->GetSelectorListProduct(),_pDlg->GetSelectorListProduct()->GetListSelectNotification());

	_pOtherDocMultiFieldAgent = new CATDialogAgent("Select Multi CrossDoc Field Agent");
	_pOtherDocMultiFieldAgent->AcceptOnNotify(_pDlg->GetSelectorListMultiSelect(),_pDlg->GetSelectorListMultiSelect()->GetListSelectNotification());

	CATDialogState *pDlgStateProduct = GetInitialState("Select a CrossDoc");
	pDlgStateProduct->AddDialogAgent(_pOtherDocAgent);
	pDlgStateProduct->AddDialogAgent(_pOtherDocFieldAgent);
	pDlgStateProduct->AddDialogAgent(_pOtherDocMultiFieldAgent);

	CATDialogState *pDlgStateMultiSelect = AddDialogState("Select Multi CrossDoc");
	pDlgStateMultiSelect->AddDialogAgent(_pOtherDocMultiAgent);
	pDlgStateMultiSelect->AddDialogAgent(_pOtherDocFieldAgent);
	pDlgStateMultiSelect->AddDialogAgent(_pOtherDocMultiFieldAgent);

	AddTransition( pDlgStateProduct, pDlgStateProduct, 
		IsOutputSetCondition (_pOtherDocAgent),
		Action ((ActionMethod) &TestCrossDocCmd::ActionCrossDocSelect));

	AddTransition( pDlgStateMultiSelect, pDlgStateMultiSelect, 
		IsOutputSetCondition (_pOtherDocMultiAgent),
		Action ((ActionMethod) &TestCrossDocCmd::ActionCrossDocMultiSelectUpdate));

	AddTransition( pDlgStateProduct, pDlgStateMultiSelect, 
		IsOutputSetCondition (_pOtherDocMultiFieldAgent),
		Action ((ActionMethod) &TestCrossDocCmd::SwitchToCrossDocMultiSelect));

	AddTransition( pDlgStateMultiSelect, pDlgStateProduct, 
		IsOutputSetCondition (_pOtherDocFieldAgent),
		Action ((ActionMethod) &TestCrossDocCmd::SwitchToCrossDocSelect));

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TestCrossDocCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

void TestCrossDocCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
}

void TestCrossDocCmd::ActionOK(void * data)
{
	CATMathTransformation mathTransAbs = _pGeneralCls->GetAbsTransformation(_spiProductSelect);
	
	CATIPrtContainer_var ospiCont=NULL_var;
	CATGeoFactory*  pGeoFactory=_pGeneralCls->GetProductGeoFactoryAndPrtCont(_spiProductSelect,ospiCont);
	CATGeoFactory_var spGeoFact = pGeoFactory;

	CATBody_var spBody = _pGeneralCls->GetBodyFromFeature(_spBUSelect);
	CATLISTP(CATCell) LISTCell0,LISTCell1,LISTCell2;

	spBody->GetAllCells( LISTCell0, 0 );
	spBody->GetAllCells(LISTCell1,1);
	spBody->GetAllCells(LISTCell2,2);

	CATGeoFactory_var spGeoFactFromBody = spBody->GetContainer();

	if (spGeoFact == spGeoFactFromBody)
	{
		cout<<"Two GeoFactory Equal...."<<endl;
	}

}

CATBoolean TestCrossDocCmd::ActionCrossDocSelect()
{
	if(_pOtherDocAgent==NULL)
	{
		return FALSE;
	}

	if(NULL != _pHSO)
	{
		_pHSO->Empty(); 
	}
	
	//CATBaseUnknown *pSelection = _pOtherDocAgent->GetElementValue();
	//CATPathElement * pPath =_pOtherDocAgent->GetValue() ;
	//if(pSelection==NULL||pPath==NULL)
	//{
	//	_pOtherDocAgent->InitializeAcquisition();
	//	return FALSE;
	//}

	//_pOtherDocAgent->InitializeAcquisition();

	//CATBaseUnknown * pPrd = pPath->FindElement(IID_CATIProduct);
	//if (pPrd==NULL)
	//{
	//	pPrd = pPath->FindElement(IID_CATIPrtPart);
	//	if (pPrd==NULL)
	//		return FALSE;

	//	CATIPrtPart_var spPrtPart=pPrd;
	//	if (spPrtPart==NULL_var)
	//		return FALSE;

	//	CATISpecObject_var spPartObject=spPrtPart->GetProduct( );
	//	if (spPartObject==NULL_var)
	//		return FALSE;

	//	_spYFDatumToProduct=spPartObject;
	//}
	//else
	//{
	//	_spYFDatumToProduct=pPrd;

	//}

	//if (_spYFDatumToProduct==NULL_var)
	//{
	//	cout<<"Get Product Failed"<<endl;
	//	return FALSE;
	//}
	CATBaseUnknown * pBUSelect = NULL;
	CATIProduct_var spiProductSelect = NULL_var;
	_pGeneralCls->TransferSelectToBU(_pOtherDocAgent,pBUSelect,spiProductSelect);
	if (pBUSelect == NULL || spiProductSelect == NULL)
	{
		_pOtherDocAgent->InitializeAcquisition();
		return FALSE;
	}
	//CATBaseUnknown_var spBUObj = pBUSelect;
	//CATBody_var spBody = _pGeneralCls->GetBodyFromFeature(spBUObj);
	//CATMathPoint mathPoint;
	//CATMathVector mathVector;
	//_pGeneralCls->GetSurfacePoint(spBody,mathPoint,mathVector);
	//
	CATUnicodeString strInstanceName = "";
	HRESULT rc = spiProductSelect->GetPrdInstanceName(strInstanceName);
	if (FAILED(rc))
	{
		_pOtherDocAgent->InitializeAcquisition();
		return FALSE;
	}
	//
	_pDlg->GetSelectorListProduct()->ClearLine();
	_pDlg->GetSelectorListProduct()->SetLine(strInstanceName,-1,CATDlgDataAdd);
	//
	_pOtherDocAgent->InitializeAcquisition();
	return TRUE;
}

CATBoolean TestCrossDocCmd::ActionCrossDocMultiSelect()
{
	if(_pOtherDocMultiAgent==NULL)
	{
		return FALSE;
	}

	if(NULL != _pHSO)
	{
		_pHSO->Empty(); 
	}
	
	CATBaseUnknown * pBUSelect = NULL;
	CATIProduct_var spiProductSelect = NULL_var;
	_pGeneralCls->TransferSelectToBU(_pOtherDocMultiAgent,pBUSelect,spiProductSelect);
	if (pBUSelect == NULL || spiProductSelect == NULL)
	{
		_pOtherDocMultiAgent->InitializeAcquisition();
		return FALSE;
	}
	//
	CATUnicodeString strInstanceName = "";
	HRESULT rc = spiProductSelect->GetPrdInstanceName(strInstanceName);
	if (FAILED(rc))
	{
		_pOtherDocMultiAgent->InitializeAcquisition();
		return FALSE;
	}
	//
	//_pDlg->GetSelectorListProduct()->ClearLine();
	_pDlg->GetSelectorListMultiSelect()->SetLine(strInstanceName,-1,CATDlgDataAdd);
	//
	_pOtherDocMultiAgent->InitializeAcquisition();
	return TRUE;
}

CATBoolean TestCrossDocCmd::ActionCrossDocMultiSelectUpdate()
{
	//if (_pHSO)
	//{
	//	_pHSO->Empty();
	//}

	CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();
	CATCSO * pCSO = NULL ;
	CATHSO * pHSO = NULL;
	if ( NULL != pEditor )
	{
		pCSO = pEditor->GetCSO() ;
		pHSO = pEditor->GetHSO();
	}
	CATSO * pSO = NULL ;

	pSO= _pOtherDocMultiAgent->GetListOfValues( )  ;

	//_pYFJCCreateJoinDlg->GetSelectorList(1)->ClearLine();

	if ( NULL != pSO )
	{
		int lg = pSO->GetSize();

		for ( int i=0 ; i < lg ; i++)
		{
			// In case of Dialog Engine, the SO contains CATPathElement
			// The cast is possible
			//
			CATPathElement * pPath = (CATPathElement*) (*pSO)[i] ;

			if ( NULL != pPath )
			{
				// Gets the leaf of the path
				int leaf = ( pPath->GetSize() -1 );

				// Set the complete path of the current element
				if ( NULL != pCSO )
					//pCSO->AddElement(pPath);
				{
					// Creation of the path from the root to the Circle
					CATPathElement RootPath     = pEditor->GetUIActiveObject();
					CATPathElement *pPathMultiSelect= new CATPathElement(RootPath);
					pPathMultiSelect->AddChildElement(pPath);

					// Adds the path into the cso
					pCSO->AddElement(pPathMultiSelect);

					//pHSO->AddElement(pPathMultiSelect);

					////AddElement AddRef'ed
					pPathMultiSelect->Release();
					pPathMultiSelect=NULL;
				}

				//if (pPath != NULL)
				//{
				//	pHSO->Empty();
				//	pHSO->AddElements(pPath);
				//	pHSO->EndAddElements();
				//}

				// To decode the selected element
				CATBaseUnknown * pElt = (*pPath)[leaf];

				_spBUSelect = pElt;

				_pGeneralCls->SetHighlight(pElt);

				CATIProduct_var ospProductSeletion = NULL_var;
				CATBaseUnknown *pProduct = pPath->FindElement(IID_CATIProduct);
				if (pProduct == NULL)
				{
					pProduct = pPath->FindElement(IID_CATIPrtPart);
					if (pProduct == NULL)
					{
						return FALSE;
					}
					CATIPrtPart_var spPart = pProduct;
					if (spPart == NULL_var)
					{
						return FALSE;
					}
					CATISpecObject_var spPartObject = spPart->GetProduct();
					if (spPartObject == NULL_var)
					{
						return FALSE;
					}
					ospProductSeletion = spPartObject;
				}
				ospProductSeletion = pProduct;

				_spiProductSelect = ospProductSeletion;

				//CATBaseUnknown_var spBUObj = pElt;
				//CATBody_var spBody = _pGeneralCls->GetBodyFromFeature(spBUObj);
				//CATMathPoint mathPoint;
				//CATMathVector mathVector;
				//_pGeneralCls->GetSurfacePoint(spBody,mathPoint,mathVector);

				//CATIAlias_var spAlias=pElt;
				//_pDlg->GetSelectorListMultiSelect()->SetLine(spAlias->GetAlias(),(i-1),CATDlgDataAdd );

				CATUnicodeString strPath = "";
				_pGeneralCls->PathElementString(pPath,strPath);
				_pDlg->GetSelectorListMultiSelect()->SetLine(strPath,(i-1),CATDlgDataAdd );

			}
		}
	}


	_pOtherDocMultiAgent->InitializeAcquisition(); 

	return TRUE;
}


CATBoolean TestCrossDocCmd::SwitchToCrossDocSelect()
{
	_pDlg->GetSelectorListMultiSelect()->ClearSelect();
	_pOtherDocFieldAgent->InitializeAcquisition();
	return TRUE;
}

CATBoolean TestCrossDocCmd::SwitchToCrossDocMultiSelect()
{
	_pDlg->GetSelectorListProduct()->ClearSelect();
	_pOtherDocMultiFieldAgent->InitializeAcquisition();
	return TRUE;
}

//描述：高亮某对象
//输入：CATISpecObject对象
//输出：CATBoolean
//返回：CATBoolean
CATBoolean TestCrossDocCmd::AddHSO(CATBaseUnknown_var ispSpecSelect)
{
	HRESULT rc=S_OK;

	CATFrmEditor * pEditor=NULL;
	pEditor = CATFrmEditor::GetCurrentEditor();
	if(pEditor==NULL)
		return FALSE;

	CATHSO * pHSO = pEditor->GetHSO();
	if(pHSO==NULL)
		return FALSE;

	if (pHSO != NULL)
		pHSO->Empty();

	if ((ispSpecSelect != NULL_var) && (pEditor != NULL) && (pHSO != NULL))
	{
		CATIBuildPath *piBuildPath = NULL;
		HRESULT rc = ispSpecSelect->QueryInterface(IID_CATIBuildPath,(void**) &piBuildPath);
		if (SUCCEEDED(rc))
		{
			CATPathElement context = pEditor->GetUIActiveObject();
			CATPathElement *pPathElement = NULL;

			rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
			if (pPathElement != NULL)
			{
				pHSO->AddElement(pPathElement);
				pPathElement->Release();
				pPathElement = NULL;
			}
			piBuildPath->Release();
			piBuildPath = NULL;
		}
	}

	return TRUE;
}