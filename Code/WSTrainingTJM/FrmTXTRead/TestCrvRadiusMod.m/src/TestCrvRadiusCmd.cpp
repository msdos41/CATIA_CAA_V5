// COPYRIGHT Dassault Systemes 2019
//===================================================================
//
// TestCrvRadiusCmd.cpp
// The state chart based command: TestCrvRadiusCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2019  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestCrvRadiusCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TestCrvRadiusCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestCrvRadiusCmd::TestCrvRadiusCmd() :
  CATStateCommand ("TestCrvRadiusCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,_pDlg(NULL)
,_pGeneralCls(NULL)
,_pSurfaceAgent(NULL),_pSurfaceFieldAgent(NULL)
{
	_pDlg = new TestCrvRadiusDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pGeneralCls = new GeneralClass();
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestCrvRadiusCmd::~TestCrvRadiusCmd()
{
	if (_pDlg != NULL)
	{
		_pDlg->RequestDelayedDestruction();
		_pDlg = NULL;
	}

	if (_pGeneralCls != NULL)
	{
		delete _pGeneralCls;
		_pGeneralCls = NULL;
	}

	if (_pSurfaceAgent != NULL)
	{
		_pSurfaceAgent->RequestDelayedDestruction();
		_pSurfaceAgent = NULL;
	}

	if (_pSurfaceFieldAgent != NULL)
	{
		_pSurfaceFieldAgent->RequestDelayedDestruction();
		_pSurfaceFieldAgent = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestCrvRadiusCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&TestCrvRadiusCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&TestCrvRadiusCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&TestCrvRadiusCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&TestCrvRadiusCmd::ExitCmd,
		NULL);

	//SurfaceÑ¡Ôñ
	_pSurfaceAgent = new CATFeatureImportAgent("Select Surface");
	_pSurfaceAgent->SetElementType("CATSurface");
	_pSurfaceAgent->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithCSO|CATDlgEngWithPSOHSO|CATDlgEngOneShot);

	_pSurfaceFieldAgent = new CATDialogAgent("Select Surface Field");
	_pSurfaceFieldAgent->AcceptOnNotify(_pDlg->GetSelectorListSurface(),
										_pDlg->GetSelectorListSurface()->GetListSelectNotification());

	CATDialogState *pDlgStateSurface = GetInitialState("Select Line");
	pDlgStateSurface->AddDialogAgent(_pSurfaceAgent);
	pDlgStateSurface->AddDialogAgent(_pSurfaceFieldAgent);

	AddTransition( pDlgStateSurface, pDlgStateSurface, 
				IsOutputSetCondition (_pSurfaceAgent),
				Action ((ActionMethod) &TestCrvRadiusCmd::ActionSurfaceSelect));

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TestCrvRadiusCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

CATBoolean TestCrvRadiusCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
	return TRUE;
}

void TestCrvRadiusCmd::ActionSurfaceSelect(void * data)
{
	//
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor!=NULL)
	{
		CATHSO *pHSO = pEditor->GetHSO();
		pHSO->Empty();
	}
	
	//
	CATBaseUnknown *pBUSelect = NULL;
	CATPathElement *pPath = _pSurfaceAgent->GetValue();
	pBUSelect = _pSurfaceAgent->GetElementValue(pPath);

	CATUnicodeString strAlias = _pGeneralCls->GetNameFromBaseUnknownFunc(pBUSelect);

	_pDlg->GetSelectorListSurface()->ClearLine();

	_pDlg->GetSelectorListSurface()->SetLine(strAlias,-1,CATDlgDataAdd);

	int iTabRow = 0;
	_pDlg->GetSelectorListSurface()->SetSelect(&iTabRow,1);

	//
	_pGeneralCls->SetHighlight(pBUSelect);
	//
	ShowResults(pBUSelect);

	_pSurfaceAgent->InitializeAcquisition();
}

void TestCrvRadiusCmd::ShowResults(CATBaseUnknown_var ispBU)
{
	CATBody_var spBody = _pGeneralCls->GetBodyFromFeature(ispBU);
	if (spBody == NULL_var)
	{
		return;
	}
	CATLISTP(CATCell) lstCell;
	spBody->GetAllCells(lstCell,2);
	if (lstCell.Size()==0)
	{
		return;
	}
	//print edge size of each Surface
	CATLISTP(CATCell) lstCellEdge;
	spBody->GetAllCells(lstCellEdge,1);
	cout<<"lstCellEdge Size: "<<lstCellEdge.Size()<<endl;
	//
	CATFace_var spFace = lstCell[1];
	if (spFace == NULL_var)
	{
		return;
	}
	double dblCrvRadiusMin,dblCrvRadiusMax;
	HRESULT rc = _pGeneralCls->GetCrvRadiusOnSurface(spFace,dblCrvRadiusMin,dblCrvRadiusMax);
	if (SUCCEEDED(rc))
	{
		cout<<"Rmin: "<<dblCrvRadiusMin<<"   Rmax: "<<dblCrvRadiusMax<<endl;
	}
	//
	CATUnicodeString strRefName = ShowReferenceName(ispBU);
	//
	CATICGMObject *pCurTopo = 0;
	rc=spBody->QueryInterface(IID_CATICGMObject,(void**)&pCurTopo);
	if (SUCCEEDED(rc)&&pCurTopo!=NULL)
	{
		unsigned long curResultTag = pCurTopo->GetPersistentTag();
		cout <<"Current Selection's Topo Result tag : " ;
		cout << curResultTag << endl;
	}

}

CATUnicodeString TestCrvRadiusCmd::ShowReferenceName(CATBaseUnknown_var ispBU)
{
	CATUnicodeString ostrRefName = "";
	CATISpecObject_var spiSpecObj = _pGeneralCls->GetSpecFromBaseUnknownFunc(ispBU);
	if (spiSpecObj == NULL_var)
	{
		return ostrRefName;
	}
	//Get From BaseUnknown
	CATIAReference *piaReference = NULL;
	HRESULT rc = GetReferenceFromObject(ispBU,piaReference);
	if (FAILED(rc) || piaReference == NULL)
	{
		return ostrRefName;
	}
	CATBSTR bstrRefName;
	piaReference->get_DisplayName(bstrRefName);
	ostrRefName.BuildFromBSTR(bstrRefName);

	//Get From SpecObj
	CATIAReference *piaReferenceSpecObj = NULL;
	rc = GetReferenceFromObject(ispBU,piaReferenceSpecObj);
	if (SUCCEEDED(rc) && piaReferenceSpecObj != NULL)
	{
		CATBSTR bstrRefNameSpecObj;
		piaReference->get_DisplayName(bstrRefNameSpecObj);
		CATUnicodeString strRefNameSpecObj = "";
		strRefNameSpecObj.BuildFromBSTR(bstrRefNameSpecObj);
		cout<<"Get Ref Name from SpecObj: "<<strRefNameSpecObj<<endl;
	}
	cout<<"Get Ref Name from BaseUnknown: "<<ostrRefName<<endl;	
	return ostrRefName;

}