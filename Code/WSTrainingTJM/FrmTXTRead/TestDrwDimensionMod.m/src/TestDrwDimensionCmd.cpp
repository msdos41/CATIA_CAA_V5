// COPYRIGHT Dassault Systemes 2019
//===================================================================
//
// TestDrwDimensionCmd.cpp
// The state chart based command: TestDrwDimensionCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2019  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestDrwDimensionCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TestDrwDimensionCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestDrwDimensionCmd::TestDrwDimensionCmd() :
  CATStateCommand ("TestDrwDimensionCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,_pLineAgent(NULL),_pLineFieldAgent(NULL)
,_lstBULines(NULL),_lstBUViews(NULL)
{
	_pDlg = NULL;
	_pDlg = new TestDrwDimensionDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pGeneralCls = new GeneralClass();

}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestDrwDimensionCmd::~TestDrwDimensionCmd()
{
	if (_pDlg != NULL)
	{
		_pDlg->RequestDelayedDestruction();
		_pDlg = NULL;
	}

	if (_pLineAgent != NULL)
	{
		_pLineAgent->RequestDelayedDestruction();
		_pLineAgent = NULL;
	}

	if (_pLineFieldAgent != NULL)
	{
		_pLineFieldAgent->RequestDelayedDestruction();
		_pLineFieldAgent = NULL;
	}

	if (_pGeneralCls != NULL)
	{
		delete _pGeneralCls;
		_pGeneralCls = NULL;
	}

	_lstBULines.RemoveAll();
	_lstBUViews.RemoveAll();
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestDrwDimensionCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&TestDrwDimensionCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&TestDrwDimensionCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&TestDrwDimensionCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&TestDrwDimensionCmd::ActionOK,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButtonClear(),
		_pDlg->GetPushButtonClear()->GetPushBActivateNotification(),
		(CATCommandMethod)&TestDrwDimensionCmd::ActionClear,
		NULL);

	//LineÑ¡Ôñ
	_pLineAgent = new CATFeatureImportAgent("Select Line");
	_pLineAgent->SetElementType("IDMLine2D");
	_pLineAgent->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithCSO|CATDlgEngWithPSOHSO|CATDlgEngOneShot);

	_pLineFieldAgent = new CATDialogAgent("Select Line Field");
	_pLineFieldAgent->AcceptOnNotify(_pDlg->GetSelectorListLine(),
									 _pDlg->GetSelectorListLine()->GetListSelectNotification());

	CATDialogState *pDlgStateLine = GetInitialState("Select Line");
	pDlgStateLine->AddDialogAgent(_pLineAgent);
	pDlgStateLine->AddDialogAgent(_pLineFieldAgent);

	AddTransition( pDlgStateLine, pDlgStateLine, 
		IsOutputSetCondition (_pLineAgent),
		Action ((ActionMethod) &TestDrwDimensionCmd::ActionLineSelect));
}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TestDrwDimensionCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

CATBoolean TestDrwDimensionCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
	return TRUE;
}

CATBoolean TestDrwDimensionCmd::ActionClear(void * data)
{
	_pDlg->GetSelectorListLine()->ClearLine();
	_lstBULines.RemoveAll();
	_lstBUViews.RemoveAll();
	return TRUE;
}

CATBoolean TestDrwDimensionCmd::ActionOK(void * data)
{
	//
	if (_lstBULines.Size()!=2 || _lstBUViews.Size()!=2)
	{
		return FALSE;
	}
	//
	CATISpecObject_var spiSpecLine1 = _lstBULines[1];
	CATISpecObject_var spiSpecLine2 = _lstBULines[2];
	CATISpecObject_var spiSpecView = NULL_var;
	spiSpecView = spiSpecLine1->GetFather();
	CATIView_var spiView = spiSpecView;
	if (spiView == NULL_var)
	{
		return FALSE;
	}
	//¼¤»îView
	CATIDftView *piDftView=NULL;
	HRESULT rc=spiView->QueryInterface(IID_CATIDftView,(void**)&piDftView);
	if(FAILED(rc)||piDftView==NULL) 
	{
		return FALSE;
	}
	piDftView->Activate();
	//CATIView *piView = NULL;
	//CATBaseUnknown *pBUView1 = _lstBUViews[1];
	//HRESULT rc = pBUView1->QueryInterface(IID_CATIView,(void**)piView);
	if (spiSpecLine1==NULL_var || spiSpecLine2==NULL_var || spiView==NULL_var) 
	{
		return FALSE;
	}
	//
	CATIDrwAnnotationFactory_var spiDrwAnno = spiView;
	if (spiDrwAnno == NULL_var)
	{
		return FALSE;
	}
	//
	IDMCurve2D_var spIDMCurve2D1 = NULL_var;
	rc = _lstBULines[1]->QueryInterface(IID_IDMCurve2D,(void**)&spIDMCurve2D1);
	if (FAILED(rc) || spIDMCurve2D1 ==NULL_var)
	{
		return FALSE;
	}
	IDMCurve2D_var spIDMCurve2D2 = NULL_var;
	rc = _lstBULines[2]->QueryInterface(IID_IDMCurve2D,(void**)&spIDMCurve2D2);
	if (FAILED(rc) || spIDMCurve2D2 ==NULL_var)
	{
		return FALSE;
	}
	double curve1Pt1[2],curve1Pt2[2],curve2Pt1[2],curve2Pt2[2];
	spIDMCurve2D1->GetEndPoints(curve1Pt1,curve1Pt2);
	spIDMCurve2D2->GetEndPoints(curve2Pt1,curve2Pt2);
	//
	CATIDrwDimDimension_var spiDim = NULL_var;
	_pGeneralCls->Create2DDrwDimension(spiDrwAnno,spiSpecLine1,spiSpecLine2,DrwDimAngle,DrwDimAuto,CATMathPoint2D(curve1Pt1),CATMathPoint2D(curve2Pt2),spiDim);
	return TRUE;
}

void TestDrwDimensionCmd::ActionLineSelect(void * data)
{
	CATBaseUnknown *pBUSelect = NULL;
	CATPathElement *pPath = _pLineAgent->GetValue();
	pBUSelect = _pLineAgent->GetElementValue(pPath);

	CATBaseUnknown *pBUView = pPath->FindElement(IID_CATIView);
	if (pBUView!=NULL)
	{
		CATUnicodeString strAliasView = _pGeneralCls->GetNameFromBaseUnknownFunc(pBUView);
		cout<<strAliasView<<endl;
		_lstBUViews.Append(pBUView);
	}

	_lstBULines.Append(pBUSelect);
	_pDlg->GetSelectorListLine()->ClearLine();
	for (int i=1; i <= _lstBULines.Size(); i++)
	{
		CATUnicodeString strAlias = _pGeneralCls->GetNameFromBaseUnknownFunc(_lstBULines[i]);
		_pDlg->GetSelectorListLine()->SetLine(strAlias,-1,CATDlgDataAdd);
		int iTabRow = i-1;
		_pDlg->GetSelectorListLine()->SetSelect(&iTabRow,1);
	}

	_pLineAgent->InitializeAcquisition();
}