// COPYRIGHT Dassault Systemes 2020
//===================================================================
//
// TestEnvelopeCmd.cpp
// The state chart based command: TestEnvelopeCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  May 2020  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestEnvelopeCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TestEnvelopeCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestEnvelopeCmd::TestEnvelopeCmd() :
  CATStateCommand ("TestEnvelopeCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,_pGeneralCls(NULL)
,_pEditor(NULL)
,_pHSO(NULL)
{
	_pDlg = NULL;
	_pDlg = new TestEnvelopeDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pSelAAgent = NULL;
	_pSelBAgent = NULL;
	_pSelAFieldAgent = NULL;
	_pSelBFieldAgent = NULL;

	_pGeneralCls = new GeneralClass();

	_pEditor = CATFrmEditor::GetCurrentEditor();

	if (NULL!=_pEditor)
	{
		_pHSO = _pEditor->GetHSO();
	}
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestEnvelopeCmd::~TestEnvelopeCmd()
{
	if (_pDlg != NULL)
	{
		_pDlg->RequestDelayedDestruction();
		_pDlg = NULL;
	}

	if (_pGeneralCls != NULL)
	{
		delete _pGeneralCls;
		_pGeneralCls = NULL;
	}

	_pEditor = NULL;

	_pHSO->Empty();
	_pHSO = NULL;

	if (_pSelAAgent != NULL)
	{
		_pSelAAgent->RequestDelayedDestruction();
		_pSelAAgent = NULL;
	}

	if (_pSelAFieldAgent != NULL)
	{
		_pSelAFieldAgent->RequestDelayedDestruction();
		_pSelAFieldAgent = NULL;
	}

	if (_pSelBAgent != NULL)
	{
		_pSelBAgent->RequestDelayedDestruction();
		_pSelBAgent = NULL;
	}

	if (_pSelBFieldAgent != NULL)
	{
		_pSelBFieldAgent->RequestDelayedDestruction();
		_pSelBFieldAgent = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestEnvelopeCmd::BuildGraph()
{
	//对话框
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&TestEnvelopeCmd::ActionExit,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&TestEnvelopeCmd::ActionExit,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&TestEnvelopeCmd::ActionExit,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&TestEnvelopeCmd::ActionOK,
		NULL);
	//
	_pSelAFieldAgent = new CATDialogAgent("Select A");
	_pSelAFieldAgent->AcceptOnNotify(_pDlg->GetSelectorListObjA(),
		_pDlg->GetSelectorListObjA()->GetListSelectNotification());
	//
	_pSelBFieldAgent = new CATDialogAgent("Select B");
	_pSelBFieldAgent->AcceptOnNotify(_pDlg->GetSelectorListObjB(),
		_pDlg->GetSelectorListObjB()->GetListSelectNotification());
	//选择Point
	_pSelAAgent = new CATFeatureImportAgent("Select A");
	//_pPointAgent->AddElementType("CATIGSMPoint");
	_pSelAAgent->AddElementType("CATIMechanicalTool");
	_pSelAAgent->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithCSO|CATDlgEngOneShot);

	//选择Solid
	//_pSelBAgent = new CATFeatureImportAgent("Select B");
	_pSelBAgent = new CATPathElementAgent("Select B");
	//_pSelBAgent->AddElementType("CATRep");
	//_pSelBAgent->AddElementType("CATIMfMonoDimResult");
	//_pSolidAgent->AddElementType("CATSurface");
	//_pSolidAgent->AddElementType("CATIMechanicalTool");
	//_pSolidAgent->AddElementType("CATIMfBiDimResult");
	_pSelBAgent->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithCSO|CATDlgEngOneShot);

	//
	CATDialogState *pSelAState = GetInitialState("Select A");
	pSelAState->AddDialogAgent(_pSelAAgent);
	pSelAState->AddDialogAgent(_pSelAFieldAgent);
	pSelAState->AddDialogAgent(_pSelBFieldAgent);

	CATDialogState *pSelBState = AddDialogState("Select B");
	pSelBState->AddDialogAgent(_pSelBAgent);
	pSelBState->AddDialogAgent(_pSelAFieldAgent);
	pSelBState->AddDialogAgent(_pSelBFieldAgent);

	//
	AddTransition(pSelAState,pSelAState,
		IsOutputSetCondition(_pSelAAgent),
		Action((ActionMethod)& TestEnvelopeCmd::selectObjAFunc));

	AddTransition(pSelBState,pSelBState,
		IsOutputSetCondition(_pSelBAgent),
		Action((ActionMethod)& TestEnvelopeCmd::selectObjBFunc));

	AddTransition(pSelAState,pSelBState,
		IsOutputSetCondition(_pSelBFieldAgent),
		Action((ActionMethod)& TestEnvelopeCmd::TransToSelectB));

	AddTransition(pSelBState,pSelAState,
		IsOutputSetCondition(_pSelAFieldAgent),
		Action((ActionMethod)& TestEnvelopeCmd::TransToSelectA));
}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TestEnvelopeCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}
CATBoolean TestEnvelopeCmd::ActionExit(void * data)
{
	RequestDelayedDestruction();
	return TRUE;
}

CATBoolean TestEnvelopeCmd::ActionOK(void * data)
{
	/*
	HRESULT rc=this->CreateEnvelope(_spBUSelectA,_spBUSelectB);
	if (FAILED(rc))
	{
		return FALSE;
	}
	*/

	HRESULT rc=this->TestCgr();

	return TRUE;
}

void TestEnvelopeCmd::selectObjAFunc(void * data)
{
	if (_pHSO!=NULL)
	{
		_pHSO->Empty();
	}
	
	CATBaseUnknown *pBUSelect = NULL;
	CATIProduct_var spiProdSelect = NULL_var;
	_pGeneralCls->TransferSelectToBU(_pSelAAgent,pBUSelect,spiProdSelect);
	if (pBUSelect == NULL || spiProdSelect == NULL_var)
	{
		_pSelAAgent->InitializeAcquisition();
		return;
	}
	_pDlg->GetSelectorListObjA()->ClearLine();
	CATUnicodeString strAlias = _pGeneralCls->GetNameFromBaseUnknownFunc(pBUSelect);
	_pDlg->GetSelectorListObjA()->SetLine(strAlias,-1,CATDlgDataAdd);
	int iTabRow = 0;
	_pDlg->GetSelectorListObjA()->SetSelect(&iTabRow,1);
	//
	_spBUSelectA = pBUSelect;
	_spiProdSelA = spiProdSelect;

	_pGeneralCls->SetHighlight(pBUSelect);
	//
	_pSelAAgent->InitializeAcquisition();
}

void TestEnvelopeCmd::selectObjBFunc(void * data)
{
	if (_pHSO!=NULL)
	{
		_pHSO->Empty();
	}
	
	CATBaseUnknown *pBUSelect = NULL;
	CATIProduct_var spiProdSelect = NULL_var;
	//_pGeneralCls->TransferSelectToBU(_pSelBAgent,pBUSelect,spiProdSelect);

	pBUSelect = _pSelBAgent->GetElementValue();
	if (pBUSelect == NULL /*|| spiProdSelect == NULL_var*/)
	{
		_pSelBAgent->InitializeAcquisition();
		return;
	}
	_pDlg->GetSelectorListObjB()->ClearLine();
	CATUnicodeString strAlias = _pGeneralCls->GetNameFromBaseUnknownFunc(pBUSelect);
	_pDlg->GetSelectorListObjB()->SetLine(strAlias,-1,CATDlgDataAdd);
	int iTabRow = 0;
	_pDlg->GetSelectorListObjB()->SetSelect(&iTabRow,1);

	//
	_spBUSelectB = pBUSelect;
	_spiProdSelB = spiProdSelect;

	_pGeneralCls->SetHighlight(pBUSelect);
	//
	_pSelBAgent->InitializeAcquisition();
}

void TestEnvelopeCmd::TransToSelectA(void * data)
{
	if (_pHSO!=NULL)
	{
		_pHSO->Empty();
	}
	_pSelAFieldAgent->InitializeAcquisition();
	_pSelBFieldAgent->InitializeAcquisition();
	_pDlg->GetSelectorListObjB()->ClearSelect();
}

void TestEnvelopeCmd::TransToSelectB(void * data)
{
	if (_pHSO!=NULL)
	{
		_pHSO->Empty();
	}
	_pSelAFieldAgent->InitializeAcquisition();
	_pSelBFieldAgent->InitializeAcquisition();
	_pDlg->GetSelectorListObjA()->ClearSelect();
}

HRESULT TestEnvelopeCmd::CreateEnvelope(CATBaseUnknown_var ispBUObj,CATBaseUnknown_var ispBUCurve)
{
	HRESULT rc=S_OK;
	//
	if (ispBUObj==NULL_var||ispBUCurve==NULL_var)
	{
		return E_FAIL;
	}
	//获取工厂
	CATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration();//配置指针
	CATTopData * topdata =new CATTopData(pConfig, NULL);//topdata
	CATIPrtContainer_var ospiCont=NULL_var;
	CATGeoFactory*  pGeoFactory=_pGeneralCls->GetProductGeoFactoryAndPrtCont(_spiProdSelA,ospiCont);
	if (topdata == NULL || pGeoFactory == NULL)
	{
		return FALSE;
	}
	//
	CATBody_var spBodyOrigin = _pGeneralCls->GetBodyFromFeature(ispBUObj);
	if (spBodyOrigin==NULL_var)
	{
		return E_FAIL;
	}
	CATMathPoint pt1,pt2;
	_pGeneralCls->GetPointFromCurve(ispBUCurve,pt1,pt2);
	if (pt1.DistanceTo(pt2)<=0.01)
	{
		return E_FAIL;
	}
	CATMathLine mathAxis(pt1,pt2);

	//包络实体
	CATBody_var spBodyAssy=spBodyOrigin;
	for (int i=1;i<=10;i++)
	{
		//旋转
		CATDynTransformation *pDynTranf = CATCreateDynTransformation(pGeoFactory,topdata,spBodyOrigin);
		if (pDynTranf==NULL)
		{
			continue;
		}
		CATAngle angleRotate = i*CATPI/9;
		pDynTranf->SetRotation(angleRotate,mathAxis);
		CATTry
		{
			pDynTranf->Run();
		}
		CATCatch(CATMfErrUpdate , pUpdateError)
		{
			continue;
		}
		CATCatch(CATError , error)
		{
			delete pDynTranf;
			pDynTranf = NULL;
			CATReturnError(error);
			continue;
		}
		CATEndTry;

		CATBody *pBodyTransfResult = pDynTranf->GetResult();
		delete pDynTranf;
		pDynTranf = NULL;
		if (pBodyTransfResult == NULL)
		{
			continue;
		}
		
		//布尔合并
		CATDynBoolean *pDynBool=CATCreateDynBoolean(pGeoFactory,topdata,CATBoolUnion,spBodyAssy,pBodyTransfResult);
		if (pDynBool==NULL)
		{
			continue;
		}
		CATTry
		{
			pDynBool->Run();
		}
		CATCatch(CATMfErrUpdate , pUpdateError)
		{
			continue;
		}
		CATCatch(CATError , error)
		{
			delete pDynBool;
			pDynBool = NULL;
			CATReturnError(error);
			continue;
		}
		CATEndTry;

		CATBody *pBodyResult = pDynBool->GetResult();
		delete pDynBool;
		pDynBool = NULL;
		if (pBodyResult == NULL)
		{
			continue;
		}
		spBodyAssy=pBodyResult;
	}

	//
	CATLISTP(CATCell) lstCells;
	spBodyAssy->GetAllCells(lstCells,2);
	CATLISTP(CATBody) lstBody;
	for (int i=1;i<=lstCells.Size();i++)
	{
		CATCell_var spCell=lstCells[i];
		if (spCell==NULL_var)
		{
			continue;
		}
		CATBody *pBodyCell=NULL;
		pBodyCell=_pGeneralCls->CreateBodyFromCell(pGeoFactory,spCell,2);
		if (pBodyCell!=NULL)
		{
			lstBody.Append(pBodyCell);
		}
	}

	if (lstBody.Size()>0)
	{
		//把这些body组合起来
		ListPOfCATBody * HListOfCurve=&lstBody;
		CATHybAssemble * pHybAssemble=CATCreateTopAssemble(pGeoFactory, topdata, HListOfCurve);
		if (pHybAssemble==NULL)
		{
			return FALSE;
		}
		//
		pHybAssemble->Run();
		CATBody*pResultBody= pHybAssemble->GetResult();
		delete pHybAssemble; 
		pHybAssemble = NULL;

		if (pResultBody==NULL)
		{
			return E_FAIL;
		}

		//挂模型树
		CATISpecObject_var spiSpecGeoSet=NULL_var;
		rc = _pGeneralCls->CreateNewGeoSet(_spiProdSelA,"Test_Envelope",spiSpecGeoSet);
		if (FAILED(rc)||spiSpecGeoSet==NULL_var)
		{
			return E_FAIL;
		}
		CATISpecObject_var spiSpecEnvelope=NULL_var;
		rc=_pGeneralCls->InsertObjOnTree(_spiProdSelA,spiSpecGeoSet,"Envelope",pResultBody,spiSpecEnvelope);
		if (FAILED(rc)||spiSpecEnvelope==NULL_var)
		{
			return E_FAIL;
		}
		spiSpecEnvelope->Update();
	}
	

	return rc;
}

HRESULT TestEnvelopeCmd::TestCgr()
{
	HRESULT rc=S_OK;

	//
	//CATRep *pRep=NULL;
	//CATFrmEditor *pEditor=CATFrmEditor::GetCurrentEditor();
	//CATRepPath repPath;
	//rc=this->GetRepFromBU(_spBUSelectB,pEditor,&pRep,repPath);
	//if (FAILED(rc))
	//{
	//	return E_FAIL;
	//}

	//
	/*
	CATI3DGeoVisu_var spGeoVis = _spBUSelectB;
	if (spGeoVis==NULL_var)
	{
		return E_FAIL;
	}
	CATRep *pRep=spGeoVis->BuildRep();
	if( pRep == NULL ) {
		cout << "==> Get CATRep error !" << endl;
		return E_FAIL;
	}
	//CAT3DRep *p3DRep = (CAT3DRep*)pRep;
	//if (p3DRep==NULL)
	//{
	//	return E_FAIL;
	//}
	CAT3DBagRep *p3DBagRep = new CAT3DBagRep();
	p3DBagRep->AddChild(*pRep);
	const CAT4x4Matrix *pMatrix=p3DBagRep->GetMatrix();
	CATMathVectorf oU,oV,oW;
	CATMathPointf oT;
	pMatrix->GetComponents(oU,oV,oW,oT);
	*/

	//CATIMeasurableCurve_var spiMeasurableCrv=_spBUSelectB;	//该接口只能适用于没有坐标变换过的对象
	//if (spiMeasurableCrv==NULL_var)
	//{
	//	return E_FAIL;
	//}
	CATIMeasurableInContext_var spiMeasurableInContext=_spBUSelectB;	//必须用context来获取点，这样可以包含坐标变换
	if (spiMeasurableInContext==NULL_var)
	{
		return E_FAIL;
	}

	CATMathPoint ptStart,ptMid,ptEnd;
	rc=spiMeasurableInContext->GetPointsOnCurve(ptStart,ptMid,ptEnd);

	return rc;
}

HRESULT TestEnvelopeCmd::GetRepFromBU(CATBaseUnknown_var ispBU,CATRep **opRep)
{
	HRESULT rc = S_OK;
	//特征化
	CATISpecObject_var spiSpecObj = _pGeneralCls->GetSpecFromBaseUnknownFunc(ispBU);
	if (spiSpecObj==NULL_var)
	{
		return E_FAIL;
	}
	//CATVisManager * pVisuManager = CATVisManager::GetVisManager();
	//CATModelIdentificator Ident(spiSpecObj);
	//CAT3DRep * pRepChild = (CAT3DRep *) pVisuManager->BuildRep(Ident);

	//CATIVisu *piVisu = NULL;
	//rc = spiSpecObj->QueryInterface(IID_CATIVisu,(void**)&piVisu);
	//if (FAILED(rc)||piVisu==NULL)
	//{
	//	return E_FAIL;
	//}
	//CATRep *pRep = piVisu->BuildRep();

	CATI3DGeoVisu *pi3DGeoVisu = NULL;
	rc = spiSpecObj->QueryInterface(IID_CATI3DGeoVisu,(void**)&pi3DGeoVisu);
	if (FAILED(rc)||pi3DGeoVisu==NULL)
	{
		return E_FAIL;
	}
	CATRep *pRep = pi3DGeoVisu->GiveRep();

	*opRep = pRep;
	//
	return E_FAIL;
}

HRESULT TestEnvelopeCmd::Get3DRep(CATPathElement *iObject, CAT3DRep ** oRep,CATRepPath &oRepPath)
{
	HRESULT rc = E_FAIL ;

	if ( NULL == oRep ) return rc ;

	CATVisManager * pVisManager = CATVisManager::GetVisManager();

	if ( NULL != pVisManager )
	{
		CATViewpoint *pViewpoint=NULL;
		CATFrmLayout * pLayout = CATFrmLayout::GetCurrentLayout();
		if ( NULL !=  pLayout )
		{
			CATFrmWindow * pWindow = pLayout->GetCurrentWindow();
			if ( NULL !=  pWindow )
			{
				CATViewer * pViewer = pWindow->GetViewer();

				if ( NULL != pViewer )
				{
					CAT3DViewpoint & Main3DViewpoint = pViewer->GetMain3DViewpoint();
					pViewpoint = (CATViewpoint*)(& Main3DViewpoint);
				}
			}
		}

		// Generation of the rep
		pVisManager->GenerateRepPathFromPathElement(*iObject,pViewpoint,oRepPath);

		if ( oRepPath.Size() >= 1 )
		{                   
			//*oRep = (CAT3DRep*) oRepPath[oRepPath.Size()-1];
			*oRep = (CAT3DRep*) oRepPath[0];
			if ( NULL != *oRep )
			{
				rc = S_OK ;
			}
		}
	}
	return rc ;
}

HRESULT TestEnvelopeCmd::GetRepFromBU(CATBaseUnknown *ipBU, CATFrmEditor *ipEditor,CATRep ** oRep,CATRepPath &oRepPath)
{
	HRESULT rc = E_FAIL ;

	if ( NULL == oRep ) return rc ;

	CATVisManager * pVisManager = CATVisManager::GetVisManager();

	if ( NULL != pVisManager )
	{
		CATViewpoint *pViewpoint=NULL;
		CATFrmLayout * pLayout = CATFrmLayout::GetCurrentLayout();
		if ( NULL !=  pLayout )
		{
			CATFrmWindow * pWindow = pLayout->GetCurrentWindow();
			if ( NULL !=  pWindow )
			{
				CATViewer * pViewer = pWindow->GetViewer();

				if ( NULL != pViewer )
				{
					CAT3DViewpoint & Main3DViewpoint = pViewer->GetMain3DViewpoint();
					pViewpoint = (CATViewpoint*)(& Main3DViewpoint);
				}
			}
		}

		CATPathElement *iObject = NULL;
		rc = GetPathElemFromBU(ipBU,ipEditor,iObject);
		if (FAILED(rc)||iObject==NULL)
		{
			return E_FAIL;
		}

		CATUnicodeString strPathElem = "";
		_pGeneralCls->PathElementString(iObject,strPathElem);
		cout<<"==> PathElement: "<<strPathElem<<endl;
		cout<<"==> PathElement Num: "<<iObject->GetSize()<<endl;

		// Generation of the rep
		pVisManager->GenerateRepPathFromPathElement(*iObject,pViewpoint,oRepPath);

		if ( oRepPath.Size() >= 1 )
		{                   
			CATUnicodeString strPathName = "";
			int NumOfPath = oRepPath.Size();
			for(int i=0;i<NumOfPath;i++)  
			{
				CATRep *pRep =(CATRep*)(oRepPath)[i];
				if (pRep == NULL)
				{
					continue;
				}
				CATBaseUnknown *pElt = NULL; 
				rc = pRep->QueryInterface(IID_CATBaseUnknown,(void**)&pElt);
				if(pElt != NULL) 
				{
					CATIAlias *piAlias = NULL;
					rc = pElt->QueryInterface (IID_CATIAlias, (void**) &piAlias);
					if(SUCCEEDED(rc) && piAlias!=NULL)
					{
						CATUnicodeString Name = piAlias->GetAlias();
						strPathName.Append(Name) ;
						if(i<=(NumOfPath-2)) 
						{
							strPathName.Append("/");
						}
						piAlias->Release(); piAlias = NULL;
					}
				}
				if (pElt == ipBU)
				{
					*oRep = (CATRep*) oRepPath[i];
				}
			}

			cout<<"==> RepPath: "<<strPathName<<endl;
			
			//*oRep = (CAT3DRep*) oRepPath[oRepPath.Size()-1];
			//*oRep = (CAT3DRep*) oRepPath[0];
			if ( NULL != *oRep )
			{
				rc = S_OK ;
			}
		}
	}
	return rc ;
}

HRESULT TestEnvelopeCmd::GetPathElemFromBU(CATBaseUnknown_var ispBU,CATFrmEditor *ipEditor,CATPathElement *&opPathElem)
{

	CATIBuildPath *piBuildPath = NULL;
	HRESULT rc = ispBU->QueryInterface(IID_CATIBuildPath,(void**) &piBuildPath);
	if (SUCCEEDED(rc))
	{
		CATPathElement context = ipEditor->GetUIActiveObject();
		CATPathElement *pPathElement = NULL;

		rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
		if (pPathElement != NULL)
		{
			opPathElem = pPathElement;
			return S_OK;
		}
	}

	return E_FAIL;
}