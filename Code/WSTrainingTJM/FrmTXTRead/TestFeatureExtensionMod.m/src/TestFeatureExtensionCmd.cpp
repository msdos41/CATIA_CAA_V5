// COPYRIGHT Dassault Systemes 2020
//===================================================================
//
// TestFeatureExtensionCmd.cpp
// The state chart based command: TestFeatureExtensionCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2020  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestFeatureExtensionCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TestFeatureExtensionCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestFeatureExtensionCmd::TestFeatureExtensionCmd() :
  CATStateCommand ("TestFeatureExtensionCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
{
	CATUnicodeString strFilePath ="resources\\Graphic";
	CATUnicodeString strFileName = "TestCatalogSU";
	CATUnicodeString strStorageName = "";
	int iGetPath = CreateResourcePath(strFileName, strFilePath,strStorageName);
	if (iGetPath == -1)
	{
		//MessageOutputError(CAAUStringBuildFromChar("船体配置文件获取失败"),"Error");
		RequestDelayedDestruction();
		return ;
	}

	CATICatalog *piCatalog = NULL;
	HRESULT rc = this->CreateCatalog(strStorageName,piCatalog);
	if (FAILED(rc)||piCatalog==NULL)
	{
		RequestDelayedDestruction();
		return;
	}
	rc = this->CreateStartUps(piCatalog);
	if (FAILED(rc))
	{
		RequestDelayedDestruction();
		return;
	}
	rc = ::SaveCatalog(&piCatalog,&strStorageName);
	if (NULL != piCatalog)
	{
		piCatalog -> Release();
		piCatalog = NULL;
	}
	if (FAILED(rc))
	{
		cout << "ERROR in saving catalog document" << endl << flush;
		RequestDelayedDestruction();
		return;
	}
	CATUnicodeString clientId("CAAOsmClientId");
	rc = ::UpgradeCatalog(&strStorageName,&piCatalog,&clientId);
	if (FAILED(rc))
	{
		cout << "ERROR on UpgradeCatalog" << endl << flush;
		RequestDelayedDestruction();
		return;
	}
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestFeatureExtensionCmd::~TestFeatureExtensionCmd()
{

}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestFeatureExtensionCmd::BuildGraph()
{

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TestFeatureExtensionCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

HRESULT TestFeatureExtensionCmd::CreateCatalog(CATUnicodeString istrStorageName,CATICatalog *&opiCatalog)
{
	HRESULT rc = S_OK;

	CATICatalog *piCatalog = NULL;
	rc = ::CreateCatalog(&istrStorageName, &piCatalog);
	if (NULL == piCatalog) 
	{
		cout << "ERROR in creating Catalog" << endl << flush;
		return E_FAIL;
	}
	else cout << "Catalog created OK" << endl << flush;	

	// Add a client identification to the catalog.  This is a mandatory step. 
	CATUnicodeString clientId("CAAOsmClientId");
	rc = piCatalog -> SetClientId(&clientId);
	if (NULL == rc) cout << "ClientID setOK" << endl << flush;
	else cout << "ERROR in setting ClientID" << endl << flush;

	//
	opiCatalog = piCatalog;

	return rc;
}

HRESULT TestFeatureExtensionCmd::CreateStartUps(CATICatalog *ipiCatalog)
{
	HRESULT rc = S_OK;
	/*---------------------------*/
	/* StartUp "CAAOsmPublisher" */
	/*---------------------------*/

	// Create StartUp "CAAOsmPublisher"

	CATBaseUnknown *pPubSU = NULL;
	CATUnicodeString pubSUName("CAAOsmPublisher");
	CATUnicodeString pubSUType("CAAOsmPublisher");
	rc = ipiCatalog -> CreateSUInCatalog (&pPubSU,
										  &pubSUName,
										  &pubSUType,
										  "CATISpecObject");
	if (NULL == pPubSU) 
	{
		cout << "ERROR in creating CAAOsmPublisher StartUp" << endl << flush;
		ipiCatalog -> Release();
		return E_FAIL;
	}
	else cout << "CAAOsmPublisher StartUp created OK" << endl << flush;

	// Get a CATISpecObject handle on the CAAOsmPublisher StartUp

	CATISpecObject *piPubSU = (CATISpecObject*) pPubSU;

	// Add "CAAOsmPublisher" attributes

	CATUnicodeString publisherName("PublisherName");
	CATISpecAttribute *piPubName = piPubSU -> AddAttribute(publisherName,tk_string);
	if (NULL == piPubName)
		cout << "ERROR in adding PublisherName attribute" << endl << flush;
	else
	{
		cout << "PublisherName attribute added OK" << endl << flush;
		piPubName -> Release();
		piPubName = NULL;
	}

	CATUnicodeString publisherAddress("PublisherAddress");
	CATISpecAttribute *piPubAddr = piPubSU -> AddAttribute(publisherAddress,tk_string);
	if (NULL == piPubAddr)
		cout << "ERROR in adding PublisherAddress attribute" << endl << flush;
	else
	{
		cout << "PublisherAddress attribute added OK" << endl << flush;
		piPubAddr -> Release();
		piPubAddr = NULL;
	}

	pPubSU -> Release();

	/*---------------------------*/
	/* StartUp "CAAOsmChapter"   */
	/*---------------------------*/

	// Create StartUp "CAAOsmChapter" 

	CATBaseUnknown *pChaptSU = NULL;
	CATUnicodeString chaptSUName("CAAOsmChapter");
	CATUnicodeString chaptSUType("CAAOsmChapter");
	rc = ipiCatalog -> CreateSUInCatalog (&pChaptSU, 
										  &chaptSUName,
										  &chaptSUType,
										  "CATISpecObject");
	if (NULL == pChaptSU)
	{
		cout << "ERROR in creating CAAOsmChapter StartUp" << endl << flush;
		ipiCatalog -> Release();
		return E_FAIL;
	}
	else cout << "CAAOsmChapter StartUp created OK" << endl << flush;


	// Get a CATISpecObject handle on the CAAOsmChapter StartUp

	CATISpecObject *piChaptSU = (CATISpecObject*) pChaptSU;

	// Add "Chapter" attributes

	CATUnicodeString chapterTitle("ChapterTitle");
	CATISpecAttribute *piChaptTitle = piChaptSU -> AddAttribute(chapterTitle, tk_string);
	if (NULL == piChaptTitle)
		cout << "ERROR in adding ChapterTitle attribute" << endl << flush;
	else
	{
		cout << "ChapterTitle attribute added OK" << endl << flush;
		piChaptTitle -> Release();
		piChaptTitle = NULL;
	}

	CATUnicodeString firstPage("FirstPage");
	CATISpecAttribute *piChapFPage = piChaptSU -> AddAttribute(firstPage,tk_integer);
	if (NULL == piChapFPage)
		cout << "ERROR in adding ChapterFirstPage attribute" << endl << flush;
	else
	{
		cout << "ChapterFirstPage attribute added OK" << endl << flush;
		piChapFPage -> Release();
		piChapFPage = NULL;
	}

	CATUnicodeString lastPage("LastPage");
	CATISpecAttribute *piChapLPage = piChaptSU -> AddAttribute(lastPage,tk_integer);
	if (NULL == piChapLPage)
		cout << "ERROR in adding ChapterLastPage attribute" << endl << flush;
	else
	{
		cout << "ChapterLastPage attribute added OK" << endl << flush;
		piChapLPage -> Release();
		piChapLPage = NULL;
	}
	pChaptSU -> Release();

	/*---------------------------*/
	/* StartUp "CAAOsmBook"      */
	/*---------------------------*/

	// Create StartUp "CAAOsmBook"

	CATBaseUnknown *pBookSU = NULL;
	CATUnicodeString bookSUName("CAAOsmBook");
	CATUnicodeString bookSUType("CAAOsmBook");
	rc = ipiCatalog -> CreateSUInCatalog (&pBookSU,
										  &bookSUName,
										  &bookSUType,
										  "CATISpecObject");
	if (NULL == pBookSU)
	{
		cout << "ERROR in creating CAAOsmBook StartUp" << endl << flush;
		ipiCatalog -> Release();
		return E_FAIL;
	}
	else cout << "CAAOsmBook StartUp created OK" << endl << flush;

	// Get a CATISpecObject handle on the CAAOsmBook StartUp

	CATISpecObject *piBookSU = (CATISpecObject*) pBookSU;

	// Add "Book" attributes.  Note that the second attribute, BookPub, is a feature
	// attribute as can be seen by the parameter "tk_specobject".

	CATUnicodeString bookTitle("Title");
	CATISpecAttribute *piBookTitle = piBookSU -> AddAttribute(bookTitle,tk_string);
	if (NULL == piBookTitle)
		cout << "ERROR in adding BookTitle attribute" << endl << flush;
	else
	{
		cout << "BookTitle attribute added OK" << endl << flush;
		piBookTitle -> Release();
		piBookTitle = NULL;
	}

	CATUnicodeString bookPublisher("BookPublisher");
	CATISpecAttribute *piBookPub = piBookSU -> AddAttribute(bookPublisher,tk_specobject);
	if (NULL == piBookPub)
		cout << "ERROR in adding BookPublisher attribute" << endl << flush;
	else
	{
		cout << "BookPublisher attribute added OK" << endl << flush;
		piBookPub -> Release();
		piBookPub = NULL;
	}

	pBookSU -> Release();

	/*---------------------------*/
	/* StartUp "CAAOsmNovel"     */
	/*---------------------------*/

	// Create StartUp "CAAOsmNovel":  A novel is a type of book, so this StartUp derives
	// from "CAAOsmBook":  Note the supertype fourth parameter BookSU on CreateSUInCatalog.

	CATBaseUnknown *pNovelSU = NULL;
	CATUnicodeString novelSUName("CAAOsmNovel");
	CATUnicodeString novelSUType("CAAOsmNovel");
	rc = ipiCatalog -> CreateSUInCatalog (&pNovelSU, 
										  &novelSUName, 
										  &novelSUType,
										  "CATISpecObject",
										  &bookSUType);
	if (NULL == pNovelSU)
	{
		cout << "ERROR in creating CAAOsmNovel StartUp" << endl << flush;
		ipiCatalog -> Release();
		return E_FAIL;
	}
	else cout << "CAAOsmNovel StartUp created OK" << endl << flush;

	// Get a CATISpecObject handle on the CAAOsmNovel StartUp

	CATISpecObject *piNovelSU = (CATISpecObject*) pNovelSU;

	// Add "CAAOsmNovel" attributes.  Note that "CAAOsmNovel" inherits all the attibutes of
	//"CAAOsmBook". Note also that the attribute "NovelChapter" is a feature attribute as can
	// be seen by the parameter "tk_component".

	CATUnicodeString novelAuthor("Author");
	CATISpecAttribute *piNovelAuthor = piNovelSU -> AddAttribute(novelAuthor,tk_string);
	if (NULL == piNovelAuthor)
		cout << "ERROR in adding NovelAuthor attribute" << endl << flush;
	else
	{
		cout << "NovelAuthor attribute added OK" << endl << flush;
		piNovelAuthor -> Release();
		piNovelAuthor = NULL;
	}

	CATUnicodeString novelChapter("NovelChapter");
	CATISpecAttribute *piNovelChapt = piNovelSU -> AddAttribute(novelChapter,tk_list,tk_component);
	if (NULL == piNovelChapt)
		cout << "ERROR in adding NovelChapter attribute" << endl << flush;
	else
	{
		cout << "NovelChapter attribute added OK" << endl << flush;
		piNovelChapt -> Release();
		piNovelChapt = NULL;
	}
	pNovelSU -> Release();

	/*----------------------------*/
	/* StartUp "CAAOsmDictionary" */
	/*----------------------------*/	

	// StartUp "CAAOsmDictionary":  A dictionary is also a type of book, so this StartUp also
	// derives from "CAAOsmBook":  Note the supertype fourth parameter BookSU on CreateSUInCatalog.

	CATBaseUnknown *pDictSU = NULL;
	CATUnicodeString dictSUName("CAAOsmDictionary");
	CATUnicodeString dictSUType("CAAOsmDictionary");
	rc = ipiCatalog -> CreateSUInCatalog (&pDictSU,
										  &dictSUName,
										  &dictSUType,
										  "CATISpecObject", 
										  &bookSUType);
	if (NULL == pDictSU) 
	{
		cout << "ERROR in creating CAAOsmDictionary StartUp" << endl << flush;
		ipiCatalog -> Release();
		return E_FAIL;
	}
	else cout << "CAAOsmDictionary StartUp created OK" << endl << flush;

	// Get a CATISpecObject handle on the CAAOsmDictionary StartUp

	CATISpecObject *piDictSU = (CATISpecObject*) pDictSU;

	// Add "CAAOsmDictionary" attributes.  Note that "CAAOsmDictionary" inherits all the attributes
	// of "CAAOsmBook".

	CATUnicodeString dictLanguage("Language");
	CATISpecAttribute *piDictLanguage = piDictSU-> AddAttribute(dictLanguage, tk_string);
	if (NULL == piDictLanguage)
		cout << "ERROR in adding DictionaryLanguage attribute" << endl << flush;
	else
	{
		cout << "DictionaryLanguage attribute added OK" << endl << flush;
		piDictLanguage -> Release();
		piDictLanguage = NULL;
	}

	pDictSU -> Release();


	CATBaseUnknown *pAddSU = NULL;
	CATUnicodeString addSUName = "CAAOsmAdd";
	CATUnicodeString addSUType = "CAAOsmAdd";
	CATBoolean publicSU = TRUE;
	CATBoolean derivableSU = TRUE;
	rc = ipiCatalog -> CreateSUInCatalog(&pAddSU,
										 &addSUName,
										 &addSUType,
										 "CATISpecObject",
										 NULL,
										 publicSU,
										 derivableSU);
	if (NULL != pAddSU) cout << "CAAOsmAdd StartUp created OK" << endl << flush;
	else
	{
		cout << "ERROR in creating CAAOsmAdd StartUp" << endl << flush;
		ipiCatalog -> Release();
		return E_FAIL;
	}

	// Get a CATISpecObject handle on the CAAOsmAdd StartUp

	CATISpecObject *piAddSU = (CATISpecObject*) pAddSU;

	/*--------------------------------------------*/
	/* Add attributes to the CAAOsmAdd StartUp  */
	/*--------------------------------------------*/

	CATUnicodeString first("First");
	CATISpecAttribute *piFirst = NULL;
	if (NULL != piAddSU)
		piFirst = piAddSU -> AddAttribute(first, tk_integer, sp_IN);

	if (NULL != piFirst)
	{
		cout << "First attribute added OK" << endl << flush;
		piFirst -> Release();
		piFirst = NULL;
	}
	else cout << "ERROR in adding First attribute" << endl << flush;

	CATUnicodeString second("Second");
	CATISpecAttribute *piSecond = piAddSU -> AddAttribute(second,tk_integer,sp_IN);
	if (NULL != piSecond)
	{
		cout << "Second attribute added OK" << endl << flush;
		piSecond -> Release();
		piSecond = NULL;
	}
	else cout << "ERROR in adding Second attribute" << endl << flush;

	CATUnicodeString sum("Sum");
	CATISpecAttribute *piSum = piAddSU -> AddAttribute(sum,
		tk_integer,
		sp_OUT);
	if (NULL != piSum)
	{
		cout << "Sum attribute added OK" << endl << flush;
		piSum -> Release();
		piSum = NULL;
	}
	else cout << "ERROR in adding Sum attribute" << endl << flush;

	pAddSU -> Release();

	/*------------------------*/
	/* StartUp "CAAOsmSquare" */
	/*------------------------*/	

	CATBaseUnknown *pSquareSU = NULL;
	CATUnicodeString squareSUName("CAAOsmSquare");
	CATUnicodeString squareSUType("CAAOsmSquare");
	derivableSU = FALSE;
	rc = ipiCatalog -> CreateSUInCatalog(&pSquareSU,
										 &squareSUName,
										 &squareSUType,
										 "CATISpecObject",
										 NULL,
										 publicSU,
										 derivableSU);
	if (NULL != pSquareSU) cout << "CAAOsmSquare StartUp created OK" << endl << flush;
	else
	{
		cout << "ERROR in creating CAAOsmSquare StartUp" << endl << flush;
		ipiCatalog -> Release();
		return E_FAIL;
	}

	// Get a CATISpecObject handle on the CAAOsmSquare StartUp

	CATISpecObject *piSquareSU = (CATISpecObject*) pSquareSU;

	/*-----------------------------------------------*/
	/* Add attributes to the CAAOsmSquare StartUp  */
	/*-----------------------------------------------*/

	CATUnicodeString num("Num");
	CATISpecAttribute *piNum = piSquareSU -> AddAttribute(num, tk_integer, sp_IN);

	if (NULL != piNum)
	{
		cout << "Num attribute added OK" << endl << flush;
		piNum -> Release();
		piNum = NULL;
	}
	else cout << "ERROR in adding Num attribute" << endl << flush;

	CATUnicodeString square("Square");
	CATISpecAttribute *piSquare = piSquareSU -> AddAttribute(square,tk_integer,sp_OUT);
	if (NULL != piSquare)
	{
		cout << "Square attribute added OK" << endl << flush;
		piSquare -> Release();
		piSquare = NULL;
	}
	else cout << "ERROR in adding Square attribute" << endl << flush;

	pSquareSU -> Release();


	return rc;
}