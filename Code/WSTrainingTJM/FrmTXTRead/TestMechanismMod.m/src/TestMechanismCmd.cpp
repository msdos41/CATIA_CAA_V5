// COPYRIGHT Dassault Systemes 2021
//===================================================================
//
// TestMechanismCmd.cpp
// The state chart based command: TestMechanismCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2021  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestMechanismCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TestMechanismCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestMechanismCmd::TestMechanismCmd() :
  CATStateCommand ("TestMechanismCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,_pGeneralCls(NULL)
{
	_pGeneralCls = new GeneralClass();

	_pGeneralCls->GetRootProductUpdate(_spiProdRoot);
	if (_spiProdRoot==NULL_var)
	{
		RequestDelayedDestruction();
		return;
	}

	if (FAILED(CreateImportedMechanism()))
	{
		RequestDelayedDestruction();
		return;
	}

	CATVisManager * pVisManager=CATVisManager::GetVisManager();
	if(pVisManager!=NULL)
	{
		pVisManager->Commit();
	}

	Sleep(1000);
	//keybd_event(VK_RETURN,0,0,0);
	//keybd_event(VK_RETURN,0,KEYEVENTF_KEYUP,0);

	INPUT inputs[2];
	inputs[0].type = INPUT_KEYBOARD;
	inputs[0].ki.wVk = VK_RETURN;  //按下enter
	inputs[1].type = INPUT_KEYBOARD;
	inputs[1].ki.wVk = VK_RETURN;  
	inputs[1].ki.dwFlags = KEYEVENTF_KEYUP;	//释放enter
	UINT uSend = SendInput(sizeof inputs / sizeof(INPUT), inputs, sizeof(INPUT));
	if (uSend!=ARRAYSIZE(inputs))
	{
		cout<<"SendInput failed................"<<endl;
	}

	Sleep(1000);

	GetMechanisms(_spiProdRoot);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestMechanismCmd::~TestMechanismCmd()
{

}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestMechanismCmd::BuildGraph()
{

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TestMechanismCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

HRESULT TestMechanismCmd::GetMechanisms(CATIProduct_var ispiProdRoot)
{
	CATIAProduct* piaCATIAPrd = NULL;
	HRESULT rc = ispiProdRoot ->QueryInterface( IID_CATIAProduct, (void **)&piaCATIAPrd );
	if (FAILED(rc)||piaCATIAPrd==NULL)
	{
		return E_FAIL;
	}
	CATIAMechanisms* piaMechanisms = NULL;
	CATUnicodeString    strname = "Mechanisms";
	CATBSTR BSTR;
	strname.ConvertToBSTR(&BSTR );
	CATBaseDispatch* pBaseDis = NULL;
	piaCATIAPrd->GetTechnologicalObject( BSTR, pBaseDis); //获取Object对象
	rc = pBaseDis->QueryInterface( IID_CATIAMechanisms, (void **)&piaMechanisms);
	if (FAILED(rc)||piaMechanisms==NULL)
	{
		return E_FAIL;
	}

	CATLONG lNum=0;
	if (FAILED(piaMechanisms->get_Count(lNum)))
	{
		return E_FAIL;
	}
	if (lNum<1)
	{
		cout<<"===>No Mechanism..............."<<endl;
	}
	for (int i=1;i<=lNum;i++)
	{
		VARIANT va;
		va.vt = VT_I4;
		va.lVal = i;
		
		CATIAMechanism *piaMech=NULL;
		if (SUCCEEDED(piaMechanisms->Item(va,piaMech))&&piaMech!=NULL)
		{
			CATISpecObject_var spiSpecMech = piaMech;
			if (spiSpecMech!=NULL_var)
			{
				//cout<<"===>Current Mechanism:  "<<spiSpecMech->GetName()<<endl;
				CATIAlias_var spiAlias = spiSpecMech;
				if (spiAlias!=NULL_var)
				{
					cout<<"===>Current Mechanism:  "<<spiAlias->GetAlias()<<endl;
				}
			}
		}
	}


	return S_OK;
}

HRESULT TestMechanismCmd::CreateImportedMechanism()
{
	CATCommand *pDSCmd=NULL; 
	CATUnicodeString cmdstring = "CATMecImportSubMechsHdr"; //"SectionView"; //"CATGSDPointDatumHdr";//"ZoomIn"; //"AsmSpaceMeasureBetween";
	this->RequestStatusChange(CATCommandMsgDesactivated);
	try
	{
		if(SUCCEEDED(CATAfrStartCommand(cmdstring.ConvertToChar(),pDSCmd)) && pDSCmd != NULL )
		{ 
			if(pDSCmd->GetStartMode() !=  CATCommandModeShared)
			{
				if(pDSCmd->RequestStatusChange(CATCommandMsgRequestSharedMode) != 0)
				{
					_pGeneralCls->MessageOutputWarning("Request " + cmdstring + " CATCommandModeShared failed","Notice");
					this->RequestStatusChange(CATCommandMsgRequestSharedMode);
					return E_FAIL;
				} 
			}
		}
		else
		{ 
			_pGeneralCls->MessageOutputWarning("Start command " + cmdstring + " failed","Notice");
			this->RequestStatusChange(CATCommandMsgRequestSharedMode);
			return E_FAIL;
		}
	}catch(...)
	{ 
		_pGeneralCls->MessageOutputWarning("Start command " + cmdstring + " failed","Notice");
		this->RequestStatusChange(CATCommandMsgRequestSharedMode);
		return E_FAIL;
	}
	
	
	return S_OK;
}