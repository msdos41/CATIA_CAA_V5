// COPYRIGHT Dassault Systemes 2021
//===================================================================
//
// TestMechanismSubCmd.cpp
// The command: TestMechanismSubCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2021  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestMechanismSubCmd.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TestMechanismSubCmd);

#include "GeneralClass.h"

DWORD WINAPI CatchCATIAWindow(LPVOID);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestMechanismSubCmd::TestMechanismSubCmd() :
  CATCommand (NULL, "TestMechanismSubCmd")
{
  RequestStatusChange (CATCommandMsgRequestSharedMode);

  if (FAILED(CreateImportedMechanism()))
  {
	  cout<<"CreateImportedMechanism failed.........."<<endl;
  }
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestMechanismSubCmd::~TestMechanismSubCmd()
{
	HANDLE Thread =(HANDLE)CreateThread(NULL,0,CatchCATIAWindow,NULL,0,0);
	CloseHandle(Thread); 
}


//  Overload this method: when your command gains focus
//
// Activates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC TestMechanismSubCmd::Activate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command loses focus
//
// Deactivates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC TestMechanismSubCmd::Desactivate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command is canceled
//
// Cancel a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC TestMechanismSubCmd::Cancel( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  //RequestDelayedDestruction();
  return (CATStatusChangeRCCompleted);
}

HRESULT TestMechanismSubCmd::CreateImportedMechanism()
{
	CATCommand *pDSCmd=NULL; 
	CATUnicodeString cmdstring = "CATMecImportSubMechsHdr"; //"SectionView"; //"CATGSDPointDatumHdr";//"ZoomIn"; //"AsmSpaceMeasureBetween";
	this->RequestStatusChange(CATCommandMsgDesactivated);
	try
	{
		if(SUCCEEDED(CATAfrStartCommand(cmdstring.ConvertToChar(),pDSCmd)) && pDSCmd != NULL )
		{ 
			if(pDSCmd->GetStartMode() !=  CATCommandModeShared)
			{
				if(pDSCmd->RequestStatusChange(CATCommandMsgRequestSharedMode) != 0)
				{
					//_pGeneralCls->MessageOutputWarning("Request " + cmdstring + " CATCommandModeShared failed","Notice");
					this->RequestStatusChange(CATCommandMsgRequestSharedMode);
					return E_FAIL;
				} 
			}
		}
		else
		{ 
			//_pGeneralCls->MessageOutputWarning("Start command " + cmdstring + " failed","Notice");
			this->RequestStatusChange(CATCommandMsgRequestSharedMode);
			return E_FAIL;
		}
	}catch(...)
	{ 
		//_pGeneralCls->MessageOutputWarning("Start command " + cmdstring + " failed","Notice");
		this->RequestStatusChange(CATCommandMsgRequestSharedMode);
		return E_FAIL;
	}


	return S_OK;
}

DWORD WINAPI CatchCATIAWindow(LPVOID)
{
	//设置时间，如果超过时间跳出while循环
	DWORD FunctionStart = GetTickCount();
	while (1) 
	{
		DWORD NowTime=GetTickCount() - FunctionStart;
		if(NowTime > 8000)
			break;

		HWND hwnd = FindWindow(NULL, L"Sub-mechanisms Import Result");
		if(0 == hwnd)
		{
			hwnd = FindWindow(NULL, L"子机械装置导入结果");
		}
		if(0 != hwnd)
		{
			::SendMessage(hwnd, WM_CLOSE, 0, 0);

			//LimitingPositionCmd * pCmd=new LimitingPositionCmd();

			break;
		}
	}
	return 0;
}