// COPYRIGHT Dassault Systemes 2019
//===================================================================
//
// TestCmd.h
// The state chart based command: TestCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//CAA2 Wizard Generation Report
//   STATECOMMAND
//End CAA2 Wizard Generation Report
//
//  Jan 2019  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#ifndef TestCmd_H
#define TestCmd_H

#include "CATStateCommand.h"
#include "CATBoolean.h"
#include "GeneralClass.h"
#include "SWIEEEleCreateViewWindowDlg.h"

#include "iostream.h"
#include "TestDlg.h"
#include "CATFeatureImportAgent.h"
#include "CATDialogAgent.h"

#include "CATPathElement.h"
#include "CATBaseUnknown.h"
#include "CATIBRepAccess.h"
#include "CATIFeaturize.h"
#include "CATIPrtPart.h"
#include "CATHSO.h"

#include "CATLine.h"
#include "CATMathLine.h"
#include "CATBody.h"
#include "CATCell.h"
#include "CATVertex.h"
#include "CATPoint.h"
#include "CATMathPoint.h"

#include "CATIGeometricalElement.h"
#include "CATIBodyRequest.h"
#include "CATIMfBRep.h"
#include "CATListOfCATCells.h"

#include "CATIMf3DAxisSystem.h"
#include "CATMathAxis.h"
#include "CATMathVector.h"

#include "CATIMovable.h"
#include "CATMathTransformation.h"
#include "CATIMeasurableSurface.h"
#include "CATFace.h"
#include "CATPlane.h"

#include "CATListPtrCATIProduct.h"
#include "CATIDocId.h"
#include "CATIContainerOfDocument.h"
#include "CATIDescendants.h"

#include "CATIBuildPath.h"

#include "CATIGSMFactory.h"
#include "CATICkeParmFactory.h"
#include "CATICkeParm.h"
#include "CATIGSMPointOnSurface.h"
#include "CATIGSMDirection.h"
#include "CATMfErrUpdate.h"

#include "CATAfrCommandHeaderServices.h"
#include "CATDlgNotify.h"
#include "CATApplicationFrame.h"

#include "CATI3DCompass.h"

#include "CATGetEnvValue.h"

#include <fstream>
#include <string>
using namespace std;

class CATIndicationAgent;

//----------------------------------------------------------------------

/**
 * Describe your command here.
 * <p>
 * Using this prefered syntax will enable mkdoc to document your class.
 * <p>
 * refer to programming resources of Dialog engine framework.
 * (consult base class description).
 */
class TestCmd: public CATStateCommand
{
  // Allows customization/internationalization of command's messages
  // ---------------------------------------------------------------
  DeclareResource( TestCmd, CATStateCommand )

  public:

  TestCmd();
  virtual ~TestCmd();

    /**
     * Defines the command automata.
     * <br>
     * <i>(states, transitions and agents)</i>
     */
  virtual void     BuildGraph();

    /**
     * Action associated to state transitions.
     */
  virtual CATBoolean  ActionOne(void * data);

  void ExitCmd(void * data);

  void ActionOK(void * data);

  void SelectElementUpdate(CATFeatureImportAgent *pFeatAgent,CATISpecObject_var &spSpecOnSelection, CATIProduct_var &ospProductSeletion);

  void ActionSelectLine();

  void SetHighlight(CATFeatureImportAgent *ipFeatImpAgt);

  void GetPointOnMathLine(CATBaseUnknown_var ispiSpecObject,CATMathPoint &omathPt1,CATMathPoint &omathPt2);

  CATBody_var GetBodyFromFeature( CATBaseUnknown_var& ispFeature );

  void ActionCOUT();
  void ActionSelectFace();
  void SwitchToFaceSelect();
  void SwitchToLineSelect();
  CATMathTransformation GetAbsTransformation(CATIProduct_var ispCurrentProduct);
  void ActionMidPtOnSurf();
  HRESULT GetCenterPtOnSurface(CATBaseUnknown_var ispiSpecObject,CATMathPoint &omathPtCenter);
  CATMathPlane GetMathPlane(CATBaseUnknown_var ispiSpecObject);
  CATIProduct_var GetProductRoot(CATDocument *ipDoc);
  //HRESULT GetAxisFromProduct(CATIProduct_var ispProduct, CATUnicodeString istrAxisName, CATListValCATISpecObject_var olstSpecOnAxis);
  HRESULT GetAxisFromProduct(CATIProduct_var ispProduct, CATUnicodeString istrAxisName, CATISpecObject_var &ospiSpecOnAxis, CATIProduct_var &ospiProductAxis);
  CATBoolean IsProduct(CATIProduct_var ispiPrd);
  HRESULT GetPartFromProduct(CATIProduct_var ispProduct,CATISpecObject_var &ospPartFromProduct,CATIPrtContainer_var &ospiPrtCont);
  HRESULT GetPathElement(CATISpecObject_var ispiSpecObj, CATPathElement *&opPath);
  CATBoolean UpdateObject(const CATISpecObject_var &spUpdatedObj);
  HRESULT GetCenterPtOnSurfaceUpdate(CATISpecObject_var ispiSpecObject, CATMathPoint &omathPtCenter);
  HRESULT GetCenterPointFromSurface(CATISpecObject_var ispiSpecObject, CATMathPoint &oMathPointCenter);
  CATMathVector GetProjectionVector(CATMathVector imathVector1, CATIProduct_var ispiProductVector1,CATMathVector imathVector2, CATIProduct_var ispiProductVector2);
  void ActionProjection();
  void ActionStartOtherCmd();

  void CAAMessageBox(CATUnicodeString message,CATUnicodeString title);

  void ActionCompassTest();

  void ActionReadTxt();
  HRESULT GetResourceFilePath(const char* ichVarName,CATUnicodeString istrFolderName,CATUnicodeString istrFileName,CATUnicodeString &ostrFullPath);
  HRESULT ReadTxtContent(CATUnicodeString istrTxtPath, CATLISTV(CATUnicodeString) &olstContent);
  CATUnicodeString CAAUStringBuildFromChar(char * strchar);
  //void CAAUStringConvertToChar(CATUnicodeString strUnicode,char* strchar );
  char* CAAUStringConvertToChar(CATUnicodeString strUnicode);
  void CAAUStringConvertToChar(CATUnicodeString strUnicode,char* &strchar );
  wchar_t *txtConvert_Wchar(std::string str);

  void Action3DView();
  void ActionSelectElemIn3DView();
  void SwitchTo3DView();

  //
  void GetSubList(CATIProduct_var ispiRootProduct);
  void GetSubList(CATIProduct_var ispiRootProduct,int iLevel);
  void GetSubList(CATIProduct_var ispiRootProduct,int iLevel,CATListOfCATUnicodeString &olstStrPartName);
  int GetLevel(CATIProduct_var spChildProduct);
private:

  CATIndicationAgent	* _Indication;

  GeneralClass			* _GeneralClass;

  TestDlg				* _pDlg;

  CATFeatureImportAgent * _pFeaImpAgtLine;

  CATFeatureImportAgent * _pFeaImpAgtFace;

  CATDialogAgent * _pDlgAgtLine;

  CATDialogAgent * _pDlgAgtFace;

  CATISpecObject_var _spSpecLine;

  CATISpecObject_var _spSpecFace;

  CATFrmEditor * _pEditor;

  CATHSO * _pHSO;

  CATIProduct_var _spiProductLine;

  CATIProduct_var _spiProductFace;

  CATIProduct_var	_spiRootProduct;

  //-----用于3DView的选择
  CATFeatureImportAgent	*	_pFeaImpAgt3DView;

  CATDialogAgent		*	_pDlgAgt3DView;
  
  CATISpecObject_var		_spiSpec3DViewElem;

  CATDialogState		*	_pDlgStateLine;

  SWIEEEleCreateViewWindowDlg	* _p3DViewWindowDlg;
  
};

//----------------------------------------------------------------------

#endif
