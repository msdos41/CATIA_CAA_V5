// COPYRIGHT Dassault Systemes 2019
//===================================================================
//
// TestCmd.cpp
// The state chart based command: TestCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jan 2019  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"

CATCreateClass( TestCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestCmd::TestCmd() :
  CATStateCommand ("TestCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_Indication(NULL)
{
	//CATIProduct* piRootProd = NULL;
	//_GeneralClass->GetRootProductUpdate(piRootProd);
	//_GeneralClass->GetRootProduct(_spiRootProduct);

	CATIPrtPart_var spiRootPart = NULL_var;
	_GeneralClass->GetRootPrtPart(spiRootPart);
	
	_pDlg = NULL;
	_pDlg = new TestDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	//_p3DViewWindowDlg = NULL;
	//_p3DViewWindowDlg = new SWIEEEleCreateViewWindowDlg(_pDlg,"Test_3D_View",spiRootPart); //如果要预览Part的模型树，需要传入CATIPrtPart
	//_p3DViewWindowDlg->Build();
	//_p3DViewWindowDlg->SetVisibility(CATDlgHide);

	_pFeaImpAgtLine = NULL;
	_pFeaImpAgtFace = NULL;
	_pDlgAgtLine = NULL;
	_pDlgAgtFace = NULL;

	_pFeaImpAgt3DView = NULL;
	_pDlgAgt3DView = NULL;

	_pEditor = CATFrmEditor::GetCurrentEditor();
	_pHSO = NULL;
	if (NULL != _pEditor)
	{
		_pHSO = _pEditor->GetHSO();
	}
	
	////Test GeneralClass
	//_GeneralClass = new GeneralClass();
	//CATIProduct *piRootProduct = NULL;
	//HRESULT rc = _GeneralClass->GetRootProduct(piRootProduct);
	//cout<<piRootProduct->GetPartNumber()<<endl;
	CATIProduct_var spiRootProduct =  NULL_var;
	_GeneralClass->GetRootProductUpdate(spiRootProduct);
	if (spiRootProduct != NULL)
	{
		//GetSubList(spiRootProduct,0);
	}
	
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestCmd::~TestCmd()
{
   if (_Indication != NULL) 
      _Indication->RequestDelayedDestruction();

   if (_pDlg != NULL)
   {
	   _pDlg->RequestDelayedDestruction();
	   _pDlg = NULL;
   }

   if (_pFeaImpAgtLine != NULL)
   {
	   _pFeaImpAgtLine->RequestDelayedDestruction();
	   _pFeaImpAgtLine = NULL;
   }

   if (_pFeaImpAgtFace != NULL)
   {
	   _pFeaImpAgtFace->RequestDelayedDestruction();
	   _pFeaImpAgtFace = NULL;
   }

   if (_pDlgAgtLine != NULL)
   {
	   _pDlgAgtLine->RequestDelayedDestruction();
	   _pDlgAgtLine = NULL;
   }

   if (_pDlgAgtFace != NULL)
   {
	   _pDlgAgtFace->RequestDelayedDestruction();
	   _pDlgAgtFace = NULL;
   }

   if (_pFeaImpAgt3DView != NULL)
   {
	   _pFeaImpAgt3DView->RequestDelayedDestruction();
	   _pFeaImpAgt3DView = NULL;
   }

   if (_pDlgAgt3DView != NULL)
   {
	   _pDlgAgt3DView->RequestDelayedDestruction();
	   _pDlgAgt3DView = NULL;
   }

   //if (_p3DViewWindowDlg != NULL)
   //{
	  // _p3DViewWindowDlg->RequestDelayedDestruction();
	  // _p3DViewWindowDlg = NULL;
   //}

   _pEditor = NULL;

   _pHSO = NULL;
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestCmd::BuildGraph()
{

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&TestCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&TestCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&TestCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&TestCmd::ActionOK,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButtonCOUT(),
		_pDlg->GetPushButtonCOUT()->GetPushBActivateNotification(),
		(CATCommandMethod)&TestCmd::ActionCOUT,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButtonMidPtOnSurf(),
		_pDlg->GetPushButtonMidPtOnSurf()->GetPushBActivateNotification(),
		(CATCommandMethod)&TestCmd::ActionMidPtOnSurf,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButtonProjection(),
		_pDlg->GetPushButtonProjection()->GetPushBActivateNotification(),
		(CATCommandMethod)&TestCmd::ActionProjection,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButtonStartOtherCmd(),
		_pDlg->GetPushButtonStartOtherCmd()->GetPushBActivateNotification(),
		(CATCommandMethod)&TestCmd::ActionStartOtherCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButtonCompassTest(),
		_pDlg->GetPushButtonCompassTest()->GetPushBActivateNotification(),
		(CATCommandMethod)&TestCmd::ActionCompassTest,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButtonReadTxt(),
		_pDlg->GetPushButtonReadTxt()->GetPushBActivateNotification(),
		(CATCommandMethod)&TestCmd::ActionReadTxt,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButton3DView(),
		_pDlg->GetPushButton3DView()->GetPushBActivateNotification(),
		(CATCommandMethod)&TestCmd::Action3DView,
		NULL);

	
	
	_pFeaImpAgtLine = new CATFeatureImportAgent("Select a Line",NULL,NULL,MfNoDuplicateFeature);
	_pFeaImpAgtFace = new CATFeatureImportAgent("Select a Face");
	_pFeaImpAgt3DView = new CATFeatureImportAgent("Select in 3D View");

	_pDlgAgtLine = new CATDialogAgent("Select Dialog Agent Line");
	_pDlgAgtFace = new CATDialogAgent("Select Dialog Agent Face");

	_pDlgAgt3DView = new CATDialogAgent("Select Element in 3D View");

	//
	_pFeaImpAgtLine->SetOrderedElementType("CATIGSMLine"); //可以选取模型树上的直线
	_pFeaImpAgtLine->AddOrderedElementType("CATLine"); // 可以选取实体上的边线或者孔的轴线
	//_pFeaImpAgtLine->AddOrderedElementType("CATIMf3DAxisSystem");

	_pFeaImpAgtFace->SetOrderedElementType("CATIMf3DAxisSystem");
	_pFeaImpAgtFace->AddOrderedElementType("CATSurface");
	_pFeaImpAgtFace->AddOrderedElementType("CATLine");
	//_pFeaImpAgtFace->AddOrderedElementType("CATIMf3DAxisSystem");

	_pFeaImpAgt3DView->SetOrderedElementType("CATIMechanicalTool");
	//
	_pFeaImpAgtLine->SetBehavior(CATDlgEngWithPrevaluation | CATDlgEngWithCSO     | CATDlgEngOneShot);
	_pFeaImpAgtLine->SetAgentBehavior(MfPermanentBody     | MfLastFeatureSupport      | MfRelimitedFeaturization   );

	_pFeaImpAgtFace->SetBehavior(CATDlgEngWithPrevaluation | CATDlgEngWithCSO     | CATDlgEngOneShot);
	_pFeaImpAgtFace->SetAgentBehavior(MfPermanentBody     | MfLastFeatureSupport      | MfRelimitedFeaturization   );

	_pFeaImpAgt3DView->SetBehavior(CATDlgEngWithPrevaluation | CATDlgEngWithCSO     | CATDlgEngOneShot);
	_pFeaImpAgt3DView->SetAgentBehavior(MfPermanentBody     | MfLastFeatureSupport      | MfRelimitedFeaturization   );
	//
	_pDlgAgtLine->AcceptOnNotify(_pDlg->GetSelectListLine(),_pDlg->GetSelectListLine()->GetListSelectNotification());
	_pDlgAgtFace->AcceptOnNotify(_pDlg->GetSelectListFace(),_pDlg->GetSelectListFace()->GetListSelectNotification());

	//_pDlgAgt3DView->AcceptOnNotify(_p3DViewWindowDlg,_p3DViewWindowDlg->GetMDIActivateNotification());
	_pDlgAgt3DView->AcceptOnNotify(_pDlg->GetPushButton3DView(),_pDlg->GetPushButton3DView()->GetPushBActivateNotification());
	////
	CATDialogState *pDlgStateLine = GetInitialState("Select a Line");
	pDlgStateLine->AddDialogAgent(_pFeaImpAgtLine);
	pDlgStateLine->AddDialogAgent(_pDlgAgtLine);
	pDlgStateLine->AddDialogAgent(_pDlgAgtFace);
	pDlgStateLine->AddDialogAgent(_pDlgAgt3DView);

	CATDialogState *pDlgStateFace = AddDialogState("Select a Face");
	pDlgStateFace->AddDialogAgent(_pFeaImpAgtFace);
	pDlgStateFace->AddDialogAgent(_pDlgAgtLine);
	pDlgStateFace->AddDialogAgent(_pDlgAgtFace);
	pDlgStateFace->AddDialogAgent(_pDlgAgt3DView);

	CATDialogState *pDlgState3DView = AddDialogState("Select Element in 3D View");
	pDlgState3DView->AddDialogAgent(_pFeaImpAgt3DView);
	pDlgState3DView->AddDialogAgent(_pDlgAgtLine);
	pDlgState3DView->AddDialogAgent(_pDlgAgtFace);
	pDlgState3DView->AddDialogAgent(_pDlgAgt3DView);

	//
	AddTransition(pDlgStateLine,pDlgStateLine,
		IsOutputSetCondition(_pFeaImpAgtLine),
		Action((ActionMethod)& TestCmd::ActionSelectLine));

	AddTransition(pDlgStateFace,pDlgStateFace,
		IsOutputSetCondition(_pFeaImpAgtFace),
		Action((ActionMethod)& TestCmd::ActionSelectFace));

	AddTransition(pDlgStateLine,pDlgStateFace,
		IsOutputSetCondition(_pDlgAgtFace),
		Action((ActionMethod)& TestCmd::SwitchToFaceSelect));

	AddTransition(pDlgStateFace,pDlgStateLine,
		IsOutputSetCondition(_pDlgAgtLine),
		Action((ActionMethod)& TestCmd::SwitchToLineSelect));

	//
	AddTransition(pDlgState3DView,pDlgState3DView,
		IsOutputSetCondition(_pFeaImpAgt3DView),
		Action((ActionMethod)& TestCmd::ActionSelectElemIn3DView));

	AddTransition(pDlgStateLine,pDlgState3DView,
		IsOutputSetCondition(_pDlgAgt3DView),
		Action((ActionMethod)& TestCmd::SwitchTo3DView));

	AddTransition(pDlgStateFace,pDlgState3DView,
		IsOutputSetCondition(_pDlgAgt3DView),
		Action((ActionMethod)& TestCmd::SwitchTo3DView));

	AddTransition(pDlgState3DView,pDlgStateFace,
		IsOutputSetCondition(_pDlgAgtFace),
		Action((ActionMethod)& TestCmd::SwitchToFaceSelect));

	AddTransition(pDlgState3DView,pDlgStateLine,
		IsOutputSetCondition(_pDlgAgtLine),
		Action((ActionMethod)& TestCmd::SwitchToLineSelect));



	//
	//CATDialogState* pDlgStateInitial = GetInitialState("Blank Initial State");

	//_pDlgStateLine = AddDialogState("Select a Line");
	//_pDlgStateLine->AddDialogAgent(_pFeaImpAgtLine);
	//_pDlgStateLine->AddDialogAgent(_pDlgAgtLine);
	//_pDlgStateLine->AddDialogAgent(_pDlgAgtFace);

	////
	//AddTransition(_pDlgStateLine,_pDlgStateLine,
	//	IsOutputSetCondition(_pFeaImpAgtLine),
	//	Action((ActionMethod)& TestCmd::ActionSelectLine));
	//
	//AddTransition(pDlgStateInitial,_pDlgStateLine,
	//	IsOutputSetCondition(_pDlgAgtLine),
	//	Action((ActionMethod)& TestCmd::SwitchToLineSelect));

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TestCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

void TestCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
}

void TestCmd::ActionOK(void * data)
{
	CATMathPoint MathPt1;
	CATMathPoint MathPt2;
	GetPointOnMathLine(_spSpecLine,MathPt1,MathPt2);
	double dblCoordX = 0;
	double dblCoordY = 0;
	double dblCoordZ = 0;
	MathPt1.GetCoord(dblCoordX,dblCoordY,dblCoordZ);
	cout<<"Pt1: "<<dblCoordX<<","<<dblCoordY<<","<<dblCoordZ<<endl;

	MathPt2.GetCoord(dblCoordX,dblCoordY,dblCoordZ);
	cout<<"Pt2: "<<dblCoordX<<","<<dblCoordY<<","<<dblCoordZ<<endl;

	return;
}

void TestCmd::ActionCOUT()
{
	//自动获取指定名称的坐标系
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor == NULL)
	{
		RequestDelayedDestruction();
		return;
	}
	CATDocument *pDoc = pEditor->GetDocument();
	if (pDoc == NULL)
	{
		RequestDelayedDestruction();
		return;
	}
	CATIProduct_var spRootProduct = GetProductRoot(pDoc);
	if (spRootProduct == NULL_var)
	{
		RequestDelayedDestruction();
		return;
	}
	CATISpecObject_var spiSpecOnAxis = NULL_var;
	CATIProduct_var spiProductAxis = NULL_var;
	HRESULT rc = GetAxisFromProduct(spRootProduct,"Axis_Latch",spiSpecOnAxis,spiProductAxis);
	if (FAILED(rc)|| spiSpecOnAxis ==  NULL_var)
	{
		cout<<"no matching Axis found"<<endl;
		return;
	}
	cout<<spiProductAxis->GetPartNumber()<<" has Axis_Latch"<<endl;

	//选取的坐标系转到坐标系接口
	CATIMf3DAxisSystem_var spiAxisSys = spiSpecOnAxis;
	if (spiAxisSys == NULL_var)
	{
		cout<<"SpecObj to Axis failed"<<endl;
	}
	CATMathAxis mathAxis;
	rc = spiAxisSys->GetMathAxis(mathAxis);
	if (FAILED(rc))
	{
		return;
	}
	CATMathVector firstDir;
	CATMathVector secondDir;
	CATMathVector thirdDir;
	mathAxis.GetFirstDirection(firstDir);
	mathAxis.GetSecondDirection(secondDir);
	mathAxis.GetThirdDirection(thirdDir);
	CATMathPoint originPt;
	mathAxis.GetOrigin(originPt);
	cout<<"==========origin============="<<endl;
	cout<<"Origin Point:     "<<originPt.GetX()<<" , "<<originPt.GetY()<<" , "<<originPt.GetZ()<<endl;
	cout<<"First Direction:  "<<firstDir.GetX()<<" , "<<firstDir.GetY()<<" , "<<firstDir.GetZ()<<endl;
	cout<<"Second Direction: "<<secondDir.GetX()<<" , "<<secondDir.GetY()<<" , "<<secondDir.GetZ()<<endl;
	cout<<"Third Direction:  "<<thirdDir.GetX()<<" , "<<thirdDir.GetY()<<" , "<<thirdDir.GetZ()<<endl;
	cout<<"================================="<<endl;

	//坐标变换后的绝对坐标系
	CATMathTransformation transAbs = GetAbsTransformation(spiProductAxis);
	originPt = transAbs*originPt;
	firstDir = transAbs*firstDir;
	secondDir = transAbs*secondDir;
	thirdDir = transAbs*thirdDir;
	cout<<"=============trans================="<<endl;
	cout<<"Origin Point:     "<<originPt.GetX()<<" , "<<originPt.GetY()<<" , "<<originPt.GetZ()<<endl;
	cout<<"First Direction:  "<<firstDir.GetX()<<" , "<<firstDir.GetY()<<" , "<<firstDir.GetZ()<<endl;
	cout<<"Second Direction: "<<secondDir.GetX()<<" , "<<secondDir.GetY()<<" , "<<secondDir.GetZ()<<endl;
	cout<<"Third Direction:  "<<thirdDir.GetX()<<" , "<<thirdDir.GetY()<<" , "<<thirdDir.GetZ()<<endl;
	cout<<"================================="<<endl;
	return;
}

void TestCmd::ActionMidPtOnSurf()
{
	CATMathPoint CenterPointOnSurface;
	//HRESULT rc = GetCenterPtOnSurface(_spSpecFace,CenterPointOnSurface);
	//HRESULT rc = GetCenterPtOnSurfaceUpdate(_spSpecFace,CenterPointOnSurface);
	HRESULT rc = GetCenterPointFromSurface(_spSpecFace,CenterPointOnSurface);
	if (FAILED(rc))
	{
		return;
	}
	cout<<"==========Center Pt On Surface============"<<endl;
	cout<<"Coord: "<<CenterPointOnSurface.GetX()<<" , "<<CenterPointOnSurface.GetY()<<" , "<<CenterPointOnSurface.GetZ()<<endl;
	cout<<"================="<<endl;
	CATMathTransformation tranAbs = GetAbsTransformation(_spiProductLine);

	CenterPointOnSurface = tranAbs * CenterPointOnSurface;
	cout<<"==========Center Pt On Surface Trans============"<<endl;
	cout<<"Coord: "<<CenterPointOnSurface.GetX()<<" , "<<CenterPointOnSurface.GetY()<<" , "<<CenterPointOnSurface.GetZ()<<endl;
	cout<<"================="<<endl;

	////----------选取的是曲面是平面时
	////一定要坐标变换 获取整车环境下绝对坐标
	//CATMathPlane mathPlane;
	//mathPlane = GetMathPlane(_spSpecFace);
	//CATMathTransformation transAbs = GetAbsTransformation(_spiProductLine);
	//mathPlane = transAbs*mathPlane;
	//CATMathVector normalOnPlane;
	//CATMathVector firstDirOnPlane;
	//CATMathVector secondDirOnPlane;
	//mathPlane.GetNormal(normalOnPlane);
	//mathPlane.GetFirstDirection(firstDirOnPlane);
	////通过叉积算出第二方向
	//secondDirOnPlane = normalOnPlane^firstDirOnPlane;
	//cout<<"Normal vector: "<<normalOnPlane.GetX()<<" , "<<normalOnPlane.GetY()<<" , "<<normalOnPlane.GetZ()<<endl;
	//cout<<"First vector:  "<<firstDirOnPlane.GetX()<<" , "<<firstDirOnPlane.GetY()<<" , "<<firstDirOnPlane.GetZ()<<endl;
	//cout<<"Second vector: "<<secondDirOnPlane.GetX()<<" , "<<secondDirOnPlane.GetY()<<" , "<<secondDirOnPlane.GetZ()<<endl;

	return;
}

//一根线投影到另一根线的法向平面的操作
void TestCmd::ActionProjection()
{
	if (_spSpecLine == NULL_var || _spSpecFace == NULL_var)
	{
		cout<<"please select two lines"<<endl;
		return;
	}
	//
	CATMathPoint pt1onLine1;
	CATMathPoint pt2onLine1;
	GetPointOnMathLine(_spSpecLine,pt1onLine1,pt2onLine1);
	CATMathVector mathVector1 = pt2onLine1 - pt1onLine1;
	mathVector1.Normalize();
	//
	CATMathPoint pt1onLine2;
	CATMathPoint pt2onLine2;
	GetPointOnMathLine(_spSpecFace,pt1onLine2,pt2onLine2);
	CATMathVector mathVector2 = pt2onLine2 - pt1onLine2;
	mathVector2.Normalize();
	//
	CATMathVector mathVectorProj = GetProjectionVector(mathVector1,_spiProductLine,mathVector2,_spiProductFace);
	cout<<"projection line vector: "<<mathVectorProj.GetX()<<" , "<<mathVectorProj.GetY()<<" , "<<mathVectorProj.GetZ()<<endl;
	return;
}

//调去外部命令----不必对方cmd是share模式，我们本身命令也可以不是share模式
void TestCmd::ActionStartOtherCmd()
{
	//CATCommand *pDSCmd=NULL;  

	//try
	//{
	//	if(SUCCEEDED(CATAfrStartCommand("CopyPasteNew",pDSCmd)) && pDSCmd != NULL )
	//	{
	//		int result = pDSCmd->RequestStatusChange(CATCommandMsgRequestSharedMode,this);
	//		if(result != 0)
	//		{
	//			CATUnicodeString strWarnMessage = "Request sharing mode failed";
	//			CATUnicodeString strWarnTitle = "Notice";
	//			CATDlgNotify* pNotifyDlg = new CATDlgNotify((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(), strWarnTitle.ConvertToChar(),CATDlgNfyWarning);
	//			if (NULL != pNotifyDlg)
	//			{
	//				pNotifyDlg->DisplayBlocked(strWarnMessage ,strWarnTitle);
	//				pNotifyDlg->RequestDelayedDestruction(); 
	//				pNotifyDlg = NULL;
	//			}
	//		}
	//	}
	//	else
	//	{
	//		CATUnicodeString strWarnMessage = "Start another command failed";
	//		CATUnicodeString strWarnTitle = "Notice";
	//		CATDlgNotify* pNotifyDlg = new CATDlgNotify((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(), strWarnTitle.ConvertToChar(),CATDlgNfyWarning);
	//		if (NULL != pNotifyDlg)
	//		{
	//			pNotifyDlg->DisplayBlocked(strWarnMessage ,strWarnTitle);
	//			pNotifyDlg->RequestDelayedDestruction(); 
	//			pNotifyDlg = NULL;
	//		}
	//	}
	//}catch(...)
	//{
	//	CATUnicodeString strWarnMessage = "Start another command failed";
	//	CATUnicodeString strWarnTitle = "Notice";
	//	CATDlgNotify* pNotifyDlg = new CATDlgNotify((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(), strWarnTitle.ConvertToChar(),CATDlgNfyWarning);
	//	if (NULL != pNotifyDlg)
	//	{
	//		pNotifyDlg->DisplayBlocked(strWarnMessage ,strWarnTitle);
	//		pNotifyDlg->RequestDelayedDestruction(); 
	//		pNotifyDlg = NULL;
	//	}
	//	return;
	//}
	this->RequestStatusChange(CATCommandMsgDesactivated);

	CATCommand *pDSCmd=NULL; 
	CATUnicodeString cmdstring = "CATGSDPointDatumHdr"; 
	try
	{
		if(SUCCEEDED(CATAfrStartCommand(cmdstring.ConvertToChar(),pDSCmd)) && pDSCmd != NULL )
		{ 
			//pDSCmd->SetFather(this);
			CAAMessageBox("Start command " + cmdstring + " succeeded","Notice");

			if(pDSCmd->GetStartMode() !=  CATCommandModeShared)
			{
				CAAMessageBox("The command " + cmdstring + " is not CATCommandModeShared","Notice"); 
				if(pDSCmd->RequestStatusChange(CATCommandMsgRequestSharedMode) != 0)
				{ 
					CAAMessageBox("Request sharing mode failed","Notice");
				} 
				else
				{
					CAAMessageBox("Request sharing mode succeeded","Notice");
				}
			}
			else
			{
				CAAMessageBox("The command " + cmdstring + " is CATCommandModeShared","Notice");
			}
		}
		else
		{ 
			CAAMessageBox("Start command " + cmdstring + " failed","Notice");
		}
	}catch(...)
	{ 
		CAAMessageBox("Start command " + cmdstring + " failed","Notice");
	}

	CAAMessageBox("This is the end of testing  command","Notice");
	//RequestDelayedDestruction();
}

//把当前窗口右上角的Compass移动到指定位置
void TestCmd::ActionCompassTest()
{
	CATBaseUnknown_var spBaseUnknownCompass = _pEditor->GetCompass();
	CATI3DCompass_var spiCompass = spBaseUnknownCompass;
	if (spiCompass == NULL_var)
	{
		cout<<"Get Compass failed"<<endl;
		return;
	}
	//
	CATCompassState CompassState = CatGlider;
	spiCompass->SetState(&CompassState);
	//
	CATMathPoint mathPointOrigin(100,100,100);
	CATMathVector mathVectorFirst(1,0,0);
	CATMathVector mathVectorSecond(0,1,0);
	CATMathVector mathVectorThird(0,0,1);
	CATMathAxis mathAxisCompass(mathPointOrigin,mathVectorFirst,mathVectorSecond,mathVectorThird);
	//
	HRESULT rc = spiCompass->SetPosition(&mathAxisCompass);
	if (FAILED(rc))
	{
		cout<<"Compass setposition failed"<<endl;
		return;
	}
	////
	//CATCompassState CompassState = CatGlider;
	//spiCompass->SetState(&CompassState);
	//
	spiCompass->Show();
	return;
}

//从环境变量文件夹中读取配置文件txt
void TestCmd::ActionReadTxt()
{
	//从环境变量获得txt路径
	CATUnicodeString strTxtPath = "";
	HRESULT rc = GetResourceFilePath("CATGraphicPath","","YFWhiteList.txt",strTxtPath);
	if (FAILED(rc))
	{
		return;
	}
	cout<<"Resource File Path: "<<strTxtPath<<endl;
	//读取txt
	CATLISTV(CATUnicodeString) lstWhiteList = NULL;
	ReadTxtContent(strTxtPath,lstWhiteList);
	return;
}

//3D模型树预览显示
void TestCmd::Action3DView()
{
	//先从资源文件夹获取part template的路径
	CATUnicodeString strTemplatePath = "";
	HRESULT rc = GetResourceFilePath("CATGraphicPath","Part_Template","Part1.CATPart",strTemplatePath);
	if (FAILED(rc))
	{
		return;
	}
	//从路径获取对应模板根节点
	CATIPrtPart_var spiPartOnTemplate = NULL_var;
	rc = _GeneralClass->GetRootPartFromResourceFile(strTemplatePath,TRUE,spiPartOnTemplate);
	if (FAILED(rc) || spiPartOnTemplate == NULL_var)
	{
		return;
	}
	//
	SWIEEEleCreateViewWindowDlg *p3DViewWindowDlg = new SWIEEEleCreateViewWindowDlg(_pDlg,"Test_3D_View",spiPartOnTemplate); //如果要预览Part的模型树，需要传入CATIPrtPart
	p3DViewWindowDlg->Build();
	//_p3DViewWindowDlg->SetVisibility(CATDlgHide);
	p3DViewWindowDlg->SetVisibility(CATDlgShow);
	//
	//CATDialogState *pDlgState3DView = GetInitialState("Select Element in 3D View");
	//pDlgState3DView->AddDialogAgent(_pFeaImpAgt3DView);
	//AddTransition(pDlgState3DView,pDlgState3DView,
	//	IsOutputSetCondition(_pFeaImpAgt3DView),
	//	Action((ActionMethod)& TestCmd::ActionSelectElemIn3DView));
	return;
}

void TestCmd::ActionSelectElemIn3DView()
{
	//
	if (_pHSO != NULL)
	{
		_pHSO->Empty();
	}
	//
	//
	SetHighlight(_pFeaImpAgt3DView);
	//
	_pFeaImpAgt3DView->InitializeAcquisition();
}

void TestCmd::SwitchToFaceSelect()
{
	_pDlgAgtFace->InitializeAcquisition();
	_pDlgAgtLine->InitializeAcquisition();
	_pDlgAgt3DView->InitializeAcquisition();
	_pDlg->GetSelectListLine()->ClearSelect();

	return;
}

void TestCmd::SwitchToLineSelect()
{
	_pDlgAgtFace->InitializeAcquisition();
	_pDlgAgtLine->InitializeAcquisition();
	_pDlgAgt3DView->InitializeAcquisition();
	_pDlg->GetSelectListFace()->ClearSelect();

	return;
}

void TestCmd::SwitchTo3DView()
{
	_pDlgAgtFace->InitializeAcquisition();
	_pDlgAgtLine->InitializeAcquisition();
	_pDlgAgt3DView->InitializeAcquisition();
	_pDlg->GetSelectListFace()->ClearSelect();
	_pDlg->GetSelectListLine()->ClearSelect();
}

void TestCmd::ActionSelectLine()
{
	//
	if (_pHSO != NULL)
	{
		_pHSO->Empty();
	}
	//
	//SelectElement(_pFeaImpAgtLine,_spSpecLine);
	SelectElementUpdate(_pFeaImpAgtLine,_spSpecLine,_spiProductLine);
	//
	CATIAlias_var spAlias = _spSpecLine;
	CATUnicodeString strAlias = "";
	if (spAlias != NULL_var)
	{
		strAlias = spAlias->GetAlias();
	}
	_pDlg->GetSelectListLine()->ClearLine();
	_pDlg->GetSelectListLine()->SetLine(strAlias,-1,CATDlgDataAdd);
	//
	SetHighlight(_pFeaImpAgtLine);
	//
	_pFeaImpAgtLine->InitializeAcquisition();
	//
	if (_spSpecFace == NULL_var)
	{
		int iTabRow = 0;
		_pDlg->GetSelectListFace()->SetSelect(&iTabRow,1);
	}
	return;
}

void TestCmd::ActionSelectFace()
{
	//
	if (_pHSO != NULL)
	{
		_pHSO->Empty();
	}
	//
	//SelectElement(_pFeaImpAgtLine,_spSpecLine);
	SelectElementUpdate(_pFeaImpAgtFace,_spSpecFace,_spiProductFace);
	//
	CATIAlias_var spAlias = _spSpecFace;
	CATUnicodeString strAlias = "";
	if (spAlias != NULL_var)
	{
		strAlias = spAlias->GetAlias();
	}
	_pDlg->GetSelectListFace()->ClearLine();
	_pDlg->GetSelectListFace()->SetLine(strAlias,-1,CATDlgDataAdd);
	//
	SetHighlight(_pFeaImpAgtFace);
	//
	_pFeaImpAgtFace->InitializeAcquisition();
	//
	if (_spSpecLine == NULL_var)
	{
		int iTabRow = 0;
		_pDlg->GetSelectListLine()->SetSelect(&iTabRow,1);
	}
	return;
}


//选择元素，转换成SpecObj，并同时返回所属Product(Instance)
void TestCmd::SelectElementUpdate(CATFeatureImportAgent *pFeatAgent,CATISpecObject_var &spSpecOnSelection, CATIProduct_var &ospProductSeletion) 
{
	HRESULT rc = E_FAIL;

	if (pFeatAgent == NULL)
	{
		return;
	}
	CATISpecObject *piSpecOnSelection = NULL;
	CATPathElement *pPath = pFeatAgent->GetValue();
	CATBaseUnknown *pSelection = pFeatAgent->GetElementValue(pPath);
	//CATBaseUnknown *pSelection = pFeatAgent->GetElementValue(pFeatAgent->GetValue());
	//转换成SpecObj
	if (NULL != pSelection)
	{
		rc = pSelection->QueryInterface(IID_CATISpecObject,(void**)&piSpecOnSelection);
		//转换为空时，说明选择的是Brep元素，需要特征化
		if (piSpecOnSelection == NULL)
		{
			CATIBRepAccess *pBRepAccess = NULL;
			rc = pSelection -> QueryInterface(IID_CATIBRepAccess, (void**) & pBRepAccess);
			CATIFeaturize_var spToFeaturize = pBRepAccess;
			if (NULL_var != spToFeaturize)
			{
				piSpecOnSelection = spToFeaturize->FeaturizeR(MfNoDuplicateFeature | MfTemporaryBody | MfSelectingFeatureSupport | MfFunctionalFeaturization);
			}
		}
		spSpecOnSelection = piSpecOnSelection;
	}
	//返回所属Product
	CATBaseUnknown *pProduct = pPath->FindElement(IID_CATIProduct);
	if (pProduct == NULL)
	{
		pProduct = pPath->FindElement(IID_CATIPrtPart);
		if (pProduct == NULL)
		{
			return;
		}
		CATIPrtPart_var spPart = pProduct;
		if (spPart == NULL_var)
		{
			return;
		}
		CATISpecObject_var spPartObject = spPart->GetProduct();
		if (spPartObject == NULL_var)
		{
			return;
		}
		ospProductSeletion = spPartObject;
	}
	ospProductSeletion = pProduct;
}

//
void TestCmd::SetHighlight(CATFeatureImportAgent *ipFeatImpAgt)
{

	CATPathElement* pPathEle = NULL;
	pPathEle = ipFeatImpAgt->GetValue();
	if (pPathEle != NULL)
	{
		_pHSO->Empty();
		_pHSO->AddElements(pPathEle);
		_pHSO->EndAddElements();
	}
}

//获取所选择线的两个数学端点
void TestCmd::GetPointOnMathLine(CATBaseUnknown_var ispiSpecObject,CATMathPoint &omathPt1,CATMathPoint &omathPt2)
{
	CATMathLine resultMathLine;
	CATBody_var spBody = GetBodyFromFeature(ispiSpecObject);
	if(spBody != NULL ) 
	{
		CATLISTP(CATCell) LISTCell; 
		spBody->GetAllCells( LISTCell, 0); 
		if(LISTCell.Size()<2)
		{
			cout<<"LISTCell size != 2"<<endl;
		}
		else
		{
			CATVertex_var spV1 = LISTCell[1];
			CATVertex_var spV2 = LISTCell[LISTCell.Size()];

			CATPoint * pt1 = spV1->GetPoint();
			CATPoint * pt2 = spV2->GetPoint();

			CATMathPoint mathPt1;
			CATMathPoint mathPt2;
			pt1->GetMathPoint(mathPt1);
			pt2->GetMathPoint(mathPt2);

			omathPt1=mathPt1;
			omathPt2=mathPt2;

			//vec = mathPt2 - mathPt1;

		}		
	}
	else  
		cout<<"Get Body From Feature is failed."<<endl;

	return ;
}

// 通过特征获取Body
CATBody_var TestCmd::GetBodyFromFeature( CATBaseUnknown_var& ispFeature ) 
{ 
	//cout<<"GetBodyFromFeature...."<<endl;
	CATBody_var spBody = NULL_var; 
	do { 
		if( ispFeature==NULL_var )  break; 

		CATIMfBRep_var spBRepOnFeature = ispFeature; 
		if(spBRepOnFeature!=NULL_var )
		{ 
			spBody = spBRepOnFeature->GetBody(); 
			if (spBody==NULL_var)
			{
				spBody=spBRepOnFeature->CreateBody(MfWithPermanentBody);
				if (spBody==NULL_var)
				{
					spBody=spBRepOnFeature->CreateSickBody();
					if (spBody==NULL_var)
					{
						cout<<"CATIMfBRep GetBody Failed"<<endl;

					}
					else
					{
						cout<<"CreateSickBody sucess"<<endl;

					}

				}
				else
				{
					cout<<"CreateBody sucess"<<endl;
				}
			}
		} 
		else
		{ 
			CATIBRepAccess_var spBRepAccess=ispFeature;
			if (spBRepAccess!=NULL_var)
			{
				spBody=spBRepAccess->CreateBody();
			}
			else
			{
				CATIGeometricalElement_var spGeometricalElementOnFeature = ispFeature; 
				if( !!spGeometricalElementOnFeature ) 
				{ 
					spBody = spGeometricalElementOnFeature->GetBodyResult(); 
				} 
				else
				{ 
					CATIBodyRequest_var spBodyRequestOnModel = ispFeature; 
					if( spBodyRequestOnModel == NULL_var) break; 

					CATListValCATBaseUnknown_var listResult; 
					HRESULT rc = spBodyRequestOnModel->GetResults("MfDefault3DView",listResult);
					if(FAILED(rc) ||  listResult.Size() <= 0)   break; 

					CATIGeometricalElement_var spGeometricalElementOnBody = listResult[1]; 
					if(spGeometricalElementOnBody==NULL_var)  break;    
					spBody = spGeometricalElementOnBody->GetBodyResult();
				} 
			}
		}
		if( spBody==NULL_var) break;
	} while(FALSE); 
	//cout<<"GetBodyFromFeature...."<<endl;
	return spBody; 
}

//计算transformation
CATMathTransformation TestCmd::GetAbsTransformation(CATIProduct_var ispCurrentProduct)
{
	if (ispCurrentProduct==NULL_var)
	{
		cout<<"Failed to Get Movable."<<endl;
		return NULL;
	}

	CATIMovable_var spiMovableTwo(ispCurrentProduct);
	if(spiMovableTwo == NULL_var)
	{
		cout<<"Failed to Get Movable."<<endl;
		return NULL;
	}

	CATMathTransformation pMathTrans;
	spiMovableTwo->GetAbsPosition( pMathTrans);

	return pMathTrans;
}

//获取曲面的中点--------------有问题，只适用于平面，不适用于曲面，获取的是曲面的重心点
HRESULT TestCmd::GetCenterPtOnSurface(CATBaseUnknown_var ispiSpecObject,CATMathPoint &omathPtCenter)
{
	HRESULT rc = S_OK;
	CATBody_var spBody = GetBodyFromFeature(ispiSpecObject);
	if (spBody == NULL_var)
	{
		return E_FAIL;
	}
	CATLISTP(CATCell) lstCell = NULL;
	spBody->GetAllCells(lstCell,2);
	if (lstCell.Size() == 0)
	{
		return E_FAIL;
	}
	CATIMeasurable_var spMeasurable = lstCell[1];
	CATIMeasurableSurface_var spMeasurableSurf = spMeasurable;
	CATMathPoint CenterPoint;
	rc = spMeasurableSurf->GetCOG(CenterPoint);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	omathPtCenter = CenterPoint;
	return rc;
}

//获取曲面中点---使用GSMFactory下----也有问题，更新一直报错
HRESULT TestCmd::GetCenterPtOnSurfaceUpdate(CATISpecObject_var ispiSpecObject, CATMathPoint &omathPtCenter)
{
	HRESULT rc = S_OK;
	CATIContainer_var spiContainer = ispiSpecObject->GetFeatContainer();
	if (spiContainer == NULL_var)
	{
		return E_FAIL;
	}
	CATIGSMFactory_var spiGSMFactory = spiContainer;
	CATICkeParmFactory_var spiParmFactory = spiContainer;
	CATICkeParm_var spiDistanceParm = spiParmFactory->CreateLength("Distance",0);

	//CATICkeParm_var spiParmCoordX = spiParmFactory->CreateLength("X",1);
	//CATICkeParm_var spiParmCoordY = spiParmFactory->CreateLength("Y",1);
	//CATICkeParm_var spiParmCoordZ = spiParmFactory->CreateLength("Z",1);
	//CATIGSMDirection_var spiGSMDir = spiGSMFactory->CreateDirection(spiParmCoordX,spiParmCoordY,spiParmCoordZ);
	CATIGSMDirection_var spiGSMDir = spiGSMFactory->CreateDirection(ispiSpecObject);

	CATIGSMPointOnSurface_var spiPointOnSurf = spiGSMFactory->CreatePoint(ispiSpecObject,NULL_var,spiGSMDir,spiDistanceParm);
	CATPoint_var spPoint = spiPointOnSurf;
	CATISpecObject_var spiSpecPoint = spiPointOnSurf;
	CATBoolean boolUpdate = UpdateObject(spiSpecPoint);
	if (boolUpdate == FALSE)
	{
		cout<<"Center point creation failed"<<endl;
		return E_FAIL;
	}
	spPoint->GetMathPoint(omathPtCenter);
	return rc;
}

//获取曲面中点，利用CATCell下的方法，只适用于点选的单个面，不适用于Join面
HRESULT TestCmd::GetCenterPointFromSurface(CATISpecObject_var ispiSpecObject, CATMathPoint &oMathPointCenter)
{
	HRESULT rc = S_OK;
	CATBody_var spBody = GetBodyFromFeature(ispiSpecObject);
	if (spBody == NULL_var)
	{
		return E_FAIL;
	}
	CATLISTP(CATCell) lstCell = NULL;
	spBody->GetAllCells(lstCell,2);
	if (lstCell.Size() == 0)
	{
		return E_FAIL;
	}
	CATCell_var spCell = lstCell[1];
	spCell->EstimateCenter(oMathPointCenter);
	return rc;
}

// 获取所选择的面的数学平面
CATMathPlane TestCmd::GetMathPlane(CATBaseUnknown_var ispiSpecObject)
{
	CATMathPlane MathPlane;
	CATBody_var spBody = GetBodyFromFeature(ispiSpecObject);
	if(spBody != NULL ) 
	{
		CATLISTP(CATCell) LISTCell; 
		spBody->GetAllCells( LISTCell, 2 ); 
		for( int index = 1; index <= LISTCell.Size(); index++ )
		{ 
			CATCell * pCell = LISTCell[index]; 
			if(pCell == NULL) 
			{
				cout<<"CATCell is NULL."<<endl;
				continue;
			}

			CATCell_var spCell = pCell;

			CATFace_var spFace = spCell;
			if(spFace == NULL_var)
			{
				cout<<"CATFace_var is NULL_var."<<endl;
				continue;
			}

			CATSurface_var spSurface = spFace->GetSurface();
			if(spSurface == NULL_var) 
			{
				cout<<"CATSurface_var is NULL_var."<<endl;
				continue;
			}

			CATPlane *pPlane = NULL;
			HRESULT rc = spSurface->QueryInterface(IID_CATPlane,(void**)&pPlane);
			if(FAILED(rc) || pPlane == NULL) 
			{
				cout<<"QI to CATPlane is failed!"<<endl;
				continue;
			}			

			MathPlane = pPlane->GetAxis();
		}
	}
	else  cout<<"Get Body From Feature is failed."<<endl;

	return MathPlane;
}

// 获得CATProduct/CATPart文档的根对象
CATIProduct_var TestCmd::GetProductRoot(CATDocument *ipDoc)
{
	HRESULT rc=E_FAIL;

	CATIProduct_var spRootProduct=NULL_var;

	CATIDocRoots_var spRoots = ipDoc;
	if( !spRoots ) return spRootProduct;

	//Get the root element
	CATBaseUnknown_var spDocRoot=NULL_var;
	CATListValCATBaseUnknown_var *pListRoots = spRoots->GiveDocRoots();
	if (pListRoots && pListRoots->Size()>0)
		spDocRoot = (*pListRoots)[1];

	if (pListRoots) 
	{	
		delete pListRoots;	
		pListRoots = NULL;	
	}

	CATIProduct *piRootProduct=NULL;
	rc = spDocRoot->QueryInterface(IID_CATIProduct,(void **)&piRootProduct);
	if( SUCCEEDED(rc)&&piRootProduct!=NULL ) 
	{
		spRootProduct = piRootProduct;
		piRootProduct->Release(); 
		piRootProduct = NULL;
	}
	else
	{
		CATIPrtPart_var spPrtPart=NULL_var;
		rc = spDocRoot->QueryInterface(IID_CATIPrtPart,(void **)&spPrtPart);
		if (spPrtPart==NULL_var)
		{
			return NULL_var;
		}

		CATISpecObject_var spPartObject=spPrtPart->GetProduct( );
		if (spPartObject==NULL_var)
		{
			return NULL_var;
		}

		spRootProduct=spPartObject;
		if(spRootProduct==NULL_var)
		{
			return NULL_var;
		}
	}

	return spRootProduct;
}

//获取根文档下的指定名称的坐标轴系，并同时返回坐标系所属的Product(必须是Instance，而不能是reference，否则空间坐标不对)
HRESULT TestCmd::GetAxisFromProduct(CATIProduct_var ispProduct, CATUnicodeString istrAxisName, CATISpecObject_var &ospiSpecOnAxis, CATIProduct_var &ospiProductAxis)
{
	HRESULT rc = S_OK;
	CATBoolean boolIsProd = IsProduct(ispProduct);
	if (boolIsProd == FALSE)
	{
		return E_FAIL;
	}
	CATListValCATBaseUnknown_var *lstChildren = ispProduct->GetAllChildren();
	if (lstChildren == NULL)
	{
		return E_FAIL;
	}
	//过滤出Part
	CATIProduct_var spChild = NULL_var;
	CATLISTP(CATIProduct) lstRefProduct = NULL;
	for (int i = 1; i <= lstChildren->Size(); i++)
	{
		spChild = (*lstChildren)[i];
		if (IsProduct(spChild))
		{	
			continue;
		}
		CATIProduct_var spRefProduct = spChild->GetReferenceProduct(); 
		lstRefProduct.Append(spRefProduct);
	}
	if (lstRefProduct.Size()==0)
	{
		return E_FAIL;
	}
	//过滤重复Part
	for (int i = 1; i<=lstRefProduct.Size(); i++)
	{
		for (int j = lstRefProduct.Size(); j>i; j--)
		{
			if (lstRefProduct[i] == lstRefProduct[j])
			{
				lstRefProduct.RemovePosition(j);
			}
		}
	}
	for (int i=1; i <= lstRefProduct.Size(); i++)
	{
		CATISpecObject_var spiSpecPart = NULL_var;
		CATIPrtContainer_var spiPrtCont = NULL_var;
		rc = GetPartFromProduct(lstRefProduct[i],spiSpecPart,spiPrtCont);
		if (FAILED(rc))
		{
			continue;
		}
		CATIDescendants *pDescendantsOnChild = NULL;
		rc = spiSpecPart->QueryInterface(IID_CATIDescendants,(void**)&pDescendantsOnChild);
		if (FAILED(rc))
		{
			continue;
		}
		CATLISTV(CATISpecObject_var) lstAxisSys;
		pDescendantsOnChild->GetAllChildren("CATIMf3DAxisSystem",lstAxisSys);
		pDescendantsOnChild->Release();
		pDescendantsOnChild = NULL;
		//
		CATBoolean findAxis = FALSE;
		cout<<"Axis Counts:  "<<lstAxisSys.Size()<<endl;
		for (int j = 1; j<= lstAxisSys.Size(); j++)
		{
			CATIAlias_var spiAliasOnAxis = lstAxisSys[j];
			CATUnicodeString strAxisName = spiAliasOnAxis->GetAlias();
			if (strAxisName == istrAxisName)
			{
				cout<<lstRefProduct[i]->GetPartNumber()<<"  has targeted AxisSys"<<endl;
				findAxis = TRUE;
				ospiSpecOnAxis = lstAxisSys[j];
				//ospiProductAxis = lstRefProduct[i];//获取Reference，但是此处需要获取Instance，因为位置会变化
				//先返回PathElement，然后再获取InstanceProduct
				CATPathElement *pPath = NULL;
				rc = GetPathElement(ospiSpecOnAxis,pPath);
				CATBaseUnknown *pProduct = pPath->FindElement(IID_CATIProduct);
				if (pProduct == NULL)
				{
					pProduct = pPath->FindElement(IID_CATIPrtPart);
					if (pProduct == NULL)
					{
						return E_FAIL;
					}
					CATIPrtPart_var spPart = pProduct;
					if (spPart == NULL_var)
					{
						return E_FAIL;
					}
					CATISpecObject_var spPartObject = spPart->GetProduct();
					if (spPartObject == NULL_var)
					{
						return E_FAIL;
					}
					ospiProductAxis = spPartObject;
				}
				ospiProductAxis = pProduct;
				break;
			}
		}
		if (findAxis == TRUE)
		{
			break;
		}
	}
	return rc;
}

//判断是Product还是Part
CATBoolean TestCmd::IsProduct(CATIProduct_var ispiPrd)
{
	HRESULT rc = S_OK;

	CATBoolean isProduct=FALSE;

	CATIProduct *piPrd=NULL;
	rc = ispiPrd->QueryInterface(IID_CATIProduct,(void **)&piPrd);

	CATIProduct_var spRefPrd=ispiPrd->GetReferenceProduct();
	piPrd->Release();  piPrd = NULL;

	if (spRefPrd==NULL_var)
	{
		isProduct = TRUE;
		cout<<"==>Get ReferenceProduct failed"<<endl;
		return isProduct;
	}

	CATILinkableObject *piLinkObj=NULL;
	rc=spRefPrd->QueryInterface(IID_CATILinkableObject,(void **)&piLinkObj);
	if( FAILED(rc) || !piLinkObj ) 
	{
		cout << "==> Get CATILinkableObject error !" << endl;
		return isProduct;
	}

	CATDocument *pDoc=piLinkObj->GetDocument();
	piLinkObj->Release();  piLinkObj = NULL;
	if( !pDoc ) 
	{
		cout << "==> Get CATDocument error !" << endl;
		return isProduct;
	}

	CATIDocId *pDocID;
	CATUnicodeString typeDoc="";
	rc = pDoc->GetDocId(&pDocID);
	if( !(FAILED(rc)) )
		rc = pDocID->GetType(typeDoc);
	//cout << " ==> The type of document is: " << typeDoc << endl;

	if( typeDoc == "CATProduct" )
		isProduct = TRUE;

	return isProduct;
}

//从Product获取PrtPart
HRESULT TestCmd::GetPartFromProduct(CATIProduct_var ispProduct,CATISpecObject_var &ospPartFromProduct,CATIPrtContainer_var &ospiPrtCont)
{
	//cout<<"GetPartFromProduct"<<endl;

	HRESULT rc = E_FAIL ;
	if(ispProduct == NULL_var)
		return E_FAIL ;

	CATIProduct_var spRef=ispProduct->GetReferenceProduct();
	if(spRef!=NULL_var)
	{
		CATILinkableObject *piLinkableObject=NULL;
		rc = spRef->QueryInterface(IID_CATILinkableObject,(void**)&piLinkableObject);                            
		if(SUCCEEDED(rc))
		{
			// Do not release this pointer
			CATDocument *pDocument=NULL ;
			pDocument=piLinkableObject->GetDocument();
			if (pDocument!=NULL)
			{
				CATIContainerOfDocument *pIContainerOfDocument = NULL ;
				rc=pDocument->QueryInterface(IID_CATIContainerOfDocument,(void**)& pIContainerOfDocument );
				if(SUCCEEDED(rc))
				{
					CATIContainer *pIContainerOnSpecContainer = NULL ;
					rc = pIContainerOfDocument->GetSpecContainer(pIContainerOnSpecContainer);
					if ( SUCCEEDED(rc) && (NULL!=pIContainerOnSpecContainer) )
					{
						CATIPrtContainer *piPrtCont=NULL;
						rc=pIContainerOnSpecContainer->QueryInterface(IID_CATIPrtContainer,(void**)&piPrtCont);
						if(SUCCEEDED(rc))
						{
							ospPartFromProduct = piPrtCont->GetPart();
							ospiPrtCont=piPrtCont;
							//piPrtCont->Release();
							//piPrtCont=NULL ;
						}
						pIContainerOnSpecContainer->Release();
						pIContainerOnSpecContainer=NULL ;
					}
					pIContainerOfDocument->Release();
					pIContainerOfDocument=NULL ;
				}
			} 
			else 
				rc=E_FAIL ;

			piLinkableObject->Release();
			piLinkableObject = NULL ;
		}
	}
	return rc ;
}

//从SpecObj获取PathElement
HRESULT TestCmd::GetPathElement(CATISpecObject_var ispiSpecObj, CATPathElement *&opPath)
{
	HRESULT rc = S_OK;
	CATIBuildPath *piBuildPath = NULL;
	rc = ispiSpecObj->QueryInterface(IID_CATIBuildPath, (void**)&piBuildPath);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATPathElement context = CATFrmEditor::GetCurrentEditor()->GetUIActiveObject();
	CATPathElement *pPathElement = NULL;
	rc = piBuildPath->ExtractPathElement(&context,&pPathElement);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	opPath = pPathElement;
	return rc;
}

//刷新对象并作异常处理
CATBoolean TestCmd::UpdateObject(const CATISpecObject_var &spUpdatedObj)
{

	CATBoolean IsUpdatedSuccess = TRUE;

	CATTry
	{
		spUpdatedObj->Update();

	}

	CATCatch(CATMfErrUpdate, error)	
	{
		IsUpdatedSuccess = FALSE;
		if(NULL != error)
		{
			::Flush(error);
		}
	}

	CATCatch(CATError,error)
	{
		IsUpdatedSuccess = FALSE;
		if(NULL != error)
		{
			::Flush(error);
		}

	}
	CATEndTry;

	return IsUpdatedSuccess;
}

//向量2投影到法向为向量1的平面上
//Product输入必须是Instance
CATMathVector TestCmd::GetProjectionVector(CATMathVector imathVector1, CATIProduct_var ispiProductVector1,CATMathVector imathVector2, CATIProduct_var ispiProductVector2)
{
	CATMathVector omathVectorProject;
	//坐标变换
	CATMathTransformation transAbs1 = GetAbsTransformation(ispiProductVector1);
	imathVector1 = transAbs1*imathVector1;
	CATMathTransformation transAbs2 = GetAbsTransformation(ispiProductVector2);
	imathVector2 = transAbs2*imathVector2;
	//做第一次叉积，获得两个向量的公共垂直向量
	CATMathVector mathVectorFirstCross = imathVector1^imathVector2;
	//第一次叉积的结果再与向量1叉乘
	CATMathVector mathVectorSecondCross = mathVectorFirstCross^imathVector1;
	//
	omathVectorProject = mathVectorSecondCross;
	return omathVectorProject;

}


void TestCmd::CAAMessageBox(CATUnicodeString message,CATUnicodeString title)
{
	CATDlgNotify* pNotifyDlg = new CATDlgNotify((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(), title.ConvertToChar(),CATDlgNfyWarning);
	if (NULL != pNotifyDlg)
	{
		pNotifyDlg->DisplayBlocked(message ,title);
		pNotifyDlg->RequestDelayedDestruction(); 
		pNotifyDlg = NULL;
	}
}

HRESULT TestCmd::GetResourceFilePath(const char* ichVarName,CATUnicodeString istrFolderName,CATUnicodeString istrFileName,CATUnicodeString &ostrFullPath)
{
	HRESULT rc = S_OK;
	//先找到特定的环境变量的路径
	//const char * cValue = "YFAIResourcePath";
	char * strPath = NULL;
	CATLibStatus sStatus = CATGetEnvValue(ichVarName,&strPath);
	if ((sStatus ==CATLibError)||(strPath==NULL))
	{
		CATUnicodeString strWarnMessage = "No Environment Parameter : " + CATUnicodeString(ichVarName);
		CATUnicodeString strWarnTitle = "Notice";
		CATDlgNotify* pNotifyDlg = new CATDlgNotify((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(), strWarnTitle.ConvertToChar(),CATDlgNfyWarning);
		if (NULL != pNotifyDlg)
		{
			pNotifyDlg->DisplayBlocked(strWarnMessage ,strWarnTitle);
			pNotifyDlg->RequestDelayedDestruction(); 
			pNotifyDlg = NULL;
		}
		return E_FAIL;
	}
	//判断输入的文件夹名称是否为空
	if (istrFolderName != "")
	{
		//不为空则先找到文件夹路径
		CATUnicodeString strFolderPath(CATFindPath(istrFolderName,strPath));
		if(strFolderPath == "")
		{
			CATUnicodeString strWarnMessage = "No Folder :" + istrFolderName;
			CATUnicodeString strWarnTitle = "Notice";
			CATDlgNotify* pNotifyDlg = new CATDlgNotify((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(), strWarnTitle.ConvertToChar(),CATDlgNfyWarning);
			if (NULL != pNotifyDlg)
			{
				pNotifyDlg->DisplayBlocked(strWarnMessage ,strWarnTitle);
				pNotifyDlg->RequestDelayedDestruction(); 
				pNotifyDlg = NULL;
			}
			return E_FAIL;
		}
		//再找文件夹下的文件路径
		CATUnicodeString strFilePath(CATFindPath(istrFileName,strFolderPath));
		if(strFilePath == "")
		{
			CATUnicodeString strWarnMessage = "No File :" + istrFileName;
			CATUnicodeString strWarnTitle = "Notice";
			CATDlgNotify* pNotifyDlg = new CATDlgNotify((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(), strWarnTitle.ConvertToChar(),CATDlgNfyWarning);
			if (NULL != pNotifyDlg)
			{
				pNotifyDlg->DisplayBlocked(strWarnMessage ,strWarnTitle);
				pNotifyDlg->RequestDelayedDestruction(); 
				pNotifyDlg = NULL;
			}
			return E_FAIL;
		}
		ostrFullPath = strFilePath;
	}
	else
	{
		//如果输入的文件夹名称为空，则直接在环境变量文件夹下直接找
		CATUnicodeString strFilePath(CATFindPath(istrFileName,strPath));
		if(strFilePath == "")
		{
			CATUnicodeString strWarnMessage = "No File :" + istrFileName;
			CATUnicodeString strWarnTitle = "Notice";
			CATDlgNotify* pNotifyDlg = new CATDlgNotify((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(), strWarnTitle.ConvertToChar(),CATDlgNfyWarning);
			if (NULL != pNotifyDlg)
			{
				pNotifyDlg->DisplayBlocked(strWarnMessage ,strWarnTitle);
				pNotifyDlg->RequestDelayedDestruction(); 
				pNotifyDlg = NULL;
			}
			return E_FAIL;
		}
		ostrFullPath = strFilePath;

	}
	return rc;
}

HRESULT TestCmd::ReadTxtContent(CATUnicodeString istrTxtPath, CATLISTV(CATUnicodeString) &olstContent)
{
	HRESULT rc = S_OK;

	ifstream input;
	const char* chPath = istrTxtPath.ConvertToChar();
	input.open(chPath);
	string strLine;
	CATUnicodeString strUniLine;
	while (getline(input,strLine))
	{
		//cout<<strLine<<endl;
		int iConvert = strUniLine.BuildFromWChar(txtConvert_Wchar(strLine));
		if (1 == iConvert)
		{
			cout<<strUniLine<<endl;
			olstContent.Append(strUniLine);
		}
	}
	return rc;
}

void TestCmd::CAAUStringConvertToChar(CATUnicodeString strUnicode,char* &strchar )
{
	int len = WideCharToMultiByte(CP_ACP, 0, strUnicode, -1, NULL, 0, NULL, NULL); 
	memset(strchar, 0, len + 1); 
	WideCharToMultiByte(CP_ACP, 0, strUnicode, -1, strchar, len, NULL, NULL); 
}


//字符转换函数 
wchar_t *TestCmd::txtConvert_Wchar(std::string str) 
{ 
	size_t size = str.length(); 
	wchar_t * buffer = new wchar_t[size + 1]; 
	MultiByteToWideChar(CP_ACP, 0, str.c_str(), size, buffer, size*sizeof(wchar_t)); 
	buffer[size] = 0; 
	return buffer; 
}

CATUnicodeString TestCmd::CAAUStringBuildFromChar(char * strchar)
{
	int len = MultiByteToWideChar(CP_ACP, 0, strchar, -1, NULL, 0); 
	wchar_t* strwcANSI = new wchar_t[len + 1]; 
	memset(strwcANSI, 0, len * 2 + 2); 
	MultiByteToWideChar(CP_ACP, 0, strchar, -1, strwcANSI, len); 
	CATUnicodeString strwcUnicode;
	strwcUnicode.BuildFromWChar(strwcANSI); 
	if(strwcANSI) delete [] strwcANSI;
	return strwcUnicode;
}


//通过递归方法从上往下获取子零件
void TestCmd::GetSubList(CATIProduct_var ispiRootProduct,int iLevel,CATListOfCATUnicodeString &olstStrPartName)
{
	CATListValCATBaseUnknown_var *listDirectChildren = ispiRootProduct->GetChildren();
	if (listDirectChildren == NULL)
	{
		return;
	}
	iLevel++;
	CATIProduct_var spDirectChild = NULL_var;
	for (int i=1; i<=listDirectChildren->Size(); i++)
	{

		spDirectChild = (*listDirectChildren)[i];
		//int iLevel = GetLevel(spDirectChild);
		cout<<iLevel<<"     "<<spDirectChild->GetPartNumber()<<endl;
		CATUnicodeString strPartName = spDirectChild->GetPartNumber();
		olstStrPartName.Append(strPartName);
		GetSubList(spDirectChild,iLevel,olstStrPartName);
	}

	return;
}

//获取零件层级
int TestCmd::GetLevel(CATIProduct_var spChildProduct)
{
	int iLevel = 0;
	while(spChildProduct->GetFatherProduct()!= NULL_var)
	{
		spChildProduct = spChildProduct->GetFatherProduct();
		iLevel++;
	}

	return iLevel;
}

