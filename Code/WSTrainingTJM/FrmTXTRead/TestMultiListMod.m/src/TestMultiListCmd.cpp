// COPYRIGHT Dassault Systemes 2019
//===================================================================
//
// TestMultiListCmd.cpp
// The state chart based command: TestMultiListCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2019  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestMultiListCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TestMultiListCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestMultiListCmd::TestMultiListCmd() :
  CATStateCommand ("TestMultiListCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,_pGeneralCls(NULL)
,_pSurfaceAgent(NULL),_pSurfaceFieldAgent(NULL)
,_pCurveAgent(NULL),_pCurveFieldAgent(NULL)
,_lstBUSurface(NULL),_lstBUCurve(NULL)
,_lstAliasSurface(NULL),_lstAliasCurve(NULL)
{
	_pDlg = NULL;
	_pDlg = new TestMultiListDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pGeneralCls = new GeneralClass();

	_pEditor = CATFrmEditor::GetCurrentEditor();
	_pHSO = NULL;
	if (NULL != _pEditor)
	{
		_pHSO = _pEditor->GetHSO();
	}
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestMultiListCmd::~TestMultiListCmd()
{
	if (_pDlg != NULL)
	{
		_pDlg->RequestDelayedDestruction();
		_pDlg = NULL;
	}

	if (_pSurfaceAgent != NULL)
	{
		_pSurfaceAgent->RequestDelayedDestruction();
		_pSurfaceAgent = NULL;
	}

	if (_pSurfaceFieldAgent != NULL)
	{
		_pSurfaceFieldAgent->RequestDelayedDestruction();
		_pSurfaceFieldAgent = NULL;
	}

	if (_pCurveAgent != NULL)
	{
		_pCurveAgent->RequestDelayedDestruction();
		_pCurveAgent = NULL;
	}

	if (_pCurveFieldAgent != NULL)
	{
		_pCurveFieldAgent->RequestDelayedDestruction();
		_pCurveFieldAgent = NULL;
	}

	_pEditor = NULL;

	_pHSO->Empty();
	_pHSO = NULL;

	if (_pGeneralCls != NULL)
	{
		delete _pGeneralCls;
		_pGeneralCls = NULL;
	}

	if (_lstBUSurface.Size() != 0)
	{
		_lstBUSurface.RemoveAll();
		_lstBUSurface = NULL;
	}

	if (_lstBUCurve.Size() != 0)
	{
		_lstBUCurve.RemoveAll();
		_lstBUCurve = NULL;
	}

	if (_lstAliasSurface.Size() != 0)
	{
		_lstAliasSurface.RemoveAll();
		_lstAliasSurface = NULL;
	}

	if (_lstAliasCurve.Size() != 0)
	{
		_lstAliasCurve.RemoveAll();
		_lstAliasCurve = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestMultiListCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&TestMultiListCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&TestMultiListCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&TestMultiListCmd::ExitCmd,
		NULL);

	//AddAnalyseNotificationCB(_pDlg,
	//	_pDlg->GetDiaOKNotification(),
	//	(CATCommandMethod)&TestMultiListCmd::ActionShowMoreUI,
	//	NULL);

	//SurfaceÑ¡Ôñ
	_pSurfaceAgent = new CATFeatureImportAgent("Select Surface");
	_pSurfaceAgent->SetElementType("CATSurface");
	//_pSurfaceAgent->SetElementType("CATCurve");
	_pSurfaceAgent->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithCSO|CATDlgEngWithPSOHSO|CATDlgEngOneShot);

	//EdgeÑ¡Ôñ
	_pCurveAgent = new CATFeatureImportAgent("Select Edge");
	_pCurveAgent->SetElementType("CATCurve");
	//_pSurfaceAgent->SetElementType("CATCurve");
	_pCurveAgent->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithCSO|CATDlgEngWithPSOHSO|CATDlgEngOneShot);

	_pSurfaceFieldAgent = new CATDialogAgent("Select Surface Field");
	_pSurfaceFieldAgent->AcceptOnNotify(_pDlg->GetMultiListSelect(),
										_pDlg->GetMultiListSelect()->GetListSelectNotification());

	_pCurveFieldAgent = new CATDialogAgent("Select Edge Field");
	_pCurveFieldAgent->AcceptOnNotify(_pDlg->GetMultiListSelect(),
									  _pDlg->GetMultiListSelect()->GetListSelectNotification());

	CATDialogState *pDlgStateSurface = GetInitialState("Select Surface");
	pDlgStateSurface->AddDialogAgent(_pSurfaceAgent);
	pDlgStateSurface->AddDialogAgent(_pSurfaceFieldAgent);
	pDlgStateSurface->AddDialogAgent(_pCurveFieldAgent);

	CATDialogState *pDlgStateEdge = AddDialogState("Select Edge");
	pDlgStateEdge->AddDialogAgent(_pCurveAgent);
	pDlgStateEdge->AddDialogAgent(_pCurveFieldAgent);
	pDlgStateEdge->AddDialogAgent(_pSurfaceFieldAgent);

	AddTransition( pDlgStateSurface, pDlgStateSurface, 
					AndCondition(IsOutputSetCondition (_pSurfaceAgent),
								 Condition((ConditionMethod) &TestMultiListCmd::DecideSurfaceSelect)),
					Action ((ActionMethod) &TestMultiListCmd::ActionSelectSurface));

	AddTransition( pDlgStateEdge, pDlgStateEdge, 
					AndCondition(IsOutputSetCondition (_pCurveAgent),
								Condition((ConditionMethod) &TestMultiListCmd::DecideCurveSelect)),
					Action ((ActionMethod) &TestMultiListCmd::ActionSelectCurve));

	AddTransition( pDlgStateSurface, pDlgStateEdge, 
					AndCondition(IsOutputSetCondition(_pCurveFieldAgent),
								Condition((ConditionMethod) &TestMultiListCmd::DecideCurveSelect)),
					Action ((ActionMethod) &TestMultiListCmd::TransToCurve));

	AddTransition( pDlgStateEdge, pDlgStateSurface, 
					AndCondition(IsOutputSetCondition(_pSurfaceFieldAgent),
								Condition((ConditionMethod) &TestMultiListCmd::DecideSurfaceSelect)),
					Action ((ActionMethod) &TestMultiListCmd::TransToSurface));
}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TestMultiListCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

CATBoolean TestMultiListCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
	return TRUE;
}

CATBoolean TestMultiListCmd::ActionShowMoreUI(void * data)
{
	_pDlg->_Frame001 = new CATDlgFrame(_pDlg, "Frame001", CATDlgGridLayout);
	_pDlg->_Frame001 -> SetGridConstraints(0, 2, 1, 1, 4);
	_pDlg->SetHorizontalAttachment(0,CATDlgTopOrLeft,_pDlg->_Frame001,NULL);
	_pDlg->SetVerticalAttachment(2,CATDlgTopOrLeft,_pDlg->_Frame001,NULL);
	return TRUE;
}

CATBoolean TestMultiListCmd::DecideSurfaceSelect()
{
	if (_lstBUSurface.Size() == _lstBUCurve.Size())
	{
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}

CATBoolean TestMultiListCmd::DecideCurveSelect()
{
	if (_lstBUSurface.Size() > _lstBUCurve.Size())
	{
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}

void TestMultiListCmd::ActionSelectSurface()
{
	//
	CATBaseUnknown *pBUSelect = NULL;
	CATPathElement *pPath = _pSurfaceAgent->GetValue();
	pBUSelect = _pSurfaceAgent->GetElementValue(pPath);

	CATUnicodeString strAlias = _pGeneralCls->GetNameFromBaseUnknownFunc(pBUSelect);

	//
	_lstBUSurface.Append(pBUSelect);
	_lstAliasSurface.Append(strAlias);
	//
	_pDlg->GetMultiListSelect()->ClearLine();
	for (int i=0; i<_lstBUSurface.Size();i++)
	{
		_pDlg->GetMultiListSelect()->SetColumnItem(1,_lstAliasSurface[i+1],i,CATDlgDataAdd);
	}
	for (int i=0; i<_lstBUCurve.Size();i++)
	{
		_pDlg->GetMultiListSelect()->SetColumnItem(2,_lstAliasCurve[i+1],i,CATDlgDataAdd);
	}
	//
	int iTabRow = 0;
	if (_lstBUSurface.Size()>0)
	{
		iTabRow = _lstBUSurface.Size()-1;
	}
	_pDlg->GetMultiListSelect()->SetSelect(&iTabRow,1,1);
	//
	_pSurfaceAgent->InitializeAcquisition();
}

void TestMultiListCmd::ActionSelectCurve()
{
	//
	CATBaseUnknown *pBUSelect = NULL;
	CATPathElement *pPath = _pCurveAgent->GetValue();
	pBUSelect = _pCurveAgent->GetElementValue(pPath);

	CATUnicodeString strAlias = _pGeneralCls->GetNameFromBaseUnknownFunc(pBUSelect);

	//
	_lstBUCurve.Append(pBUSelect);
	_lstAliasCurve.Append(strAlias);
	//
	_pDlg->GetMultiListSelect()->ClearLine();
	for (int i=0; i<_lstBUSurface.Size();i++)
	{
		_pDlg->GetMultiListSelect()->SetColumnItem(1,_lstAliasSurface[i+1],i,CATDlgDataAdd);
	}
	for (int i=0; i<_lstBUCurve.Size();i++)
	{
		_pDlg->GetMultiListSelect()->SetColumnItem(2,_lstAliasCurve[i+1],i,CATDlgDataAdd);
	}
	//
	int iTabRow = 0;
	if (_lstBUCurve.Size()>0)
	{
		iTabRow = _lstBUCurve.Size()-1;
	}
	_pDlg->GetMultiListSelect()->SetSelect(&iTabRow,1,1);
	//
	_pCurveAgent->InitializeAcquisition();
}

void TestMultiListCmd::TransToCurve()
{
	_pSurfaceFieldAgent->InitializeAcquisition();
}

void TestMultiListCmd::TransToSurface()
{
	_pCurveFieldAgent->InitializeAcquisition();
}