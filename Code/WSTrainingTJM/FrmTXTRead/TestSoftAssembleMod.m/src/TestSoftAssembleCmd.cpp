// COPYRIGHT Dassault Systemes 2021
//===================================================================
//
// TestSoftAssembleCmd.cpp
// The state chart based command: TestSoftAssembleCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2021  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestSoftAssembleCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TestSoftAssembleCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestSoftAssembleCmd::TestSoftAssembleCmd() :
  CATStateCommand ("TestSoftAssembleCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,_pDlg(NULL)
,_pProductAgent(NULL),_pProductFieldAgent(NULL)
,_pEditor(NULL)
,_pHSO(NULL)
,_intSelType(0)
,_pGeneralCls(NULL)
{
	_pDlg = new TestSoftAssembleDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pGeneralCls->GetRootProductUpdate(_spiProdRoot);
	if (_spiProdRoot==NULL_var)
	{
		RequestDelayedDestruction();
		return;
	}

	_pEditor = CATFrmEditor::GetCurrentEditor();

	if (NULL != _pEditor)
	{
		_pHSO = _pEditor->GetHSO();
	}

	_pGeneralCls = new GeneralClass();

	InitialDlg();
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestSoftAssembleCmd::~TestSoftAssembleCmd()
{
	if (_pDlg!=NULL)
	{
		_pDlg->RequestDelayedDestruction();
		_pDlg=NULL;
	}

	if (_pProductAgent!=NULL)
	{
		_pProductAgent->Release();
		_pProductAgent=NULL;
	}

	if (_pProductFieldAgent!=NULL)
	{
		_pProductFieldAgent->Release();
		_pProductFieldAgent=NULL;
	}

	_pEditor = NULL;

	if (_pHSO!=NULL)
	{
		_pHSO->Empty();
		_pHSO = NULL;
	}

	if (_pGeneralCls!=NULL)
	{
		delete _pGeneralCls;
		_pGeneralCls=NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestSoftAssembleCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&TestSoftAssembleCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&TestSoftAssembleCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&TestSoftAssembleCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&TestSoftAssembleCmd::ActionOK,
		NULL);

	//Product选择
	_pProductAgent = new CATPathElementAgent("Select Product");
	_pProductAgent->SetElementType("CATIProduct");
	_pProductAgent->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithCSO|CATDlgEngWithPSOHSO|CATDlgEngOneShot);
	CATAcquisitionFilter * pFilterProduct = Filter((FilterMethod) &TestSoftAssembleCmd::CheckSelectedProduct,(void *)NULL);
	_pProductAgent->SetFilter(pFilterProduct);

	_pProductFieldAgent = new CATDialogAgent("Select Product Field");
	_pProductFieldAgent->AcceptOnNotify(_pDlg->GetSelectorListProduct(),
										_pDlg->GetSelectorListProduct()->GetListSelectNotification());

	CATDialogState *pProductState = GetInitialState("Select Product");
	pProductState->AddDialogAgent(_pProductAgent);
	pProductState->AddDialogAgent(_pProductFieldAgent);

	AddTransition(pProductState,pProductState,
		IsOutputSetCondition(_pProductAgent),
		Action((ActionMethod)& TestSoftAssembleCmd::selectProductFunc));

	//==> pProductState
	AddTransition(pProductState,pProductState,
		IsOutputSetCondition(_pProductFieldAgent),
		Action((ActionMethod)& TestSoftAssembleCmd::TransToProductSel));

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TestSoftAssembleCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

CATBoolean TestSoftAssembleCmd::ExitCmd(void * data)
{
	RequestDelayedDestruction();
	return TRUE;
}

CATBoolean TestSoftAssembleCmd::ActionOK(void * data)
{
	_spiProdSel = _spBUSel;
	if (_spiProdSel==NULL_var)
	{
		return FALSE;
	}

	CATListValCATBaseUnknown_var* lstChildrenProd = _spiProdSel->GetChildren();
	if (lstChildrenProd==NULL)
	{
		return FALSE;
	}

	//取第一个子product操作
	CATIProduct_var spiProdChild = (*lstChildrenProd)[1];
	if (spiProdChild==NULL_var)
	{
		return FALSE;
	}

	CATMathTransformation transFather(CATMathVector(100,100,100));
	SetProductPosition(_spiProdSel,_spiProdRoot,transFather);

	CATMathTransformation transChild(CATMathVector(100,100,100));
	SetProductPosition(spiProdChild,_spiProdSel,transChild);

	CATIBlockMovable_var spiBlockMove = _spiProdRoot;
	if (spiBlockMove!=NULL_var)
	{
		spiBlockMove->MakeRigidAssembly(_spiProdSel);
	}


	return TRUE;
}

CATBoolean TestSoftAssembleCmd::CheckSelectedProduct(void * data)
{

	if (_intSelType == 0)
	{
		CATBaseUnknown *pBUSelect = NULL;
		CATIProduct_var spiProdSelect = NULL_var;
		_pGeneralCls->TransferSelectToBU(_pProductAgent,pBUSelect,spiProdSelect);
		CATIProduct_var spiProd = pBUSelect;
		if (spiProd!=NULL)
		{
			if (_pGeneralCls->IsProduct(spiProd)&&spiProd!=_spiProdRoot)
			{
				return TRUE;
			}
		}
	}

	return FALSE;
}

void TestSoftAssembleCmd::selectProductFunc(void * data)
{
	CATBaseUnknown *pBUSelect = NULL;
	CATIProduct_var spiProdSelect = NULL_var;
	_pGeneralCls->TransferSelectToBU(_pProductAgent,pBUSelect,spiProdSelect);
	if (pBUSelect == NULL || spiProdSelect == NULL_var)
	{
		_pProductAgent->InitializeAcquisition();
		return;
	}
	_pGeneralCls->SetHighlight(pBUSelect);
	if (_intSelType==0)
	{
		_spBUSel = pBUSelect;

		_pDlg->GetSelectorListProduct()->ClearLine();
		CATUnicodeString strAlias = _pGeneralCls->GetNameFromBaseUnknownFunc(pBUSelect);
		_pDlg->GetSelectorListProduct()->SetLine(strAlias,-1,CATDlgDataAdd);
		int iTabRow = 0;
		_pDlg->GetSelectorListProduct()->SetSelect(&iTabRow,1);
	}

	_pProductAgent->InitializeAcquisition();
}

void TestSoftAssembleCmd::TransToProductSel(void * data)
{
	_intSelType = 0;

	_pProductFieldAgent->InitializeAcquisition();

	if (_pHSO!=NULL)
	{
		_pHSO->Empty();
	}
	
	_pGeneralCls->SetHighlight(_spBUSel,_pEditor,_pHSO);
}

void TestSoftAssembleCmd::InitialDlg()
{
	//SelectorList
	CATUnicodeString strDefault="No Selection";
	_pDlg->GetSelectorListProduct()->SetLine(strDefault);
	int iTabRow=0;
	_pDlg->GetSelectorListProduct()->SetSelect(&iTabRow,1);
}

void TestSoftAssembleCmd::SetProductPosition(CATIProduct_var ispiProd,CATIProduct_var ispiProdContext,CATMathTransformation iTrans)
{
	CATIMovable_var spiMovable = ispiProd;
	if (spiMovable!=NULL_var)
	{
		spiMovable->SetPosition(iTrans,ispiProdContext);
	}
}