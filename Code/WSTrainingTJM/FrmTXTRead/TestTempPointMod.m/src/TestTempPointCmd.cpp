// COPYRIGHT Dassault Systemes 2019
//===================================================================
//
// TestTempPointCmd.cpp
// The state chart based command: TestTempPointCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2019  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestTempPointCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TestTempPointCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestTempPointCmd::TestTempPointCmd() :
  CATStateCommand ("TestTempPointCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,_pGeneralCls(NULL)
,_pViewerFeedbackManager(NULL)
,_pSurfaceAgent(NULL),_pSurfaceFieldAgent(NULL)
{
	_pDlg = NULL;
	_pDlg = new TestTempPointDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pGeneralCls = new GeneralClass();

	_pISO = NULL;

	_pEditor = CATFrmEditor::GetCurrentEditor();
	_pHSO = NULL;
	if (NULL != _pEditor)
	{
		_pHSO = _pEditor->GetHSO();
		_pISO = _pEditor->GetISO();
	}

	_pViewerFeedbackManager = new YFAirventViewerFeedbackManager();
	_pViewerFeedbackManager->SetViewerFeedbackOn();
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestTempPointCmd::~TestTempPointCmd()
{
	if (_pDlg != NULL)
	{
		_pDlg->RequestDelayedDestruction();
		_pDlg = NULL;
	}

	if (_pSurfaceAgent != NULL)
	{
		_pSurfaceAgent->RequestDelayedDestruction();
		_pSurfaceAgent = NULL;
	}

	if (_pSurfaceFieldAgent != NULL)
	{
		_pSurfaceFieldAgent->RequestDelayedDestruction();
		_pSurfaceFieldAgent = NULL;
	}

	_pISO->Empty();
	_pISO = NULL;

	_pEditor = NULL;

	_pHSO->Empty();
	_pHSO = NULL;

	if (_pGeneralCls != NULL)
	{
		delete _pGeneralCls;
		_pGeneralCls = NULL;
	}

	_pViewerFeedbackManager->SetViewerFeedbackOff();
	if (_pViewerFeedbackManager != NULL)
	{
		_pViewerFeedbackManager->Release();
		_pViewerFeedbackManager = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestTempPointCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&TestTempPointCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&TestTempPointCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&TestTempPointCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&TestTempPointCmd::ExitCmd,
		NULL);

	//Surface选择
	_pSurfaceAgent = new CATFeatureImportAgent("Select Surface");
	_pSurfaceAgent->SetElementType("CATSurface");
	//_pSurfaceAgent->SetElementType("CATCurve");
	_pSurfaceAgent->SetBehavior(CATDlgEngWithPrevaluation|CATDlgEngWithCSO|CATDlgEngWithPSOHSO|CATDlgEngOneShot);

	_pSurfaceFieldAgent = new CATDialogAgent("Select Surface Field");
	_pSurfaceFieldAgent->AcceptOnNotify(_pDlg->GetSelectorListSelect(),
		_pDlg->GetSelectorListSelect()->GetListSelectNotification());

	CATDialogState *pDlgStateSurface = GetInitialState("Select");
	pDlgStateSurface->AddDialogAgent(_pSurfaceAgent);
	pDlgStateSurface->AddDialogAgent(_pSurfaceFieldAgent);

	AddTransition( pDlgStateSurface, pDlgStateSurface, 
		IsOutputSetCondition (_pSurfaceAgent),
		Action ((ActionMethod) &TestTempPointCmd::ActionSelect));

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TestTempPointCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}


CATBoolean TestTempPointCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
	return TRUE;
}

void TestTempPointCmd::ActionSelect(void * data)
{
	//
	_pHSO->Empty();
	_pISO->Empty();

	//
	CATBaseUnknown *pBUSelect = NULL;
	CATPathElement *pPath = _pSurfaceAgent->GetValue();
	pBUSelect = _pSurfaceAgent->GetElementValue(pPath);

	CATUnicodeString strAlias = _pGeneralCls->GetNameFromBaseUnknownFunc(pBUSelect);

	_pDlg->GetSelectorListSelect()->ClearLine();

	_pDlg->GetSelectorListSelect()->SetLine(strAlias,-1,CATDlgDataAdd);

	int iTabRow = 0;
	_pDlg->GetSelectorListSelect()->SetSelect(&iTabRow,1);

	//先获取鼠标拾取点，全局，用于虚拟点位置标识，实际用途按需转为局部点
	CATMathPoint ptScreenGlobal =_pViewerFeedbackManager->GetScreenPickedPoint();
	
	//模型上画出虚拟点，CATISO高亮
	DumITempPoint *piTempPoint = NULL;
	HRESULT rc = ::CATInstantiateComponent("DumTempPointComp", IID_DumITempPoint, (void**)&piTempPoint);
	if (SUCCEEDED(rc) && piTempPoint != NULL)
	{
		piTempPoint->SetDatas(&ptScreenGlobal);
		CATISpecObject_var spiSpecTempPoint = piTempPoint;
		_pISO->AddElement(spiSpecTempPoint);
	}

	//
	//_pGeneralCls->SetHighlight(pBUSelect);
	_pGeneralCls->SetHighlight(pBUSelect,_pEditor,_pHSO);	//此处无法用VB高亮曲面，可能由于上面用了ISO高亮了虚拟点
	//
	//ShowResults(pBUSelect);
	//PrintVariousInfo(pBUSelect);

	_pSurfaceAgent->InitializeAcquisition();
}