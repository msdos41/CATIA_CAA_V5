// COPYRIGHT Dassault Systemes 2020
//===================================================================
//
// TestTessellationCmd.h
// The state chart based command: TestTessellationCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//CAA2 Wizard Generation Report
//   STATECOMMAND
//End CAA2 Wizard Generation Report
//
//  Mar 2020  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#ifndef TestTessellationCmd_H
#define TestTessellationCmd_H

#include "CATStateCommand.h"
#include "CATBoolean.h"

#include "TestTessellationDlg.h"
#include "GeneralClass.h"
#include "CATBodyTessellator.h"
#include "CATSurfaceTessellator.h"

#include "DumITempPoint.h"
#include "DumITempArrow.h"
#include "DumITempPlane.h"
#include "DumITempFace.h"
#include "DumITempLine.h"

#include "CATTessPointIter.h"
#include "CATTessStripeIter.h"
#include "CATTessFanIter.h"
#include "CATTessPolyIter.h"
#include "CATTessTrianIter.h"
#include "CATCellTessellator.h"

#include "CATVisManager.h"

class CATIndicationAgent;

//----------------------------------------------------------------------

/**
 * Describe your command here.
 * <p>
 * Using this prefered syntax will enable mkdoc to document your class.
 * <p>
 * refer to programming resources of Dialog engine framework.
 * (consult base class description).
 */
class TestTessellationCmd: public CATStateCommand
{
  // Allows customization/internationalization of command's messages
  // ---------------------------------------------------------------
  DeclareResource( TestTessellationCmd, CATStateCommand )

  public:

  TestTessellationCmd();
  virtual ~TestTessellationCmd();

    /**
     * Defines the command automata.
     * <br>
     * <i>(states, transitions and agents)</i>
     */
  virtual void     BuildGraph();

    /**
     * Action associated to state transitions.
     */
  virtual CATBoolean  ActionOne(void * data);
  CATBoolean ExitCmd(void * data);
  CATBoolean ActionOK(void * data);
  void ActionSurfaceSelect(void * data);
  HRESULT CreateTessellation(CATBaseUnknown_var ispBUElement);
  HRESULT CreateTessellation(CATBaseUnknown_var ispBUElement,CAT3DRep *&op3DRep);
  HRESULT Get3DRep(CATPathElement *iObject, CAT3DRep ** oRep,CATRepPath &oRepPath);
  HRESULT GetPathElemFromBU(CATBaseUnknown_var ispBU,CATFrmEditor *ipEditor,CATPathElement *&opPathElem);
  HRESULT Get3DRepFromBU(CATBaseUnknown_var ispBU,CAT3DRep **op3DRep);
  HRESULT GetRepFromBU(CATBaseUnknown_var ispBU,CATRep **opRep);
  HRESULT GetRepFromBU(CATBaseUnknown *ipBU, CATFrmEditor *ipEditor,CATRep ** oRep,CATRepPath &oRepPath);
  CATBoolean ActionRightClickClear(void * data);
  HRESULT CreateTessellation2(CATBaseUnknown_var ispBUElement,double idStep,double idSag);
  void InitialDlg();
private:

	  TestTessellationDlg			*_pDlg;

	  GeneralClass					*_pGeneralCls;

	  CATFeatureImportAgent			*_pSurfaceAgent;

	  CATDialogAgent				*_pSurfaceFieldAgent;

	  CATBaseUnknown_var			_spBUSurface;

	  CATHSO						*_pHSO;

	  CATISO						*_pISO;

	  CATFrmEditor					*_pEditor;

	  CATViewer						*_pViewer;

	  CAT3DBagRep					*_p3DBagRep;

	  double						_dStep;

	  double						_dSag;

};

//----------------------------------------------------------------------

#endif
