// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// WriteExcelCmd.h
// The state chart based command: WriteExcelCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//CAA2 Wizard Generation Report
//   STATECOMMAND
//End CAA2 Wizard Generation Report
//
//  Dec 2018  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#ifndef WriteExcelCmd_H
#define WriteExcelCmd_H

#include "CATStateCommand.h"
#include "CATBoolean.h"
#include "WriteExcelDlg.h"
#include "GeneralClass.h"
#include "YFExcelClass.h"

#include "iostream.h"

#include "CATFrmEditor.h"
#include "CATDocument.h"
#include "CATIDocRoots.h"
#include "CATLISTV_CATBaseUnknown.h"
#include "CATIProduct.h"
#include "CATListOfCATUnicodeString.h"
#include "CATIDocId.h"

#include "CATILinkableObject.h"
#include "CATIContainerOfDocument.h"
#include "CATIContainer.h"

#include "ClsOfExcelOperation.h"
#include "ExcelRW.h"

#include "CATGetEnvValue.h"

class CATIndicationAgent;

//----------------------------------------------------------------------

/**
 * Describe your command here.
 * <p>
 * Using this prefered syntax will enable mkdoc to document your class.
 * <p>
 * refer to programming resources of Dialog engine framework.
 * (consult base class description).
 */
class WriteExcelCmd: public CATStateCommand
{
  // Allows customization/internationalization of command's messages
  // ---------------------------------------------------------------
  DeclareResource( WriteExcelCmd, CATStateCommand )

  public:

  WriteExcelCmd();
  virtual ~WriteExcelCmd();

    /**
     * Defines the command automata.
     * <br>
     * <i>(states, transitions and agents)</i>
     */
  virtual void     BuildGraph();

    /**
     * Action associated to state transitions.
     */
  virtual CATBoolean  ActionOne(void * data);

  void ExitCmd(void * data);

  void ReadProdAndWriteExcel(void * data);

  void GetSubList(CATIProduct *piRootProduct);

  int GetLevel(CATIProduct_var spChildProduct);

  //int CountPart(CATListValCATUnicodeString lstParts, CATUnicodeString strName);
  //CATUnicodeString CountPart(CATListValCATUnicodeString lstParts, CATUnicodeString strName);

  void CountNumber(CATListValCATUnicodeString lstParts, CATUnicodeString strName, CATUnicodeString &strNum);

  void GetSubPartAndNum(CATIProduct *piRootProduct, CATListValCATUnicodeString &lstParts, CATListValCATUnicodeString &lstCount);

  void CreateIndex(CATListValCATUnicodeString &lstIndex, int iNumber);

  HRESULT GetResourseFile(CATUnicodeString &CATEnvPath,CATUnicodeString FileFullName,CATUnicodeString folderName);

  CATBoolean IsProduct(CATIProduct_var ispiPrd);

  void SelectDirectory(void * data);

  void ShowSavePath(void * data);

  void ActionOK(void * data);

  void FileWindowExitCmd(void * data);

  void ReadExcel();

private:

  CATIndicationAgent	* _Indication;

  WriteExcelDlg * _pDlg;

  CATDlgFile * _pFileWindow;

  CATUnicodeString _strSavePath;
};

//----------------------------------------------------------------------

#endif
