// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// WriteExcelCmd.cpp
// The state chart based command: WriteExcelCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Dec 2018  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "WriteExcelCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"






CATCreateClass( WriteExcelCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
WriteExcelCmd::WriteExcelCmd() :
  CATStateCommand ("WriteExcelCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_Indication(NULL)
{
	_pDlg = NULL;
	_pDlg = new WriteExcelDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pFileWindow = NULL;

	_strSavePath = "";
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
WriteExcelCmd::~WriteExcelCmd()
{
   if (_Indication != NULL) 
      _Indication->RequestDelayedDestruction();

   if (_pDlg != NULL)
   {
	   _pDlg->RequestDelayedDestruction();
	   _pDlg = NULL;
   }

   if (_pFileWindow != NULL)
   {
	   _pFileWindow->RequestDelayedDestruction();
	   _pFileWindow = NULL;
   }
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void WriteExcelCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&WriteExcelCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&WriteExcelCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&WriteExcelCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&WriteExcelCmd::ActionOK,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButtonSelectPath(),
		_pDlg->GetPushButtonSelectPath()->GetPushBActivateNotification(),
		(CATCommandMethod)&WriteExcelCmd::SelectDirectory,
		NULL);

	AddAnalyseNotificationCB(_pDlg->GetPushButtonReadExcel(),
		_pDlg->GetPushButtonReadExcel()->GetPushBActivateNotification(),
		(CATCommandMethod)&WriteExcelCmd::ReadExcel,
		NULL);

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean WriteExcelCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}


void WriteExcelCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
}

void WriteExcelCmd::ActionOK(void * data)
{
	ReadProdAndWriteExcel(data);
}

void WriteExcelCmd::SelectDirectory(void * data)
{
	//新建窗口
	_pFileWindow = new CATDlgFile(_pDlg,"Create new Excel",CATDlgFileSave);
	_pFileWindow->SetVisibility(CATDlgShow);
	//过滤Excel文档
	CATUnicodeString TypeDescription = "Excel Files";
	CATString TypeExtension = "*.xlsx";
	_pFileWindow->SetFilterStrings(&TypeDescription,&TypeExtension,1);
	//点击save按钮以后的动作
	AddAnalyseNotificationCB(_pFileWindow,
		_pFileWindow->GetDiaOKNotification(),
		(CATCommandMethod)&WriteExcelCmd::ShowSavePath,
		NULL);
	//点击cancel后的动作
	AddAnalyseNotificationCB(_pFileWindow,
		_pFileWindow->GetDiaCANCELNotification(),
		(CATCommandMethod)&WriteExcelCmd::FileWindowExitCmd,
		NULL);

	return;
}

void WriteExcelCmd::FileWindowExitCmd(void * data)
{
	_pFileWindow->RequestDelayedDestruction();
	_pFileWindow = NULL;
}

void WriteExcelCmd::ShowSavePath(void * data)
{
	//把旧的地址显示清空

	_pDlg->GetEditorSavePath()->ClearLine();
	//显示新的选择地址
	_pFileWindow->GetSelection(_strSavePath);
	_pDlg->GetEditorSavePath()->SetText(_strSavePath);

	//关闭File窗口
	FileWindowExitCmd(data);

}

void WriteExcelCmd::ReadExcel()
{
	GeneralClass *pGeneralCls = new GeneralClass();
	//CATListOfCATUnicodeString lstContent = NULL;
	//pGeneralCls->GetStringOfInputSheet(_strSavePath),8,CAAUStringBuildFromChar("级号/Level"),lstContent);
	//if (lstContent.Size() != 0)
	//{
	//	for (int i=1; i <= lstContent.Size(); i++)
	//	{
	//		if (-1 != lstContent[i].SearchSubString(CAAUStringBuildFromChar("仪表板总成")))
	//		{
	//			cout<<"-----Matching Contents Found!-------------"<<endl;
	//			cout<<lstContent[i]<<endl;
	//		}
	//	}
	//}

	/*
	CATUnicodeString strCellValue = "";
	long  MergeRowCount;
	long  MergeColumnCount;
	long  MergeStartRow; 
	long  MergeStartColumn;

	pGeneralCls->GetCellValueAndMergeInfo(_strSavePath,8,1, strCellValue,MergeRowCount,  MergeColumnCount,  MergeStartRow,  MergeStartColumn);
	if (-1 != strCellValue.SearchSubString(CAAUStringBuildFromChar("级号/Level")))
	{
		cout<<strCellValue<<endl;
	}

	*/

	CATListOfCATUnicodeString lstContents = NULL;
	pGeneralCls->GetRowContents(_strSavePath,8,lstContents);
	int iCount = lstContents.Size();
	long lPartNoIndex = 0;
	if (iCount != 0)
	{
		for (int i=1; i<=iCount; i++)
		{
			CATUnicodeString strContent = lstContents[i];
			if (strContent == CAAUStringBuildFromChar("级号/Level"))
			{
				cout<<i<<"   "<<CAAUStringBuildFromChar("级号/Level")<<endl;
				continue;
			}
			else if (-1 != strContent.SearchSubString(CAAUStringBuildFromChar("材料名称")))
			{
				lPartNoIndex = i;
				cout<<i<<"   "<<CAAUStringBuildFromChar("yfai part no.")<<endl;
				continue;
			}
			else if (-1 != strContent.SearchSubString(CAAUStringBuildFromChar("版本号\n（延锋）")))
			{
				cout<<i<<"   "<<CAAUStringBuildFromChar("yfai part no.")<<endl;
				continue;
			}
		}
	}
	if (lPartNoIndex != 0)
	{
		CATListOfCATUnicodeString lstColContents = NULL;
		pGeneralCls->GetColumnContents(_strSavePath,lPartNoIndex,lstColContents);
		int iCount = lstColContents.Size();
		if (iCount != 0)
		{
			for (int i=1; i <= iCount; i++)
			{
				cout<<i<<" "<<lstColContents[i]<<endl;
			}
		}
	}
}

void WriteExcelCmd::ReadProdAndWriteExcel(void * data)
{
	//获取Document
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor == NULL)
	{
		return;
	}
	CATDocument *pDoc = pEditor->GetDocument();
	if (pDoc == NULL)
	{
		return;
	}

	//获取根元素集合的第一个，就是根product,最终要转到CATIProduct
	CATIDocRoots *piDocRootsOnDoc = NULL;
	HRESULT rc = pDoc->QueryInterface(IID_CATIDocRoots,(void**)&piDocRootsOnDoc);
	if (FAILED(rc))
	{
		return;
	}
	CATListValCATBaseUnknown_var *pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct = NULL_var;
	if (pRootProducts->Size())
	{
		spRootProduct = (*pRootProducts)[1];
		delete pRootProducts;
		pRootProducts = NULL;
	}

	piDocRootsOnDoc->Release();

	CATIProduct *piProductOnRoot = NULL;
	rc = spRootProduct->QueryInterface(IID_CATIProduct, (void**)&piProductOnRoot);
	if (FAILED(rc))
	{
		return;
	}

	cout<<"0     "<<piProductOnRoot->GetPartNumber()<<endl;

	CATIProduct_var spFatherOnRoot = piProductOnRoot->GetFatherProduct();

	if (spFatherOnRoot == NULL_var)
	{
		cout<<"root product no father"<<endl;
	}

	//对应Excel表中的3列分别建立一个list
	CATListValCATUnicodeString lstPart = NULL;
	CATListValCATUnicodeString lstCount = NULL;
	CATListValCATUnicodeString lstIndex = NULL;
	//获得零件名称和对应数量
	GetSubPartAndNum(piProductOnRoot,lstPart,lstCount);
	//生成编号
	CreateIndex(lstIndex,lstPart.Size());
	
	for (int i = 1;i<= lstPart.Size(); i++)
	{
		cout<<lstIndex[i]<<"     "<<lstPart[i]<<"  Number:  "<<lstCount[i]<<endl;
	}
	//定义excel保存路径
	CATUnicodeString strSavePath = _strSavePath;

	//定义Excel模板路径
	CATUnicodeString strTemplatePath = "";
	//获得Excel模板路径
	rc = GetResourseFile(strTemplatePath,"Template.xlsx","Template");
	if (strTemplatePath == "")
	{
		return;
	}
	
	ClsOfExcelOperation *pExcelOperation = new ClsOfExcelOperation(strTemplatePath);
	if (pExcelOperation == NULL)
	{
		return;
	}
	//模板中写入3列数据并且另存为新的excel
	rc = pExcelOperation->WriteAsNewExcel(strTemplatePath,strSavePath,lstIndex,lstPart,lstCount); //输入数据全部居中要写在Excel另存为之前，而且excel必须打开

	if (pExcelOperation != NULL)
	{
		delete pExcelOperation;
		pExcelOperation = NULL;
	}
	this->RequestDelayedDestruction();
	
	////获得所有Children
	//CATListValCATBaseUnknown_var *listChildren = piProductOnRoot->GetAllChildren();
	////piProductOnRoot->Release();
	//if (listChildren == NULL)
	//{
	//	return;
	//}

	////遍历所有Children
	//CATIProduct_var spChild = NULL_var;
	//for (int i = 1; i<=listChildren->Size();i++)
	//{
	//	spChild = (*listChildren)[i];
	//	CATUnicodeString partNum = spChild->GetPartNumber();
	//	CATIProduct_var spFather = spChild->GetFatherProduct();
	//	int iLevel =1;
	//	while(spFather != spRootProduct)
	//	{
	//		spFather = spFather->GetFatherProduct();
	//		iLevel++;
	//	}
	//	CATUnicodeString fatherNum = spFather->GetPartNumber();
	//	cout<<iLevel<<"     "<<partNum<<"   Father:   "<<fatherNum<<endl;
	//}
	//delete listChildren;
	//listChildren = NULL;

	////获取直属Children
	//CATListValCATBaseUnknown_var *listDirectChildren = piProductOnRoot->GetChildren();
	//if (listDirectChildren == NULL)
	//{
	//	return;
	//}
	//CATIProduct_var spDirectChild = NULL_var;
	//for (int i=1; i<=listDirectChildren->Size(); i++)
	//{
	//	spDirectChild = (*listDirectChildren)[i]
	//}

}

//通过递归方法从上往下获取子零件
void WriteExcelCmd::GetSubList(CATIProduct *piRootProduct)
{
	CATListValCATBaseUnknown_var *listDirectChildren = piRootProduct->GetChildren();
	if (listDirectChildren == NULL)
	{
		return;
	}
	CATIProduct_var spDirectChild = NULL_var;
	for (int i=1; i<=listDirectChildren->Size(); i++)
	{

		spDirectChild = (*listDirectChildren)[i];
		int iLevel = GetLevel(spDirectChild);
		cout<<iLevel<<"     "<<spDirectChild->GetPartNumber()<<endl;
		CATIProduct *piDirectChild = NULL;
		HRESULT rc = spDirectChild->QueryInterface(IID_CATIProduct, (void**)&piDirectChild);
		if (FAILED(rc))
		{
			return;
		}
		GetSubList(piDirectChild);
	}
	
	return;
}



//得到part零件列表和数量
void WriteExcelCmd::GetSubPartAndNum(CATIProduct *piRootProduct, CATListValCATUnicodeString &lstParts, CATListValCATUnicodeString &lstCount)
{
	CATListValCATBaseUnknown_var *lstChildren = piRootProduct->GetAllChildren();
	if (lstChildren == NULL)
	{
		return;
	}

	CATIProduct_var spChild = NULL_var;
	CATListValCATUnicodeString lstAllParts = NULL;
	lstParts = NULL;
	lstCount = NULL;

	for (int i = 1; i <= lstChildren->Size(); i++)
	{
		spChild = (*lstChildren)[i];
		//CATIProduct_var spCheckPart = spChild->AddProduct("111");
		if (FALSE == IsProduct(spChild))
		{
			CATUnicodeString strName = spChild->GetPartNumber();
			lstAllParts.Append(strName);
			int iOccur = lstParts.NbOccur(strName);
			if (iOccur == 0)
			{
				lstParts.Append(strName);
			}
		}
		//else
		//{
		//	spChild->RemoveProduct(spCheckPart);
		//}

	}

	for (int j = 1; j<= lstParts.Size(); j++)
	{
		CATUnicodeString strCountElement;
		CountNumber(lstAllParts,(lstParts)[j], strCountElement);
		lstCount.Append(strCountElement);
	}

	return;
}

//获取元素个数
void WriteExcelCmd::CountNumber(CATListValCATUnicodeString lstParts, CATUnicodeString strName, CATUnicodeString &strNum)
{
	int iCount = 0;
	for (int i = 1; i <= lstParts.Size(); i++)
	{
		if (strName == lstParts[i])
		{
			iCount++;
		}
	}
	CATUnicodeString strCount = "";
	int iSucceed = strCount.BuildFromNum(iCount);
	if (iSucceed != 0)
	{
		strNum = strCount;
	}
	return;
}


//生成序号
void WriteExcelCmd::CreateIndex(CATListValCATUnicodeString &lstIndex, int iNumber)
{
	lstIndex = NULL;
	for (int i=1; i<= iNumber;i++)
	{
		CATUnicodeString strIndex = "";
		int iSucceed = strIndex.BuildFromNum(i);
		if (iSucceed != 0)
		{
			lstIndex.Append(strIndex);
		}
	}
	return;
}

////通过递归方法从上往下获取子零件
//void WriteExcelCmd::GetSubListPartNum(CATIProduct *piRootProduct,CATListValCATUnicodeString &ListOfStr)
//{
//	CATListValCATBaseUnknown_var *listDirectChildren = piRootProduct->GetChildren();
//	if (listDirectChildren == NULL)
//	{
//		return;
//	}
//	CATIProduct_var spDirectChild = NULL_var;
//	int Size = 0;
//	CATBoolean IsSame = FALSE;
//	for (int i=1; i<=listDirectChildren->Size(); i++)
//	{
//
//			
//		spDirectChild = (*listDirectChildren)[i];
//		CATUnicodeString strPartNum = spDirectChild->GetPartNumber();
//		if (DOCTYPE = "CATPart")
//		{
//			
//				
//		}
//		if (DOCTYPE = "CATProduct")
//		{
//			GetSubList(piDirectChild);
//		}
//		int iLevel = GetLevel(spDirectChild);
//
//		
//		if (ListOfStr == NULL)
//		{
//			ListOfStr.Append(strPartNum);
//		}
//		Size =  ListOfStr.NbOccur(strPartNum);
//
//
//		cout<<iLevel<<"     "<<spDirectChild->GetPartNumber()<<endl;
//		CATIProduct *piDirectChild = NULL;
//		HRESULT rc = spDirectChild->QueryInterface(IID_CATIProduct, (void**)&piDirectChild);
//		if (FAILED(rc))
//		{
//			return;
//		}
//		
//	}
//
//	return;
//}

//获取零件层级
int WriteExcelCmd::GetLevel(CATIProduct_var spChildProduct)
{
	int iLevel = 0;
	while(spChildProduct->GetFatherProduct()!= NULL_var)
	{
		spChildProduct = spChildProduct->GetFatherProduct();
		iLevel++;
	}

	return iLevel;
}

//判断是否为PRD check if is a product
CATBoolean WriteExcelCmd::IsProduct(CATIProduct_var ispiPrd)
{
	HRESULT rc = S_OK;

	CATBoolean isProduct=FALSE;

	CATIProduct *piPrd=NULL;
	rc = ispiPrd->QueryInterface(IID_CATIProduct,(void **)&piPrd);

	CATIProduct_var spRefPrd=ispiPrd->GetReferenceProduct();
	piPrd->Release();  piPrd = NULL;

	if (spRefPrd==NULL_var)
	{
		isProduct = TRUE;
		cout<<"==>Get ReferenceProduct failed"<<endl;
		return isProduct;
	}

	CATILinkableObject *piLinkObj=NULL;
	rc=spRefPrd->QueryInterface(IID_CATILinkableObject,(void **)&piLinkObj);
	if( FAILED(rc) || !piLinkObj ) 
	{
		cout << "==> Get CATILinkableObject error !" << endl;
		return isProduct;
	}

	CATDocument *pDoc=piLinkObj->GetDocument();
	piLinkObj->Release();  piLinkObj = NULL;
	if( !pDoc ) 
	{
		cout << "==> Get CATDocument error !" << endl;
		return isProduct;
	}

	CATIDocId *pDocID;
	CATUnicodeString typeDoc="";
	rc = pDoc->GetDocId(&pDocID);
	if( !(FAILED(rc)) )
		rc = pDocID->GetType(typeDoc);
	//cout << " ==> The type of document is: " << typeDoc << endl;

	if( typeDoc == "CATProduct" )
		isProduct = TRUE;

	return isProduct;
}


//获取模板Excel的路径
HRESULT WriteExcelCmd::GetResourseFile(CATUnicodeString &CATEnvPath,CATUnicodeString FileFullName,CATUnicodeString folderName)
{
	if(CATUnicodeString("") == FileFullName)
	{
		return E_FAIL;
	}

	//从环境变量中获取路径
	CATUnicodeString strSearchPath("");
	char* value = NULL;
	if ( CATLibSuccess == CATGetEnvValue("CATGraphicPath", &value ))//通过读取环境变量中参数值
	{
		strSearchPath = value;
		CATUnicodeString strName = "";
		strName.Append(folderName);
		strName.Append("\\");
		strName.Append(FileFullName);
		const char * pFilePath = ::CATFindPath(strName,value);	  

		if (value!=NULL)
		{
			delete value;
			value = NULL;
		}
		CATEnvPath = pFilePath;
		return S_OK;
	}
	else
	{		 
		return E_FAIL;
	}
}