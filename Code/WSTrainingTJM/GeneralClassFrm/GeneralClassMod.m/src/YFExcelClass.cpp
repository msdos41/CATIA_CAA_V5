// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// YFExcelClass.cpp
// Header definition of YFExcelClass
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Aug 2018  Creation: Code generated by the CAA wizard  70908
//===================================================================
#include "YFExcelClass.h"

COleVariant covOptional((long)DISP_E_PARAMNOTFOUND, VT_ERROR);
 
CATImplementClass( YFExcelClass,
                   Implementation, 
                   CATBaseUnknown,
                   CATNull );
 
//-----------------------------------------------------------------------------
// YFExcelClass : constructor
//-----------------------------------------------------------------------------
YFExcelClass::YFExcelClass():
    CATBaseUnknown()
{
	if (!m_ExlApp.CreateDispatch( _T( "Excel.Application" ), NULL ) )
	{
		::MessageBox( NULL, _T( "创建Excel服务失败！" ), _T( "错误提示！" ), MB_OK | MB_ICONERROR);
		exit(1);
	}	

	bSheet = false;
	m_ExlApp.SetVisible(FALSE); //FALSE
	m_ExlApp.SetUserControl(TRUE);
}

//-----------------------------------------------------------------------------
// YFExcelClass : destructor
//-----------------------------------------------------------------------------
YFExcelClass::~YFExcelClass()
{
	m_ExlRge.ReleaseDispatch(); 

	m_ExlSheet.ReleaseDispatch(); 
	m_ExlSheets.ReleaseDispatch(); 

	m_ExlBook.ReleaseDispatch(); 
	m_ExlBooks.ReleaseDispatch(); 

	m_ExlApp.Quit(); //此句代码和下一句代码顺序不能相反，否则会造成EXCEL进程不退出
	m_ExlApp.ReleaseDispatch(); 
}
 
//-----------------------------------------------------------------------------
// YFExcelClass : copy constructor
//-----------------------------------------------------------------------------
YFExcelClass::YFExcelClass(YFExcelClass& original):
   CATBaseUnknown(original)
{
}
 
//-----------------------------------------------------------------------------
// YFExcelClass : equal operator
//-----------------------------------------------------------------------------
YFExcelClass& YFExcelClass::operator=(YFExcelClass& original)
{
   CATBaseUnknown::operator=(original);
   return *this;
}
 
//描述：打开Excel文件  
//输入：CATUnicodeString路径
//输出：CATBoolean
//返回：CATBoolean
CATBoolean YFExcelClass::OpenExcel(CATUnicodeString ExcelPath)
{
	//判断文件是否存在
	char strchar[1000];
	CAAUStringConvertToChar(ExcelPath,strchar); 
	if( (_access(strchar, 0 )) == -1 )
	{
		cout<<"文件不存在"<<endl;
		return FALSE;
	}
	CString strFileName=strchar;
	m_ExlBooks.AttachDispatch(m_ExlApp.GetWorkbooks(),true);
	m_ExlBook.AttachDispatch(m_ExlBooks.Open(strFileName, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing));

	//得到Worksheets 
	m_ExlSheets.AttachDispatch(m_ExlBook.GetWorksheets(),true);

	//得到活跃的sheet
	m_ExlSheet.AttachDispatch(m_ExlBook.GetActiveSheet()); 
	long index = m_ExlSheet.GetIndex();
	//SetSheet(index);
	return TRUE;
}

//描述：得到sheet表名称 
//输入：int序号
//输出：CATUnicodeString
//返回：CATUnicodeString
CATUnicodeString YFExcelClass::GetSheetName(int index)
{
	CATUnicodeString strName;
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(index))));
	CString strSheetName = m_ExlSheet.GetName();

	strName.BuildFromUTF16(strSheetName.GetBuffer(strSheetName.GetLength()), strSheetName.GetLength());
	strSheetName.ReleaseBuffer();
	return strName;
}

//描述：获得已经使用的行数 
//输入：
//输出：int
//返回：int
int YFExcelClass::GetUsedRowNum()
{
	Range usedRange;
	usedRange.AttachDispatch(m_ExlSheet.GetUsedRange());
	m_ExlRge.AttachDispatch(usedRange.GetRows());
	long iRowNum=m_ExlRge.GetCount();  
	usedRange.ReleaseDispatch();
	return (int)iRowNum;
}

//描述：获得已经使用的列数 
//输入：
//输出：int
//返回：int
int YFExcelClass::GetUsedColNum()
{
	Range usedRange;
	usedRange.AttachDispatch(m_ExlSheet.GetUsedRange());
	m_ExlRge.AttachDispatch(usedRange.GetColumns());
	long iColNum=m_ExlRge.GetCount();  
	usedRange.ReleaseDispatch();
	return (int)iColNum;
}
/************************************************************************/
/*读取合并的单元格信息                                                                      */
/************************************************************************/
void YFExcelClass::GetMergeAreaInfo(long iRow, long iColumn, long& MergeRowCount, long& MergeColumnCount, long& MergeStartRow, long& MergeStartColumn)
{
	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetItem(_variant_t((long)iRow), _variant_t((long)(iColumn))).pdispVal, true);

	Range unionRange;
	unionRange.AttachDispatch(tRange.GetMergeArea());

	//合并单元格的行数
	Range mergeAreaRange_HangCount;
	mergeAreaRange_HangCount.AttachDispatch(unionRange.GetRows());
	MergeRowCount = mergeAreaRange_HangCount.GetCount();
	mergeAreaRange_HangCount.ReleaseDispatch();

	//合并单元格的列数
	Range mergeAreaRange_LieCount;
	mergeAreaRange_LieCount.AttachDispatch(unionRange.GetColumns());
	MergeColumnCount = mergeAreaRange_LieCount.GetCount();
	mergeAreaRange_LieCount.ReleaseDispatch();

	//起始行，从1开始
	MergeStartRow = unionRange.GetRow();
	
	//起始列，从1开始
	MergeStartColumn = unionRange.GetColumn();

	unionRange.ReleaseDispatch();
	tRange.ReleaseDispatch();
}
//描述：读某一个单元格的值 
//输入：long列，long行
//输出：CATUnicodeString
//返回：CATUnicodeString
CATUnicodeString YFExcelClass::ReadOneCellValue(long iRow,long iCol)
{
	m_ExlRge.AttachDispatch( m_ExlSheet.GetCells(), TRUE ); 

	Range   oCurCell;
	oCurCell.AttachDispatch( m_ExlRge.GetItem( COleVariant( iRow), COleVariant( iCol ) ).pdispVal,TRUE );
	
	VARIANT mergeCells;
	mergeCells=oCurCell.GetMergeCells();
	if (mergeCells.boolVal!=0)
	{
		long  MergeRowCount;
		long  MergeColumnCount;
		long  MergeStartRow; 
		long  MergeStartColumn;

		GetMergeAreaInfo(iRow, iCol,  MergeRowCount,  MergeColumnCount,  MergeStartRow,  MergeStartColumn);

		//获得合并单元格起始行信息
		Range   oMergeCurCell;
		oMergeCurCell.AttachDispatch( m_ExlRge.GetItem( COleVariant( (long)(MergeStartRow)), COleVariant( (long)MergeStartColumn ) ).pdispVal, TRUE );

		VARIANT varItemValue = oMergeCurCell.GetText();
		CString strItemValue= varItemValue.bstrVal;
		CATUnicodeString strNewValue;
		strNewValue.BuildFromUTF16(strItemValue.GetBuffer(strItemValue.GetLength()), strItemValue.GetLength());
		strItemValue.ReleaseBuffer();

		oCurCell.ReleaseDispatch();
		return strNewValue;

	}
	else
	{
		CString strItemValue;
		CATUnicodeString strNewValue;
		VARIANT vResult =oCurCell.GetText();

		strItemValue=vResult.bstrVal;
		strNewValue.BuildFromUTF16(strItemValue.GetBuffer(strItemValue.GetLength()), strItemValue.GetLength());
		strItemValue.ReleaseBuffer();

		oCurCell.ReleaseDispatch();
		return strNewValue;

	}
	
	oCurCell.ReleaseDispatch();

}

//描述：读某一个单元格的值，并返回其是否合并单元格的信息
//输入：long列，long行
//输出：CATUnicodeString单元格值,long合并行数，long合并列数，long合并起始行，long合并起始列
//返回：CATUnicodeString单元格值
CATUnicodeString YFExcelClass::ReadOneCellValueAndMergeInfo(long iRow,long iCol, long &oMergeRowCount,long &oMergeColumnCount,long &oMergeStartRow,long &oMergeStartColumn)
{
	m_ExlRge.AttachDispatch( m_ExlSheet.GetCells(), TRUE ); 

	Range   oCurCell;
	oCurCell.AttachDispatch( m_ExlRge.GetItem( COleVariant( iRow), COleVariant( iCol ) ).pdispVal,TRUE );

	VARIANT mergeCells;
	mergeCells=oCurCell.GetMergeCells();
	if (mergeCells.boolVal!=0)
	{
		long  MergeRowCount;
		long  MergeColumnCount;
		long  MergeStartRow; 
		long  MergeStartColumn;

		GetMergeAreaInfo(iRow, iCol,  MergeRowCount,  MergeColumnCount,  MergeStartRow,  MergeStartColumn);

		//获得合并单元格起始行信息
		Range   oMergeCurCell;
		oMergeCurCell.AttachDispatch( m_ExlRge.GetItem( COleVariant( (long)(MergeStartRow)), COleVariant( (long)MergeStartColumn ) ).pdispVal, TRUE );

		VARIANT varItemValue = oMergeCurCell.GetText();
		CString strItemValue= varItemValue.bstrVal;
		CATUnicodeString strNewValue;
		strNewValue.BuildFromUTF16(strItemValue.GetBuffer(strItemValue.GetLength()), strItemValue.GetLength());
		strItemValue.ReleaseBuffer();

		oMergeRowCount		= MergeRowCount;
		oMergeColumnCount	= MergeColumnCount;
		oMergeStartRow		= MergeStartRow;
		oMergeStartColumn	= MergeStartColumn;

		oCurCell.ReleaseDispatch();
		return strNewValue;

	}
	else
	{
		CString strItemValue;
		CATUnicodeString strNewValue;
		VARIANT vResult =oCurCell.GetText();

		strItemValue=vResult.bstrVal;
		strNewValue.BuildFromUTF16(strItemValue.GetBuffer(strItemValue.GetLength()), strItemValue.GetLength());
		strItemValue.ReleaseBuffer();

		oMergeRowCount		= 0;
		oMergeColumnCount	= 0;
		oMergeStartRow		= 0;
		oMergeStartColumn	= 0;

		oCurCell.ReleaseDispatch();
		return strNewValue;

	}

	oCurCell.ReleaseDispatch();

}

//描述：从某一行某一列读取此行的N列值   
//输入：long列数，long行号，long行数
//输出：CATListOfCATUnicodeString内容列表
//返回：void
void YFExcelClass::ReadRowData(long iRow,long iColIndex,long iColNum,CATListOfCATUnicodeString &oLstValue)
{
	for (long i = iColIndex ;i<= iColIndex + iColNum -1;i++ )
	{
		CATUnicodeString strValue = ReadOneCellValue(iRow,i);
		oLstValue.Append(strValue);
	}
}
//描述：从某一行某一列读取此列的N行值    
//输入：long列数，long行号，long行数
//输出：CATListOfCATUnicodeString内容列表
//返回：void
//void SJDExcelClass::ReadColData(long iRowIndex,long iRowNum,long iCol,CATListOfCATUnicodeString &oLstValue)
void YFExcelClass::ReadColData(long iCol, long iRowIndex,long iRowNum,CATListOfCATUnicodeString &oLstValue)
{
	for (long i = iRowIndex;i<= iRowIndex +iRowNum -1;i++)
	{
		CATUnicodeString strValue = ReadOneCellValue(i,iCol);
		oLstValue.Append(strValue);
	}
}
//描述：得到某个sheet的某些单元格的值
//输入：int Sheet序号，long起始行数，long起始列数，long终止行数，long终止列数，int读取类型
//输出：CATListOfCATUnicodeString内容列表
//返回：void
void YFExcelClass::GetSheetCellsData(int sheetIndex,long iRowStart, long iColStart,long iRowEnd, long iColEnd, CATListOfCATUnicodeString &LstValue,int Type)
{
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(sheetIndex))));
	m_ExlSheet.Activate();

	CATListOfCATUnicodeString LstiRowsData;

	if (Type == 1)//一行一行的读
	{
		int iColNum = iColEnd - iColStart + 1;
		for (int i = iRowStart;i<=iRowEnd;i++)
		{
			LstiRowsData.RemoveAll();
			ReadRowData(i,iColStart,iColNum,LstiRowsData);
			LstValue.Append(LstiRowsData);
		}
	}
	if (Type == 2)//一列一列的读
	{
		int iRowNum = iRowEnd - iRowStart + 1;
		for (int i = iColStart;i<=iColEnd;i++)
		{
			LstiRowsData.RemoveAll();
			ReadColData(i,iRowStart,iRowNum,LstiRowsData);
			LstValue.Append(LstiRowsData);
		}
	}
}

//描述：得到某个sheet的某些单元格的值
//输入：CATUnicodeStringSheet名称，long起始行数，long起始列数，long终止行数，long终止列数，int读取类型
//输出：CATListOfCATUnicodeString内容列表
//返回：void
void YFExcelClass::GetSheetCellsData(CATUnicodeString strSheetName,long iRowStart, long iColStart,long iRowEnd, long iColEnd, CATListOfCATUnicodeString &LstValue,int Type)
{
	int icount = m_ExlSheets.GetCount();
	for (int i = 1;i<=icount;i++)
	{
		CATUnicodeString strName = GetSheetName(i);
		if (strName == strSheetName)
		{
			m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(i))));
			m_ExlSheet.Activate();
			break;
		}
	}

	CATListOfCATUnicodeString LstiRowsData;

	if (Type == 1)//一行一行的读
	{
		int iColNum = iColEnd - iColStart + 1;
		for (int i = iRowStart;i<=iRowEnd;i++)
		{
			LstiRowsData.RemoveAll();
			ReadRowData(i,iColStart,iColNum,LstiRowsData);
			LstValue.Append(LstiRowsData);
		}
	}
	if (Type == 2)//一列一列的读
	{
		int iRowNum = iRowEnd - iRowStart + 1;
		for (int i = iColStart;i<=iColEnd;i++)
		{
			LstiRowsData.RemoveAll();
			ReadColData(i,iRowStart,iRowNum,LstiRowsData);
			LstValue.Append(LstiRowsData);
		}
	}
}

//描述：写某一个单元格的值  
//输入：long行数，long列数，CATUnicodeString单元格内容
//输出：void
//返回：void
void YFExcelClass::WriteCellData(long iRowIndex, long iColIndex, CATUnicodeString Value)
{
	CString strValue=Value.ConvertToChar();
	m_ExlRge.AttachDispatch( m_ExlSheet.GetCells(), TRUE ); 
	m_ExlRge.SetItem(_variant_t(iRowIndex),_variant_t(iColIndex),_variant_t(strValue)); 
}

//描述：保存
//输入：CString路径
//输出：void
//返回：void
void YFExcelClass::SaveExcelFile(CString savePath,bool bOpenTemp)
{
	if (bOpenTemp)
	{
		m_ExlBook.SaveAs(COleVariant(savePath),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			0,
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing));
	}
	else
	{
		m_ExlBook.SaveAs(COleVariant(savePath),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			1,
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing));
	}
	m_ExlBook.SetSaved(TRUE);
	m_ExlBook.Close(covOptional, COleVariant(savePath), covOptional);
	m_ExlBooks.Close();
}

//描述：关闭 
//输入：CString路径
//输出：void
//返回：void
void YFExcelClass::CloseExcelFile(CString savePath)
{
	m_ExlBooks.Close();
}

CATUnicodeString YFExcelClass::CAAUStringBuildFromChar(char * strchar)
{
	int len = MultiByteToWideChar(CP_ACP, 0, strchar, -1, NULL, 0); 
	wchar_t* strwcANSI = new wchar_t[len + 1]; 
	memset(strwcANSI, 0, len * 2 + 2); 
	MultiByteToWideChar(CP_ACP, 0, strchar, -1, strwcANSI, len); 
	CATUnicodeString strwcUnicode;
	strwcUnicode.BuildFromWChar(strwcANSI); 
	if(strwcANSI) delete [] strwcANSI;
	return strwcUnicode;
}

void YFExcelClass::CAAUStringConvertToChar(CATUnicodeString strUnicode,char* strchar )
{
	int len = WideCharToMultiByte(CP_ACP, 0, strUnicode, -1, NULL, 0, NULL, NULL); 
	memset(strchar, 0, len + 1); 
	WideCharToMultiByte(CP_ACP, 0, strUnicode, -1, strchar, len, NULL, NULL); 
}

void YFExcelClass::CAAUStringConvertToWChar(CATUnicodeString strUnicode, wchar_t* strwcANSI)
{
	const char *strchar =  strUnicode.ConvertToChar();
	int len = MultiByteToWideChar(CP_ACP, 0, strchar, -1, NULL, 0); 
	memset(strwcANSI, 0, len * 2 + 2); 
	MultiByteToWideChar(CP_ACP, 0, strchar, -1, strwcANSI, len); 
}