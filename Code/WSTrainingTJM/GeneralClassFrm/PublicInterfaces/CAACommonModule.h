// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// CAACommonModule.h
// Header definition of CAACommonModule
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2018  Creation: Code generated by the CAA wizard  music
//===================================================================
#ifndef CAACommonModule_H
#define CAACommonModule_H

#ifdef _WINDOWS_
#undef _WINDOWS_
#endif


//#include "YFDrwToolsCommonM.h"
#include "GeneralClassMod.h"
#include "CATBaseUnknown.h"

//-----------------------------------------------------------------------

#include "iostream.h"
#include <cmath>
#include <string>
#include <windows.h>
#include <fstream>
#include <vector>
#include "afx.h"
using namespace std;

#include "CATIndicationAgent.h"
#include "CATPathElementAgent.h"
#include "CATDialogAgent.h"
#include "CATOtherDocumentAgent.h"
#include "CATCreateExternalObject.h"


#include "CATMathPlane.h"
#include "CATFrmLayout.h"
#include "CATListOfCATFrmWindow.h"
#include "CATUnicodeString.h"
#include "CATDocument.h"
#include "CATFrmEditor.h"
#include "CATIDocId.h"
#include "CATIDocRoots.h"
#include "CATISpecObject.h"
#include "CATISpecAttrAccess.h"
#include "CATISpecAttrKey.h"
#include "CATISpecDeclarations.h"
#include "CATDlgNotify.h"
#include "CATDlgUtility.h"
#include "CATListOfCATUnicodeString.h"
#include "CATLISTV_CATISpecAttrKey.h"
#include "CATListOfInt.h"
#include "CATListOfDouble.h"
#include "CATICamera.h"
#include "CATFrmLayout.h"
#include "CATFrmWindow.h"
#include "CATPathElement.h"
#include "CATApplicationFrame.h"
#include "CATCommand.h"
#include "CATIBRepAccess.h"
#include "CATIFeaturize.h"
#include "CATMfBRepDefs.h"
#include "CATIProduct.h"

#include "CATMathBox.h"
#include "CATIPrtPart.h"
#include "CATBody.h"
#include "CATLISTV_CATMathPoint.h"
#include "CATMathAxis.h"
#include "CATMathPoint.h"
#include "CATMathPlane.h"
#include "CATMathLine.h"
#include "CATPoint.h"
#include "CATVertex.h"
#include "CATIDescendants.h"
#include "CATIMechanicalTool.h"
#include "CATIShape.h"
#include "CATIPartRequest.h"
//#include "CAAGsiServices.h"
#include "CATIMechanicalFeature.h"
#include "CATLISTV_CATISpecObject.h"

#include "winsock.h"
#include "CATTime.h"
#include "CATTimeSpan.h"
#include "CATLib.h"
#include "CATGetEnvValue.h"

//void  ExportedByGeneralClassMod CAAMessageBox(CATUnicodeString message,CATUnicodeString title = "Notice");
CATUnicodeString ExportedByGeneralClassMod CAAUStringBuildFromChar(char * strchar);
void ExportedByGeneralClassMod CAAUStringConvertToChar(CATUnicodeString strUnicode,char* strchar );
void ExportedByGeneralClassMod CAAUStringConvertToWChar(CATUnicodeString strUnicode, wchar_t* strwcANSI);
CATUnicodeString ExportedByGeneralClassMod CAAUStringBuildFromUString(CATUnicodeString strUnicode);
CATISpecObject_var   ExportedByGeneralClassMod GetSelectObjectFromAgent(CATPathElementAgent * pSelectAgent );
CATISpecObject_var  ExportedByGeneralClassMod GetSpecObjFromBRep(CATIBRepAccess_var spBRep);
void  ExportedByGeneralClassMod GetFrmWindowByName(CATUnicodeString WindName , CATFrmWindow** owindow);
CATUnicodeString  ExportedByGeneralClassMod  GetDocumentType( CATFrmWindow * pWind,CATDocument ** pDoc  );
CATISpecObject_var   ExportedByGeneralClassMod GetProductRoot(CATIProduct_var spProduct);
CATISpecObject_var   ExportedByGeneralClassMod GetPartDocumentRoot(CATDocument* pDoc);
CATISpecObject_var   ExportedByGeneralClassMod GetPartInstanceRoot(CATIProduct_var   spPartInstance);
//HRESULT  ExportedByGeneralClassMod GetPartBoundingBox(CATIPrtPart_var spPrtPart,CATMathBox& oPartBoundingBox );
//HRESULT  ExportedByGeneralClassMod GetPartBoundingBox(CATIProduct_var spPrtProduct,CATMathBox& oPartBoundingBox );
HRESULT  ExportedByGeneralClassMod GetBodyListBox(CATUnicodeString strPartNumber,CATListValCATISpecObject_var  spBodyList , CATMathBox& oPartBoundingBox );
CATBody_var   ExportedByGeneralClassMod GetBodyFromFeature( const CATISpecObject_var& ispFeature );
CATISpecObject_var   ExportedByGeneralClassMod GetProductDocumentRoot(CATDocument* pDoc);
//void ExportedByGeneralClassMod GetGeomElmFromGSetAndBody(CATISpecObject_var ispiGSet,vector<CATISpecObject_var>& ospiGeomElmList ,vector<CATISpecObject_var>& ospiGSMElmList ,vector<CATISpecObject_var>& ospiSolidElmList );
//HRESULT  ExportedByGeneralClassMod GetPartInstanceBoundingBox(CATIProduct_var spProduct,CATMathPoint oProductBox[]);
CATMathPoint   ExportedByGeneralClassMod MathPointPositionTransformation(CATMathPoint  mathPoint,CATMathTransformation mathTransf);
CATMathVector  ExportedByGeneralClassMod MathVectorPositionTransformation(CATMathVector  mathVector,CATMathTransformation mathTransf);
void  ExportedByGeneralClassMod PointsProjectingInTo2DBoxOnViewAlongDirection(vector <CATMathPoint>  points,CATMathPoint viewOrg,CATMathVector viewXAxis,CATMathVector viewYAxis,CATMathVector iDirection ,CATMathPoint pro2dBox[])  ;
void  ExportedByGeneralClassMod Get2DBoxOfPointsOnView(vector <CATMathPoint> points,CATMathPoint viewOrg,CATMathVector viewXAxis,CATMathVector viewYAxis,CATMathPoint points2dBox[])  ;
void  ExportedByGeneralClassMod Create3DBoxWithAxis(vector <CATMathPoint> points,CATMathPoint viewOrg,CATMathVector viewXAxis,CATMathVector viewYAxis,CATMathVector viewZAxis,CATMathPoint onew3DBox[] )  ;
CATMathPoint  ExportedByGeneralClassMod  PointProjectingOnLineAlongDirection(CATMathPoint iProjectingPoint, CATMathLine iLine, CATMathVector iDirection, double & oLength )  ;
CATMathPoint   ExportedByGeneralClassMod PointProjectingOnViewAlongDirection( CATMathPoint ipoint,CATMathPoint viewOrg,CATMathVector viewXAxis,CATMathVector viewYAxis,CATMathVector iDirection );
void  ExportedByGeneralClassMod GetPointCoordFromVertex( CATVertex_var spVertex,double oPointCoord [3]);
void  ExportedByGeneralClassMod GetPointCoordFromLine( CATISpecObject_var spLine,double oStartPoint[3],double oEndPoint[3]);
HRESULT ExportedByGeneralClassMod  SetSpecObjShowAttr(CATISpecObject_var iSpecObj,CATUnicodeString iShowOrHide);
HRESULT ExportedByGeneralClassMod  GetSpecObjShowAttr(CATISpecObject_var iSpecObj,CATUnicodeString& iShowOrHide);
bool ExportedByGeneralClassMod  CreateDirectory(const std::string folder) ;
HRESULT  ExportedByGeneralClassMod GetBodyBox(CATBody_var spBody, CATMathBox& oMathBox);
CATMathPlane ExportedByGeneralClassMod ISOView();
CATUnicodeString ExportedByGeneralClassMod GetCurrentBinPathFunc();
bool ExportedByGeneralClassMod DirExists(const std::string& dirName_in);
HRESULT ExportedByGeneralClassMod AddUsedHistory0(CATUnicodeString istrFuncString,CATUnicodeString &ostrErrorPath);
HRESULT ExportedByGeneralClassMod AddUsedHistory1(CATUnicodeString istrFuncString,CATUnicodeString &ostrUserInfo,CATTime &oStartTime);
void ExportedByGeneralClassMod AddUsedHistory2(CATTime iStartTime, CATUnicodeString &ostrUserInfo);
CATBoolean ExportedByGeneralClassMod WriteErrorLog(CATUnicodeString strErrorPath,CATUnicodeString strErrorMsg);

CATUnicodeString   ExportedByGeneralClassMod TransformMathPointInToString(CATMathPoint  iPoint ) ;
CATUnicodeString   ExportedByGeneralClassMod TransformVector3DBoxInToString(vector <CATMathPoint>  productBox ) ;
CATUnicodeString   ExportedByGeneralClassMod TransformCATMathBoxInToString( const CATMathBox& bodyBox ) ;
CATUnicodeString   ExportedByGeneralClassMod TransformProduct3DBoxInToString(CATMathPoint  productBox[] ) ;
CATUnicodeString   ExportedByGeneralClassMod TransformProduct2DBoxInToString(CATMathPoint  productBox[] ) ;

 CATUnicodeString   _testDirection= "C:\\ToolTestData\\";
 double   offsettolerance = 0.00001;
 double   mathPi = 3.1415926535897931;


bool  ExportedByGeneralClassMod D3LinesGetCrossPoint(double line1P1[3],double line1P2[3],double line2P1[3],double line2P2[3],double returnArray[3]);
double  ExportedByGeneralClassMod D3PointDistance(double point1[3],double point2[3]);
void  ExportedByGeneralClassMod D3VectorSetFromTwoPoint(double P1[3],double P2[3],double returnArray[3]);
double  ExportedByGeneralClassMod D3VectorLen(double vec[3]);
void  ExportedByGeneralClassMod D3ArrayCopy(double inArray[3],double returnArray[3]);
void  ExportedByGeneralClassMod D3ArrayClear(double inArray[3]);
bool  ExportedByGeneralClassMod D3VectorsParallel(double vec1[3],double vec2[3] );
double  ExportedByGeneralClassMod D3VectorAngle(double v1[3],double v2[3]);
double  ExportedByGeneralClassMod D3DotProduct(double v1[3],double v2[3]);
void  ExportedByGeneralClassMod D3GetMidPoint(double P1[3],double P2[3],double returnArray[3]);
void  ExportedByGeneralClassMod D3VectorScal(double vec[3],double scal,double returnArray[3]);
void  ExportedByGeneralClassMod D3PointMove(double point[3],double vec[3],double returnArray[3]);
void  ExportedByGeneralClassMod D3VectorGetProjectY(double vectoProjected[3],double vecAxis[3],double returnArray[3]);
void  ExportedByGeneralClassMod D3VectorGetProjectX(double vectoProjected[3],double vecAxis[3],double returnArray[3]);
void  ExportedByGeneralClassMod D3VectorReduce(double v1Reduced[3],double v2[3],double returnArray[3]);
void  ExportedByGeneralClassMod D3VectorUnit(double vec[3],double returnArray[3]);
void  ExportedByGeneralClassMod D3VectorRotate(double vs[3],double vnormal[3],double ang,double returnArray[3]);
double  ExportedByGeneralClassMod D3AngleNew(double a1);
void  ExportedByGeneralClassMod D3CrossProduct(double vec1[3],double vec2[3],double returnArray[3] );
void  ExportedByGeneralClassMod D3VectorSymmetric(double vec[3],double returnArray[3]);
void  ExportedByGeneralClassMod D3VectorSum(double v1[3],double v2[3],double returnArray[3]);
bool  ExportedByGeneralClassMod D3VectorEqual(double v1[3],double v2[3]);
void  ExportedByGeneralClassMod D3PointProjectOnPlane(double pointToProjected[3],double originPoint[3],double Direction[3],double returnArray[3]);
void  ExportedByGeneralClassMod D3PointProjectOnPlane(double pointToProjected[3],double originPoint[3],double vecX[3],double vecY[3],bool transformto2D,double returnArray[]);
bool  ExportedByGeneralClassMod D3PlanesGetCrossLine(double plane1Origin[3], double plane1Direction[3], double plane2Origin[3], double plane2Direction[3],double outCrossLineOrigin[3], double outCrossLineDir[3]);
void  ExportedByGeneralClassMod D3PointProjectOnLine(double LineStartPoint[3],double LineEndPoint[3],double AnyPoint[3],bool transformto2D,double returnArray[]);
void  ExportedByGeneralClassMod D3PointProjectOnLineAlongDir(double LineStartPoint[3], double LineEndPoint[3], double AnyPoint[3], double projectDirection[3], bool transformto2D,double returnArray[]);

void  ExportedByGeneralClassMod D2ArrayCopy(double inArray[2],double returnArray[2]);
void  ExportedByGeneralClassMod D2VectorUnit(double vec[2],double returnArray[2]);
void  ExportedByGeneralClassMod D2VectorScal(double vec[2],double scal,double returnArray[2]);
double  ExportedByGeneralClassMod D2VectorLen(double vec[2]);
void  ExportedByGeneralClassMod D2PointMove(double point[2],double vec[2],double returnArray[2] );
void ExportedByGeneralClassMod D2VectorSetFromTwoPoint(double P1[2],double P2[2],double returnArray[2]);
void ExportedByGeneralClassMod D2VectorReduce(double v1Reduced[2],double v2[2],double returnArray[2]);
double ExportedByGeneralClassMod D2PointDistance(double point1[2],double point2[2]);
void ExportedByGeneralClassMod D2GetMidPoint(double P1[2],double P2[2],double returnArray[2]);
void ExportedByGeneralClassMod D2VectorSum(double v1[2],double v2[2],double returnArray[2]);

/**
* Class representing xxx.
*
* <br><b>Role</b>: Provide the basic class function...
* <p>
* Do not use the @href CAACommonModule constructor to
* do such and such but instead...
*
* @example
*  // example is optional
*  pObject = new CAACommonModule;
*  pObject->SetXXX(...);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class ExportedByGeneralClassMod CAACommonModule: public CATBaseUnknown
{
  CATDeclareClass;

  public:

  // Standard constructors and destructors
  // -------------------------------------
     CAACommonModule ();
     virtual ~CAACommonModule ();

  // Copy constructor and equal operator
  // -----------------------------------
  CAACommonModule (CAACommonModule &);
  CAACommonModule& operator=(CAACommonModule&);

};

//-----------------------------------------------------------------------

#endif
