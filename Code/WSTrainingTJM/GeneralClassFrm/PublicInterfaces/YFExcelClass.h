// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// YFExcelClass.h
// Header definition of YFExcelClass
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Aug 2018  Creation: Code generated by the CAA wizard  70908
//===================================================================
#ifndef YFExcelClass_H
#define YFExcelClass_H

#include "GeneralClassMod.h"
#include "CATBaseUnknown.h"

#include "CATUnicodeString.h"
#include "excel.h"
#include "comdef.h"
#include "comutil.h"
#include "io.h"
#include "iostream.h"
#include "stdafx.h"
#include <cstring>
#include <cstringt.h>

//#include "CAxis.h"

#include "CATListOfCATUnicodeString.h"

//-----------------------------------------------------------------------

/**
* Class representing xxx.
*
* <br><b>Role</b>: Provide the basic class function...
* <p>
* Do not use the @href YFExcelClass constructor to
* do such and such but instead...
*
* @example
*  // example is optional
*  pObject = new YFExcelClass;
*  pObject->SetXXX(...);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class ExportedByGeneralClassMod YFExcelClass: public CATBaseUnknown
{
  CATDeclareClass;

  public:

  // Standard constructors and destructors
  // -------------------------------------
     YFExcelClass ();
     virtual ~YFExcelClass ();

  // Copy constructor and equal operator
  // -----------------------------------
  YFExcelClass (YFExcelClass &);
  YFExcelClass& operator=(YFExcelClass&);

private:
	Range m_ExlRge; 

	_Worksheet m_ExlSheet; 
	Worksheets m_ExlSheets; 

	_Workbook m_ExlBook; 
	Workbooks m_ExlBooks; 

	_Application m_ExlApp;

	/*  Pictures pt;*/

	//   CellFormat cf; 
	//   Font ft; 

	int iSheetIndex;

private:
	CATBoolean bSheet;

public:

	//打开excel文件
	CATBoolean OpenExcel(CATUnicodeString ExcelPath);

	
	//得到sheet表名称
	CATUnicodeString GetSheetName(int index);

	//获得已经使用的行数
	int GetUsedRowNum();

	//获得已经使用的列数
	int GetUsedColNum();

	//读取某一个单元格的值
	CATUnicodeString ReadOneCellValue(long iRow,long iCol);


	CATUnicodeString ReadOneCellValueAndMergeInfo(long iRow,long iCol, long &oMergeRowCount,long &oMergeColumnCount,long &oMergeStartRow,long &oMergeStartColumn);

	//向单元格写值
	void WriteCellData(long iRowIndex, long iColIndex, CATUnicodeString Value);

	//读取某一行的某一些值
	void ReadRowData(long iRow,long iColIndex,long iColNum,CATListOfCATUnicodeString &oLstValue);

	//读取某一列的某一些值
	//void ReadColData(long iRowIndex,long iRowNum,long iCol,CATListOfCATUnicodeString &oLstValue);
	void ReadColData(long iCol,long iRowIndex,long iRowNum,CATListOfCATUnicodeString &oLstValue);

	//得到某个sheet的某些单元格的值
	void GetSheetCellsData(int sheetIndex,long iRowStart, long iColStart,long iRowEnd, long iColEnd, CATListOfCATUnicodeString &LstValue,int Type);
	void GetSheetCellsData(CATUnicodeString strSheetName,long iRowStart, long iColStart,long iRowEnd, long iColEnd, CATListOfCATUnicodeString &LstValue,int Type);

	//保存
	void SaveExcelFile(CString savePath,bool bOpenTemp);

	//关闭
	void CloseExcelFile(CString savePath);

	CATUnicodeString  CAAUStringBuildFromChar(char * strchar);
	
	void  CAAUStringConvertToChar(CATUnicodeString strUnicode,char* strchar );
	
	void  CAAUStringConvertToWChar(CATUnicodeString strUnicode, wchar_t* strwcANSI);

	void GetMergeAreaInfo(long iRow, long iColumn, long& MergeRowCount, long& MergeColumnCount, long& MergeStartRow, long& MergeStartColumn);
};

//-----------------------------------------------------------------------

#endif
