// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// DumTempFaceComp.cpp
// Provide implementation to interface
//    PipITempFace
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Jul 2015  Creation: Code generated by the CAA wizard  likj
//===================================================================
#include "DumTempFaceComp.h"

#include "CAT3DCustomRep.h"
#include "CAT3DPlanarFaceGP.h"
#include "CATISO.h"
#include "CATFrmEditor.h"
#include "CATSurfacicRep.h"
 
CATImplementClass(DumTempFaceComp,
                  Implementation,
                  CATModelForRep3D,
                  CATnull );
 

//-----------------------------------------------------------------------------
// DumTempFaceComp : constructor
//-----------------------------------------------------------------------------
DumTempFaceComp::DumTempFaceComp():
    CATModelForRep3D()
{
}

//-----------------------------------------------------------------------------
// DumTempFaceComp : destructor
//-----------------------------------------------------------------------------
DumTempFaceComp::~DumTempFaceComp()
{
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_DumITempFace.h"
TIE_DumITempFace(DumTempFaceComp);


//Methods implementation
HRESULT DumTempFaceComp::SetDatas(CATLISTV(CATMathPoint) lstMathVertices,CATMathVector iMathNormal,
										 int iTransparent,int iRed,int iGreen,int iBlue)
{
	HRESULT hr = E_FAIL;
	_normalDir = iMathNormal;
	_mathPoint1 = lstMathVertices[1];
	_mathPoint2 = lstMathVertices[3];
	_lstCornerPoints.RemoveAll();
	_lstCornerPoints = lstMathVertices;
	hr =Update3DFace(lstMathVertices,iMathNormal,iTransparent,iRed,iGreen,iBlue);
	return hr;
}

HRESULT DumTempFaceComp::SetGraphicRepresentation(CATRep * iRep )
{
	SetRep(iRep);

	return S_OK;
}

HRESULT DumTempFaceComp::GetGraphicRepresentation(CATRep ** oRep )
{
	(*oRep) = GiveRep();

	return S_OK;
}

HRESULT DumTempFaceComp::GetNormalDir(CATMathVector& ioMathNormal)
{
	ioMathNormal = _normalDir;
	return S_OK;
}

HRESULT DumTempFaceComp::GetCenterPoint(CATMathPoint& iCenterPoint)
{
	iCenterPoint.SetX((_mathPoint1.GetX()+_mathPoint2.GetX())/2);
	iCenterPoint.SetY((_mathPoint1.GetY()+_mathPoint2.GetY())/2);
	iCenterPoint.SetZ((_mathPoint1.GetZ()+_mathPoint2.GetZ())/2);
	return S_OK;
}

HRESULT DumTempFaceComp::GetCornerPoints(CATLISTV(CATMathPoint) &olstCornerPoints)
{
	olstCornerPoints.RemoveAll();
	olstCornerPoints = _lstCornerPoints;
	return S_OK;
}

HRESULT DumTempFaceComp::Update3DFace(CATLISTV(CATMathPoint) lstMathVertices,CATMathVector iMathNormal,
											 int iTransparent,int iRed,int iGreen,int iBlue)
{
	HRESULT rc=E_FAIL;

	CAT3DCustomRep * pRepForCenter = new CAT3DCustomRep();

	////Get the CATISO
	//CATFrmEditor *pEditor=CATFrmEditor::GetCurrentEditor();
	//CATISO * pISO = pEditor->GetISO();

	//Check the old CATRep is exist ?
	CATRep *pRep  =NULL;
	rc = GetGraphicRepresentation(&pRep);
	//if( !!pRep ) 
	//{  //The old one is exist.
	//	pISO->RemoveElement(this);
	//}

	//顶点
	int iNumOfPoints=lstMathVertices.Size();
	float *pTopVertices=NULL;
	pTopVertices= new float[iNumOfPoints*3];
	for(int i=1;i<=iNumOfPoints;i++)
	{
		CATMathPoint iMathPoint=lstMathVertices[i];
		pTopVertices[3*(i-1)]=iMathPoint.GetX();
		pTopVertices[3*(i-1)+1]=iMathPoint.GetY();
		pTopVertices[3*(i-1)+2]=iMathPoint.GetZ();
	}

	//法线方向
	float *pNormals=NULL;
	pNormals=new float[3];
	pNormals[0]=iMathNormal.GetX();
	pNormals[1]=iMathNormal.GetY();
	pNormals[2]=iMathNormal.GetZ();

	int iNbTriangles = 0;
	int * pTriangleIndices = NULL;

	int iNbStrips = 0;
	int * pStripIndices = NULL;

	int * iNbStripVertices = NULL;

	int iNbFans = 1;
	int *pFanIndices = NULL;
	pFanIndices = new int[4];
	for(int i=0;i<iNumOfPoints;++i)
		pFanIndices[i] = 3*i;

	int * pNbFanVertices = NULL;
	pNbFanVertices = new int[1];
	pNbFanVertices[0] = iNumOfPoints;

	CAT3DPlanarFaceGP* pPlanarFaceGP = new CAT3DPlanarFaceGP(pTopVertices, 
															 iNumOfPoints*3,
															 pNormals,
															 pTriangleIndices,
															 iNbTriangles,
															 pStripIndices,
															 iNbStrips,
															 iNbStripVertices,
															 pFanIndices,
															 iNbFans,
															 pNbFanVertices,
															 NULL,
															 3,
															 ALLOCATE_VERTICES);
	if(pPlanarFaceGP==NULL) return E_FAIL;

	CATSurfacicRep * pRepForSurfacic = new CATSurfacicRep();
	if(pRepForSurfacic==NULL)
	{
		return NULL;
	}

	CATGraphicAttributeSet tmpAtt;
	tmpAtt.SetType(2);
	tmpAtt.SetTransparentMode(iTransparent);
	tmpAtt.SetColor(TRUECOLOR);
	tmpAtt.SetColorRGBA(iRed, iGreen, iBlue);
	pRepForSurfacic->AddGeomFace(pPlanarFaceGP,new CATGraphicAttributeSet(tmpAtt));

	CAT3DBoundingSphere globalSphere;
	globalSphere += CAT3DBoundingSphere(pPlanarFaceGP->GetSphereCenter(), pPlanarFaceGP->GetSphereRadius());
	pRepForSurfacic->SetBoundingElement(globalSphere);

	//CATModelForRep3D *pPlanarFaceModel=NULL;
	//pPlanarFaceModel = new CATModelForRep3D();
	//if(pPlanarFaceModel==NULL)
	//{
	//	return NULL;
	//}
	//pPlanarFaceModel->SetRep(pRepForSurfacic);



	//pRepForCenter->AddGP(pPlanarFaceGP,attGP);

	SetGraphicRepresentation(pRepForSurfacic);

	/*pISO->AddElement(this);*/
	return S_OK;
}
