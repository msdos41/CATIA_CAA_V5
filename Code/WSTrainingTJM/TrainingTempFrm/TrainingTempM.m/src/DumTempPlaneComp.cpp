// COPYRIGHT Dassault Systemes 2012
//===================================================================
//
// DumTempPlaneComp.cpp
// Provide implementation to interface
//    DumITempArrow
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Dec 2012  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "DumTempPlaneComp.h"
#include "CATFrmEditor.h"
#include "CAT3DPointRep.h"
#include "CATGraphicAttributeSet.h"
#include "CATISO.h"
#include "CATViewer.h"

CATImplementClass(DumTempPlaneComp,
				  Implementation,
				  CATModelForRep3D,
				  CATnull );


//-----------------------------------------------------------------------------
// DumTempPlaneComp : constructor
//-----------------------------------------------------------------------------
DumTempPlaneComp::DumTempPlaneComp():
CATModelForRep3D()
{
}

//-----------------------------------------------------------------------------
// DumTempPlaneComp : destructor
//-----------------------------------------------------------------------------
DumTempPlaneComp::~DumTempPlaneComp()
{
}

// Link the implementation to its interface
// ---------------------------------------

//TIE or TIEchain definitions
#include "TIE_DumITempPlane.h"
TIE_DumITempPlane(DumTempPlaneComp);


//Methods implementation
HRESULT DumTempPlaneComp::SetDatas (CATMathPoint * iOrigin,CATMathDirection * iDirX, CATMathDirection * iDirY)
{
	HRESULT rc = S_OK;

	_mathPt = (*iOrigin);
	_mathDirX = (*iDirX);
	_mathDirY = (*iDirY);

	UpdatePlane();

	return rc;
}

HRESULT DumTempPlaneComp::SetGraphicRepresentation(CATRep * iRep)
{
	SetRep(iRep);

	return S_OK;
}

HRESULT DumTempPlaneComp::GetGraphicRepresentation(CATRep ** oRep)
{
	(*oRep) = GiveRep();

	return S_OK;
}

HRESULT DumTempPlaneComp::UpdatePlane()
{
	HRESULT rc=E_FAIL;

	CAT3DBagRep* pBagRep = NULL;

	CAT3DCustomRep * pRepForCenter = new CAT3DCustomRep();

	//Get the CATISO
	CATFrmEditor *pEditor=CATFrmEditor::GetCurrentEditor();
	CATISO * pISO = pEditor->GetISO();

	//Check the old CATRep is exist ?
	CATRep *pRep  =NULL;
	rc = GetGraphicRepresentation(&pRep);
	if( !!pRep ) 
	{  //The old one is exist.
		pISO->RemoveElement(this);
	}

	//arrow
	int lenAll=20;
	CATMathPointf iOrign(_mathPt.GetX(), _mathPt.GetY(), _mathPt.GetZ());
	CATMathDirectionf iDirX(_mathDirX.GetX(), _mathDirX.GetY(), _mathDirX.GetZ());
	CATMathDirectionf iDirY(_mathDirY.GetX(), _mathDirY.GetY(), _mathDirY.GetZ());
	CAT3DFixedPlanGP * plane = new CAT3DFixedPlanGP (iOrign, iDirX, iDirY, lenAll );

	//set color
	CATGraphicAttributeSet attGP;
	attGP.SetColor(GREEN);
	attGP.SetThickness(4);

	//add graphic primitive
	pRepForCenter->AddGP(plane,attGP);
	CAT3DBoundingSphere BSon3DCustomRep(iOrign, 0, lenAll);
	pRepForCenter->SetBoundingElement(BSon3DCustomRep);

	if (NULL== pBagRep) 
		pBagRep = new CAT3DBagRep();

	pBagRep->AddChild(*pRepForCenter);

	SetGraphicRepresentation(pBagRep);

	//CATFrmLayout * pFrmLayout = CATFrmLayout::GetCurrentLayout();
	//CATFrmWindow* pFrmWindow = pFrmLayout->GetCurrentWindow();

	//CATViewer * pViewer = pFrmWindow->GetViewer();
	//pViewer->AddRep(pBagRep);
	//pViewer->Draw();

	pISO->AddElement(this);

	return S_OK;
}

HRESULT DumTempPlaneComp::GetPosition(CATMathPoint * oOrigin,CATMathDirection * oDirX, CATMathDirection * oDirY )
{
	(*oOrigin) = _mathPt;
	(*oDirX) = _mathDirX;
	(*oDirY) = _mathDirY;

	return S_OK;
}