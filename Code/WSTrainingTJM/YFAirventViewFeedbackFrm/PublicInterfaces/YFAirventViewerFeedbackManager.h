// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// YFAirventViewerFeedbackManager.h
// Header definition of YFAirventViewerFeedbackManager
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Sep 2018  Creation: Code generated by the CAA wizard
//===================================================================
#ifndef YFAirventViewerFeedbackManager_H
#define YFAirventViewerFeedbackManager_H

#include "YFAirventViewFeedbackM.h"
#include "CATBaseUnknown.h"

// System Framework
#include "CATBaseUnknown.h"      // Needed to derive from 
#include "CATEventSubscriber.h"  // To set callback
#include "CATMathPoint.h"
#include "CATMathPoint2D.h"

class CATUnicodeString ;         // 

// Visualization/VisualizationBase Frameworks
class CAT2DBagRep ;              // The graphic representation of the feedback
class CATViewer ;                // The viewer with the visual feedback
class CATNotification ;          // for callback methods
class CATPathElement ;           // 

//-----------------------------------------------------------------------

/**
* Class representing xxx.
*
* <br><b>Role</b>: Provide the basic class function...
* <p>
* Do not use the @href YFAirventViewerFeedbackManager constructor to
* do such and such but instead...
*
* @example
*  // example is optional
*  pObject = new YFAirventViewerFeedbackManager;
*  pObject->SetXXX(...);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class ExportedByYFAirventViewFeedbackM YFAirventViewerFeedbackManager: public CATBaseUnknown
{
  CATDeclareClass;

  public:

  // Standard constructors and destructors
  // -------------------------------------
     YFAirventViewerFeedbackManager ();
     virtual ~YFAirventViewerFeedbackManager ();

  // Copy constructor and equal operator
  // -----------------------------------
  YFAirventViewerFeedbackManager (YFAirventViewerFeedbackManager &);
  YFAirventViewerFeedbackManager& operator=(YFAirventViewerFeedbackManager&);

  // This class has only one instance during the session
  //  
  static void GetManager(YFAirventViewerFeedbackManager ** opManager);
  //void GetManager(YFAirventViewerFeedbackManager ** opManager);

  // Method to activate the visual feedback on the current viewer
  void SetViewerFeedbackOn();

  // Method to deactivate the visual feedback on the current viewer
  void SetViewerFeedbackOff();

  //获取屏幕中的三维点
  CATMathPoint GetScreenPickedPoint();
 
  //获取屏幕中的二维点
  CATMathPoint2D GetScreen2DPoint();
 
  //获取屏幕中的对象
  CATBaseUnknown *GetPickedObject();



private : 

	// Copy constructor, not implemented
	// Set as private to prevent from compiler automatic creation as public.
	YFAirventViewerFeedbackManager(const YFAirventViewerFeedbackManager &iObjectToCopy);

	// Assignment operator, not implemented
	// Set as private to prevent from compiler automatic creation as public.
	YFAirventViewerFeedbackManager & operator = (const YFAirventViewerFeedbackManager &iObjectToCopy);

	// ViewerFeedbackCB
	// ----------------
	// It's callback to react at viewer interaction
	//
	void ViewerFeedbackCB          (CATCallbackEvent  iEventAlarm,
		void             *iAlarm,
		CATNotification  *iNotifAlarm,
		CATSubscriberData iBurglarData,
		CATCallback       iCallBack );

	// WindowActivatedCB/WindowDeactivatedCB
	// -----------------------------------------------
	// It's callbacks to react at window modifications
	// in the layout: window deletion, creation, activation,
	// deactication ...
	//
	void WindowActivatedCB          (CATCallbackEvent  iEventAlarm,
		void             *iAlarm,
		CATNotification  *iNotifAlarm,
		CATSubscriberData iBurglarData,
		CATCallback       iCallBack );

	void WindowDeactivatedCB          (CATCallbackEvent  iEventAlarm,
		void             *iAlarm,
		CATNotification  *iNotifAlarm,
		CATSubscriberData iBurglarData,
		CATCallback       iCallBack );

	// PathElementString
	// ------------------
	// This method transforms the path in a string
	//
	void  PathElementString(CATPathElement   * ipPath, 
		CATUnicodeString & oPathName) ;
	// ChangeBagPosition
	// ------------------
	// This method sets the graphic representation bag near
	// of the mouse position. 
	void ChangeBagPosition(float Xpos, float Ypos) ;

private :

	// The graphic representation bag to display
	// viewer feedback: mouse position, objects under the mouse, ...
	//
	CAT2DBagRep   * _pInformationsToDisplay;

	// This bag is displayed in the main 2D viewpoint of the current viewer
	//
	CATViewer     * _pCurrentViewer ;

	// Callback's identifiers
	//
	CATCallback     _ViewerFeedbackCB ;
	CATCallback     _WindowActivatedCB ;
	CATCallback     _WindowDeactivatedCB ;
	CATCallback     _WindowDeletedCB ;

	CATMathPoint		_mathPickPt;		//拾取三维点
	CATMathPoint2D		_math2DPt;			//拾取二维点
	CATBaseUnknown		*_piUnknown;		//拾取对象

};

//-----------------------------------------------------------------------

#endif
