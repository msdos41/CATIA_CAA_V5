// COPYRIGHT Dassault Systemes 2019
//===================================================================
//
// GeneralClass.h
// Header definition of GeneralClass
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2019  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#ifndef GeneralClass_H
#define GeneralClass_H

#include "GeneralClsM.h"
#include "CATBaseUnknown.h"
//#include "YFOGeneralClass.h"

#include <windows.h>
#include <WinBase.h>
//-----------------------------------------------------------------------
// System
#include "CATUnicodeString.h"
#include "CATIUnknownList.h"
#include "CATVariant.h"
#include "CATAutoConversions.h"
#include "CATListOfCATUnicodeString.h"
#include "CATSettingRepository.h"
#include "CATGetEnvValue.h"
//ApplicationFrame
#include "CATApplicationFrame.h"
#include "CATFrmEditor.h"
//DI0PANV2 
#include "CATDlgNotify.h"
//DraftingInterfaces 
#include "CATIDftSheet.h"
#include "CATIDftDocumentServices.h"
#include "CATIDftDrawing.h"
#include "CATIDrawing.h"
#include "CATISheet.h"
#include "CATIView.h"
#include "CATIDftView.h"
#include "CATIDftText.h"
#include "CATIDrwFactory.h"
#include "CATIDrwAnnotationFactory.h"
#include "CATIDrwTextProperties.h"
#include "CATIADrawingComponent.h"
#include "CATIDftFormat.h"
#include "CATIDftDrawingFormats.h"
#include "CATIDftSheetFormat.h"
#include "CATIADrawingTextProperties.h"
//SketcherInterfaces 
#include "CATI2DDetail.h"
#include "CATI2DWFFactory.h"
#include "CATIMove2D.h"
#include "CATI2DGeometricOperators.h"
//Mathematics 
#include "CATMathTransformation2D.h"
#include "CATMathLine2D.h"
#include "CATMathPoint2D.h"
//ObjectModelerBase 
#include "CATIDocId.h"
#include "CATIDocRoots.h"
#include "CATDocument.h"
#include "CATIAlias.h"
#include "CATDocumentServices.h"
#include "CATFormat.h"
#include "CATICutAndPastable.h"
#include "CATSession.h"
#include "CATIEditor.h"
//ProductStructure 
#include "CATIProduct.h"
// KnowledgeInterfaces 
#include "CATIParmPublisher.h"
#include "CATICkeParm.h"
//ObjectSpecsModeler 
#include "CATISpecAttrAccess.h"
#include "CATISpecAttribute.h"
#include "CATISpecAttrKey.h"
#include "CATTime.h"
#include "CATTimeSpan.h"
#include "CATLib.h"
#include "CATIDescendants.h"
#include "iostream.h"
#include <cmath>
#include <string>
#include <windows.h>
#include <fstream>
#include <vector>
#include "afx.h"
#include "winsock.h"
//System
#include "CATInstantiateComponent.h"
#include "CATIUnknownListImpl.h"
//ObjectSpecsModeler 
#include "CATISpecObject.h"
#include "CATLISTV_CATISpecObject.h"
#include "CATLISTV_CATISpecAttrKey.h"

//InteractiveInterfaces 
#include "CATIBuildPath.h"
#include "CATIIniInteractiveSession.h"

//KnowledgeInterfaces 
#include "CATICkeFunctionFactory.h"
#include "CATCkeGlobalFunctions.h"
#include "CATICkeParameterSet.h"
#include "CATIInstance.h"

//Visualization 
#include "CATHSO.h"
#include "CATISO.h"
#include "CATIVisProperties.h"
#include "CATI2DGeoVisu.h"
#include "CATModelForRep3D.h"

#include "CAT2DRep.h"
#include "CAT2DBoundingBox.h"
//VisualizationBase
#include "CATAnchorPoint.h"
#include "CAT3DCustomRep.h"
#include "CAT3DAnnotationTextGP.h"
#include "CATGraphicAttributeSet.h"
//GSMInterfaces
#include "CATIGSMProceduralView.h"
#include "CATIGSMFactory.h"
#include "CATIGSMAssemble.h"
//MecModInterfaces
#include "CATIPrtContainer.h"
#include "CATIMfBRep.h"
#include "CATIGeometricalElement.h"
#include "CATIBodyRequest.h"
#include "CATIIsolate.h"
#include "CATIGSMTool.h"
#include "CATIFeaturize.h"
#include "CATIMechanicalRootFactory.h"
//ObjectModelerBase 
#include "CATInit.h"
//NewTopologicalObjects 
#include "CATBody.h"
#include "CATCell.h"
#include "CATFace.h"
#include "CATSurface.h"
#include "CATVolume.h"
#include "CATPositionPtVolOperator.h"
#include "CATLoop.h"
//ProductStructure 
#include "CATIMovable.h"

//GeometricObjects 
#include "CATCurve.h"
#include "CATPoint.h"
#include "CATCrvParam.h"
#include "CATSurParam.h"
#include "CATCircle.h"
#include "CATLine.h"
#include "CATEdgeCurve.h"
#include "CATEdge.h"
#include "CATMathBox2D.h"
#include "CATIMf3DAxisSystem.h"
//DraftingInterfaces
#include "CATIGenerSpec.h"
#include "CATIDftElementWithLeader.h"
#include "CATIDftTextProperties.h"
#include "CATIDftGenView.h"
#include "CATIDftGenGeomAccess.h"
#include "CATIDftGenGeom.h"
#include "CATIDrwGenDrawShape.h"
#include "CATDimDefinition.h"
#include "CATIADrawingView.h"
#include "CATIADrawingPictures.h"
#include "CATIADrawingPicture.h"
#include "CATIDrwDressUp.h"
#include "CATIDrwText.h"
#include "CATIDftTextRange.h"
#include "CATIDrwDimValue.h"
#include "CATIDrwDimValueComponent.h"
#include "CATIDrwDimDimensionLine.h"
#include "CATIADrawingTables.h"
#include "CATIADrawingTable.h"
#include "CATIAGenerativeViewBehavior.h"
#include "CATIAGenerativeViewLinks.h"
#include "CATLISTV_CATMathPoint.h"
#include "CATIModelEvents.h"
#include "CATModifyVisProperties.h"
//SketerInterface
#include "IDMCurve2D.h"
#include "CATI2DCurve.h"
//MechanicalModeler 
#include "CATMmrLinearBodyServices.h"
#include "CATIPartRequest.h"
#include "CATMfBRepDecode.h"
//SpaceAnalysisInterfaces 
#include "CATIMeasurableInContext.h"
#include "CATIMeasurable.h"
//MeasureGeometryInterfaces 
#include "CATIMeasurableCircle.h"
//ApplicationFrame
#include "CATAfrCommandHeaderServices.h"

#include "CreateDistanceMinTopo.h"
#include "CATGeoFactory.h"
#include "CATSoftwareConfiguration.h"
#include "CATTopData.h"
#include "CATTopPointOperator.h"
#include "CATIContainerOfDocument.h"
#include "CATIContainer.h"

#include "CATPlane.h"
#include "CATSurface.h"
#include "CATSurLimits.h"
#include "CATHybIntersect.h"
#include "CATTopSkin.h"
#include "CATVertex.h"
#include "CATSurLimits.h"

#include "ListPOfCATBody.h"
#include "CATTransfoManager.h"
#include "CATHybAssemble.h"
#include "CATCreateTopAssemble.h"
#include "CATCreateTopProject.h"
#include "CATHybProject.h"

#include "CATDynMassProperties3D.h"
#include "CATMathDef.h"
#include "CATWire.h"

//MechanicalModelerUI
#include "CATFeatureImportAgent.h"

#include <map>
#include "float.h"

#include "CATExtIDlgTableViewModel.h"
#include "CATListPtrCATIProduct.h"
#include "CATPathElementAgent.h"
#include "CATIPrtPart.h"
#include "CATIBRepAccess.h"

#include "CATTopWire.h"
#include "CATCrvLimits.h"
#include "CATTopWire.h"
#include "CATTopWire.h"

#include "CATIMfMonoDimResult.h"
#include "CATIDftRough.h"

#include "CATMmrInterPartCopy.h"
#include "CATIDatumFactory.h"

#include "CATIDrwSubString.h"
#include "CATTopVertex.h"
#include "CATCartesianPoint.h"
#include "CATTopLineOperator.h"
/***********************************************/

#include "CATMfErrUpdate.h"
#include "CATIContainerOfDocument.h"
#include "CATIPrtPart.h"
#include "CATIBRepAccess.h"

//ObjectModelerBase 
#include "CATIContainer.h"
//NewTopologicalObjects 
#include "CATTopData.h"
#include "CATVertex.h"
#include "ListPOfCATBody.h"
#include "CATWire.h"

//ProductStructure 
#include "CATListPtrCATIProduct.h"
#include "CATIPrdProperties.h"

//GeometricObjects 
#include "CATPlane.h"
#include "CATSurLimits.h"
#include "CATTransfoManager.h"

//DraftingInterfaces
#include "CATIADrawingComponents.h"
#include "CATIADrawingSheet.h"
//SketerInterface
#include "CATI2DWFGeometry.h"
#include "CATI2DDitto.h"
#include "CATI2DAxis.h"
#include "CATI3DCamera.h"
//Mathematics
#include "CATMathDef.h"
//BasicTopologicalOpe 
#include "CATTopPointOperator.h"

//MechanicalModelerUI 
#include "CATFeatureImportAgent.h"

//DialogEngine
#include "CATOtherDocumentAgent.h"
#include "CATPathElementAgent.h"

//TopologicalOperators
#include "CATTopBodyExtremum.h"
#include "CATDistanceMinBodyBody.h"
#include "CATHybIntersect.h"
#include "CATTopSkin.h"
#include "CATHybAssemble.h"
#include "CATCreateTopAssemble.h"
#include "CATCreateTopProject.h"
#include "CATHybProject.h"
#include "CATDynMassProperties3D.h"
#include "CATTopPrism.h"

//InfInterfaces
#include "CATIADocument.h"
#include "CATIASelection.h"

//SpaceAnalysisInterfaces 
#include "CATIInertia.h"

//CATObjectModelerNavigator 
#include "CATIRedrawEvent.h"


//CATInteractiveInterfaces 
#include "CATIBuildPath.h"

#include "CATICkeRelationFactory.h"

//COM
#include "CATIDrwSubString.h"
#include "CATTopVertex.h"
#include "CATCartesianPoint.h"
#include "CATTopLineOperator.h"

#include "string.h"
#include "fstream.h"
#include "sstream.h"
#include "iostream.h"
#include <cmath>
#include <string>
#include <windows.h>
#include <fstream>
#include <vector>
#include "afx.h"
#include "winsock.h"
#include <comdef.h>
#include <tlhelp32.h>

#include "CATIMechanicalFeature.h"
#include "CATIShape.h"
#include "CATIMechanicalTool.h"

#include "CATFrmLayout.h"
#include "CATFrmWindow.h"
#include "CATFrmNavigGraphicWindow.h"
#include "CATNavigBox.h"
#include "CATCafCenterGraph.h"
#include "CATI3DGeoVisu.h"
#include "CATRep.h"
#include "CATViewer.h"
#include "CAT3DViewer.h"
#include "CAT3DRep.h"
#include "CAT3DViewer.h"

#include "CATIMeasurablePoint.h"
#include "CATShell.h"
#include "CATDistanceMinPtSur.h"
#include "CATLISTV_CATMathPoint.h"
#include "CATLISTV_CATMathLine.h"
#include "CATIDatumFactory.h"
#include "CAT3DViewer.h"
#include "CAT3DViewer.h"
#include "CAT3DViewer.h"

#define mathPi 3.1415926535897931
#define offsettolerance 0.00001
//考虑删除
#define _testDirection "C:\\ToolTestData\\"

#define TOLMINDISTANCE 0.004	//点到面的距离的公差值

using namespace std;
/**
* Class representing xxx.
*
* <br><b>Role</b>: Provide the basic class function...
* <p>
* Do not use the @href MYGeneral constructor to
* do such and such but instead...
*
* @example
*  // example is optional
*  pObject = new MYGeneral;
*  pObject->SetXXX(...);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
//从char转到unicodestring,主要用于解决中文字符的乱码显示
CATUnicodeString ExportedByGeneralClsM CAAUStringBuildFromChar(char * strchar);
//从unicodestring转到char*,主要用于解决中文字符的乱码显示
void ExportedByGeneralClsM CAAUStringConvertToChar(CATUnicodeString strUnicode,char* strchar );
//从unicodestring转到wchar_t*,主要用于解决中文字符的乱码显示
void ExportedByGeneralClsM CAAUStringConvertToWChar(CATUnicodeString strUnicode, wchar_t* strwcANSI);

//直线相交
bool ExportedByGeneralClsM D3LinesGetCrossPoint(double line1P1[3],double line1P2[3],double line2P1[3],double line2P2[3],double returnArray[3]);
//平行向量
bool ExportedByGeneralClsM D3VectorsParallel(double vec1[3],double vec2[3] );
//判断3D向量是否相等
bool ExportedByGeneralClsM D3VectorEqual(double v1[3],double v2[3]);
//通过两个面相交出一条线
bool ExportedByGeneralClsM D3PlanesGetCrossLine(double plane1Origin[3], double plane1Direction[3], double plane2Origin[3], double plane2Direction[3],double outCrossLineOrigin[3], double outCrossLineDir[3]);
//通过两点计算向量
void ExportedByGeneralClsM D3VectorSetFromTwoPoint(double P1[3],double P2[3],double returnArray[3]);
//数组拷贝
void ExportedByGeneralClsM D3ArrayCopy(double inArray[3],double returnArray[3]);
//清空一个数组
void ExportedByGeneralClsM D3ArrayClear(double inArray[3]);
//取两个3D点的中点
void ExportedByGeneralClsM D3GetMidPoint(double P1[3],double P2[3],double returnArray[3]);
//通过比例控制向量大小
void ExportedByGeneralClsM D3VectorScal(double vec[3],double scal,double returnArray[3]);
//移动3D点
void ExportedByGeneralClsM D3PointMove(double point[3],double vec[3],double returnArray[3]);
//3D点通过Y向获得一条向量
void ExportedByGeneralClsM D3VectorGetProjectY(double vectoProjected[3],double vecAxis[3],double returnArray[3]);
//3D点通过X向获得一条向量
void ExportedByGeneralClsM D3VectorGetProjectX(double vectoProjected[3],double vecAxis[3],double returnArray[3]);
//3D向量减
void ExportedByGeneralClsM D3VectorReduce(double v1Reduced[3],double v2[3],double returnArray[3]);
//3D向量单位化
void ExportedByGeneralClsM D3VectorUnit(double vec[3],double returnArray[3]);
//3D向量旋转
void ExportedByGeneralClsM D3VectorRotate(double vs[3],double vnormal[3],double ang,double returnArray[3]);
//vec1和vec2的叉积
void ExportedByGeneralClsM D3CrossProduct(double vec1[3],double vec2[3],double returnArray[3] );
//计算3D反向向量
void ExportedByGeneralClsM D3VectorSymmetric(double vec[3],double returnArray[3]);
//向量和
void ExportedByGeneralClsM D3VectorSum(double v1[3],double v2[3],double returnArray[3]);
//3D点投影到面上
void ExportedByGeneralClsM D3PointProjectOnPlane(double pointToProjected[3], double originPoint[3], double Direction[3],double returnArray[3]);
//3D点投影到面上
void ExportedByGeneralClsM D3PointProjectOnPlane(double pointToProjected[3], double originPoint[3], double vecX[3], double vecY[3], bool transformto2D,double returnArray[]);
//3D点投影在线上
void ExportedByGeneralClsM D3PointProjectOnLine(double LineStartPoint[3],double LineEndPoint[3],double AnyPoint[3],bool transformto2D,double returnArray[]);
//3D点沿指定方向投影在线上
void ExportedByGeneralClsM D3PointProjectOnLineAlongDir(double LineStartPoint[3], double LineEndPoint[3], double AnyPoint[3], double projectDirection[3], bool transformto2D,double returnArray[]);
//计算3D向量角度
double ExportedByGeneralClsM D3VectorAngle(double v1[3],double v2[3]);
//点积
double ExportedByGeneralClsM D3DotProduct(double v1[3],double v2[3]);
//计算两点距离
double ExportedByGeneralClsM D3PointDistance(double point1[3],double point2[3]);
//计算向量的长度
double ExportedByGeneralClsM D3VectorLen(double vec[3]);
//计算角度
double ExportedByGeneralClsM D3AngleNew(double a1);



//2D向量单位化
void ExportedByGeneralClsM D2VectorUnit(double vec[2],double returnArray[2]);
//计算角度
void ExportedByGeneralClsM D2VectorScal(double vec[2],double scal,double returnArray[2]);
//移动2D点
void ExportedByGeneralClsM D2PointMove(double point[2],double vec[2],double returnArray[2] );
//通过两点计算向量
void ExportedByGeneralClsM D2VectorSetFromTwoPoint(double P1[2],double P2[2],double returnArray[2]);
//2D向量减
void ExportedByGeneralClsM D2VectorReduce(double v1Reduced[2],double v2[2],double returnArray[2]);
//获取中点
void ExportedByGeneralClsM D2GetMidPoint(double P1[2],double P2[2],double returnArray[2]);
//计算向量和
void ExportedByGeneralClsM D2VectorSum(double v1[2],double v2[2],double returnArray[2]);
//计算向量之间距离
double ExportedByGeneralClsM D2PointDistance(double point1[2],double point2[2]);
//计算长度
double ExportedByGeneralClsM D2VectorLen(double vec[2]);
//数组拷贝
void ExportedByGeneralClsM D2ArrayCopy(double inArray[2],double returnArray[2]);





//判断文件是否存在
bool ExportedByGeneralClsM DirExists(const std::string& dirName_in);
//读取txt文本并进行排序
void ExportedByGeneralClsM ReadTxtFileAndRankStringFunc(CATUnicodeString strFileName, CATListOfCATUnicodeString& oAlphabeticalOrderLst);
//获取文本的内容
HRESULT ExportedByGeneralClsM GetTextInfor(CATUnicodeString strFileName,CATListOfCATUnicodeString& Lst);

//获取系统时间
void ExportedByGeneralClsM GetSYSLocalTime(long& oStartTime);
//获取系统时间
CATUnicodeString ExportedByGeneralClsM GetStrCurrentLocalTime();

CATUnicodeString ExportedByGeneralClsM GetDurationTime(long iStartTime);

//获取进程ID
vector<int> ExportedByGeneralClsM GetExcelProcessIdFunc();
//关闭后台excel进程
void ExportedByGeneralClsM RemoveExcelProcessFunc(vector<int> iOldPid,vector<int> iNewPid);

//获取当前窗口文档名称
CATUnicodeString ExportedByGeneralClsM GetDocumentNameFunc(const CATUnicodeString &strDrawingFullName);
//窗体跳转
HRESULT ExportedByGeneralClsM JumpToAnotheerWIndowsFunc(CATDocument* opDoc);
//关闭文件
HRESULT ExportedByGeneralClsM CloseDocEditFunc(CATDocument* opDoc);

//更新元素
HRESULT ExportedByGeneralClsM ObjectUpdate(const CATISpecObject_var & ispSpec);
//显示隐藏对象
void ExportedByGeneralClsM HideSpecObject(CATISpecObject_var spSpec,CATBoolean bShown);
//判断显示隐藏
CATBoolean ExportedByGeneralClsM CheckShowState(CATISpecObject_var spSpec);
//获取对象的名字
CATUnicodeString ExportedByGeneralClsM GetSpecBasicName(const CATBaseUnknown_var &CurrentSpec);
//修改元素名称
HRESULT ExportedByGeneralClsM SetObjectName( CATISpecObject_var spObj, CATUnicodeString objectName);
//复制粘贴 *****待定
HRESULT ExportedByGeneralClsM CopyPasteSpecObject(CATISpecObject_var ispiSpecOnChild,CATISpecObject_var ispiSpecOnNewFather,CATBoolean iLink);


//刷新结构树 *****待定
void ExportedByGeneralClsM UpdateTreeAndRedraw( CATISpecObject_var ispSpec );
//添加元素 *****待定
HRESULT ExportedByGeneralClsM AppendObject(CATISpecObject_var spSpecFather, CATISpecObject_var spSpecChild, CATUnicodeString strNameForObject, CATBoolean iShowOrHide);

//字符转换
//char*转Unicodestring
CATUnicodeString ExportedByGeneralClsM StringBuildFromChar(char * strchar);
//Unicodestring转char*
void ExportedByGeneralClsM StringConvertToChar(CATUnicodeString strUnicode,char* strchar );
//Unicodestring转wchar_t*
void ExportedByGeneralClsM StringConvertToWChar(CATUnicodeString strUnicode, wchar_t* strwcANSI);

//分割字符
CATBoolean ExportedByGeneralClsM SplitString(CATUnicodeString iStrString, CATUnicodeString iStrSplit, CATListOfCATUnicodeString &oStrList);
CATBoolean ExportedByGeneralClsM SplitStringUpdate( CATUnicodeString iStrString, CATUnicodeString iStrSplit, CATListOfCATUnicodeString &oStrList );
//删除数字字符串末尾的0
void ExportedByGeneralClsM RemoveLastZeroesFromString(CATUnicodeString &ioString);

//获取历史记录
CATBoolean ExportedByGeneralClsM RetrieveHistorySetting(CATUnicodeString istrRepository, CATUnicodeString istrSettingName, CATUnicodeString &ostrSettingValue);
//设置历史记录
CATBoolean ExportedByGeneralClsM SetHistorySetting(CATUnicodeString istrRepository, CATUnicodeString istrSettingName, CATUnicodeString istrSettingValue);
//填写错误日志
CATBoolean ExportedByGeneralClsM WriteErrorLog(CATUnicodeString strErrorPath,CATUnicodeString strErrorMsg);
//添加开始使用记录 ----目前只适用于延锋
HRESULT ExportedByGeneralClsM AddStartUsedHistory(CATUnicodeString istrFuncString,CATUnicodeString &ostrUserInfo,CATTime &oStartTime,CATUnicodeString &ostrErrorPath);
//添加结束使用记录 ----目前只适用于延锋
void ExportedByGeneralClsM AddEndUsedHistory(long iStartTime,CATUnicodeString istrBaseInfo);

//提示信息
//跳出提示框通用
int ExportedByGeneralClsM CAAMessageBox(CATUnicodeString message,CATUnicodeString title,CATDlgStyle iStyle);
//输出信息Info
void ExportedByGeneralClsM MessageOutputInfo (CATUnicodeString iString,CATUnicodeString iTopString);
//跳出提示框Warning
void ExportedByGeneralClsM MessageOutputWarning (CATUnicodeString iString,CATUnicodeString iTopString);
//跳出提示框Error
void ExportedByGeneralClsM MessageOutputError (CATUnicodeString iString,CATUnicodeString iTopString);
//跳出提示框OK与cancel
CATBoolean CreateMsgBoxOptOKCancel(CATUnicodeString usMsg);

//叉积运算3d
HRESULT ExportedByGeneralClsM MathCrossProductFunc(CATMathVector iVectorFirst,CATMathVector iVectorSecond,CATMathVector& oNewVecter);
//获取点的最小距离
void ExportedByGeneralClsM GetTwoMinDistancePt(CATLISTV(CATMathPoint) iMathPtList,CATMathPoint imathCenterPt,CATMathPoint &omathPt1,CATMathPoint &omathPt2);
//计算出ISO视角 全局
CATMathPlane ExportedByGeneralClsM GetAbsIsoViewDirection();
//根据输入的原点和三个方向，获取该局部坐标系下的iso view视角
HRESULT ExportedByGeneralClsM GetIsoViewDirection(double iarrOrigin[3], double iarrDirX[3], double iarrDirY[3], double iarrDirZ[3], double oarrIsoDir[3], double oarrHDir[3], double oarrVDir[3]);
//旋转2d点
void ExportedByGeneralClsM Rotate2DPointFunc(double OrinPoint[2],double NewPoint[2],double Angle);

//添加高亮 
CATBoolean ExportedByGeneralClsM AddHSO(CATBaseUnknown_var ispSpecSelect);
//追加高亮 
void ExportedByGeneralClsM UpdateHSO(CATBaseUnknown_var ispSpecObj,CATFrmEditor*ipEditor,CATHSO * ipHSO);
void ExportedByGeneralClsM UpdateHSO(CATLISTV(CATISpecObject_var) LstObject,CATFrmEditor*ipEditor,CATHSO * ipHSO);
//清空高亮 
CATBoolean ExportedByGeneralClsM EmptyHSO();
//对象添加高亮 VB接口
HRESULT ExportedByGeneralClsM AddHightlightFor2DObject(CATBaseUnknown_var spSpecObj,bool empty);

//获取元素的路径 
void ExportedByGeneralClsM PathElementString(CATPathElement *ipPath,CATUnicodeString &strPathName);
void ExportedByGeneralClsM PathElementString(CATFeatureImportAgent *ipFeatImpAgt,CATUnicodeString &strPathName);

//打印属性 ----目前只适用于延锋
void ExportedByGeneralClsM PrintAttributes(CATISpecObject_var ispSpecObject);
//获取视图属性 
HRESULT ExportedByGeneralClsM YFGetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, CATISpecObject_var &ospiSpecGetObj); 
HRESULT ExportedByGeneralClsM YFGetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, CATBoolean obBool); 
HRESULT ExportedByGeneralClsM YFGetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, CATLISTV(CATUnicodeString) &oLstStrings);
HRESULT ExportedByGeneralClsM YFGetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, CATListOfDouble &oLstDouble);
HRESULT ExportedByGeneralClsM YFGetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, CATListOfInt &oLstInteger);
HRESULT ExportedByGeneralClsM YFGetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, int &oValue);
HRESULT ExportedByGeneralClsM YFGetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, double &oValue);
HRESULT ExportedByGeneralClsM YFGetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, CATUnicodeString &ostrValue);
HRESULT ExportedByGeneralClsM YFGetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, CATLISTV(CATISpecObject_var) &olstSpecObj);
//写入视图属性 
HRESULT ExportedByGeneralClsM YFSetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, CATISpecObject_var ispiSpecSetObj);
HRESULT ExportedByGeneralClsM YFSetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, CATBoolean ibBool);
HRESULT ExportedByGeneralClsM YFSetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, CATLISTV(CATUnicodeString) iLstStrings);
HRESULT ExportedByGeneralClsM YFSetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject,CATUnicodeString istrKey,CATListOfDouble iValueList);
HRESULT ExportedByGeneralClsM YFSetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject,CATUnicodeString istrKey,CATListOfInt iValueList);
HRESULT ExportedByGeneralClsM YFSetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, int iValue);
HRESULT ExportedByGeneralClsM YFSetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, double iValue);
HRESULT ExportedByGeneralClsM YFSetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, CATUnicodeString istrValue);
HRESULT ExportedByGeneralClsM YFSetSpecObjectAttrEx(CATISpecObject_var ispiSpecObject, CATUnicodeString istrKey, CATLISTV(CATISpecObject_var) ilstSpecObj);
//获取视图所有属性 
HRESULT ExportedByGeneralClsM YFGetSpecAttrInfo(CATISpecObject_var ispiSpecOnObject);
//获取视图属性类型 
CATUnicodeString ExportedByGeneralClsM YFGetSpecAttType(CATAttrKind iAttrType);
//获取属性 
CATUnicodeString ExportedByGeneralClsM YFGetSpecAttrValue(CATISpecAttrAccess_var spiSpecAttrAccess,CATUnicodeString iStrAttrName,int iIndex,CATAttrKind iAttrType,CATBoolean &oIsBRepFeature);
//移除属性
HRESULT ExportedByGeneralClsM YFRemoveSpecObjectAttrEx(CATISpecObject_var ispiSpecObject,CATLISTV(CATUnicodeString) iLstStrings);

//打开文件 part\product ******TBD
HRESULT ExportedByGeneralClsM OpenCATPrdFromPath(CATUnicodeString istrPath, CATISpecObject_var &ospSpecObject, CATUnicodeString &ostrPartNumber, CATUnicodeString &ostrType);

//获取文档窗口，通过名称 ******TBD
void ExportedByGeneralClsM GetFrmWindowByName(CATUnicodeString WindName , CATFrmWindow** owindow);

//获取Doc
HRESULT ExportedByGeneralClsM GetReferencePrdDocument(CATIProduct_var ispiInstanceProduct,CATDocument *&opDocument);
void ExportedByGeneralClsM GetPrtContFromPrd(CATIProduct_var ispiPrd, CATIPrtContainer_var & ospiCont,CATISpecObject_var &ospPrtPart);
//获取文档类型
HRESULT ExportedByGeneralClsM GetDocumentType(CATDocument *ipDocument,CATUnicodeString &ostrType);
//获取文档类型 ******TBD
CATUnicodeString ExportedByGeneralClsM GetDocumentType( CATFrmWindow * pWind,CATDocument ** pDoc );

//获取所有的根节点doc ******TBD
HRESULT ExportedByGeneralClsM GetAllRootDocument(CATLISTV(CATISpecObject_var) &oListOfRootObjects,CATListOfCATUnicodeString &oListOfRootObjectNames);
//获得当前打开的根节点，包括Part和Product
HRESULT ExportedByGeneralClsM GetRootProduct(CATIProduct_var &ospiRootProduct);
//从文档获取根产品 ，包括Part和Product
CATIProduct_var ExportedByGeneralClsM GetRootProductFromDoc(CATDocument * ipDocument);

//获得子集
HRESULT ExportedByGeneralClsM GetAllChildrenOfRootPrd(CATIProduct_var ispProjPrd,CATLISTV(CATISpecObject_var) &oListOfObject);
//获得part 子集
HRESULT ExportedByGeneralClsM GetAllPartsOfPrd(CATIProduct_var ispProjPrd,CATLISTV(CATISpecObject_var) &oListOfObject);

//判断是否是Product
CATBoolean ExportedByGeneralClsM IsProduct(CATIProduct_var ispiPrd);
//判断是否是Part
CATBoolean ExportedByGeneralClsM IsCATPart(CATPathElementAgent *pSelectPartAgent);
//判断是否为父级节点 向上1级 ******TBD
CATBoolean ExportedByGeneralClsM CheckFather(CATIProduct_var ispChild,CATIProduct_var ispFather);
//判断是否为子级节点 向下遍历 ******TBD
CATBoolean ExportedByGeneralClsM CheckChild(CATIProduct_var ispChild,CATIProduct_var ispFather);
//检查是否同一个参考对象
HRESULT ExportedByGeneralClsM CheckSameReferencePart(CATIProduct_var spiPro1,CATIProduct_var spiPro2);
//去除列表中重复的Part
HRESULT ExportedByGeneralClsM DeleteRepeatPart(CATLISTV(CATISpecObject_var)& ioListOfPartToDeleteRepeat);
//获取数学线
CATMathLine ExportedByGeneralClsM GetMathLine(CATBaseUnknown_var ispiSpecObject);
//获取数学点
CATMathPoint ExportedByGeneralClsM GetMathPoint(CATBaseUnknown_var ispiSpecPoint);
//获取点
CATPoint_var ExportedByGeneralClsM GetPoint(CATBaseUnknown_var ispiSpecObject);
//获取GeoFactory和container
ExportedByGeneralClsM CATGeoFactory*  GetProductGeoFactoryAndPrtCont(CATIProduct_var ispProduct,CATIPrtContainer_var &ospiCont);
//获取container
CATIPrtContainer_var ExportedByGeneralClsM GetPrtContainer(CATIProduct_var ispiObject);
//获取container
HRESULT ExportedByGeneralClsM GetContOfPartDocument(CATDocument *ipDocument,CATIPrtContainer_var &opiCont);
//获取GeoFactory
ExportedByGeneralClsM CATGeoFactory*  GetCATGeoFactory(CATDocument * ipDoc);

//获取选择元素所在的product
void ExportedByGeneralClsM SelectTransfer(CATPathElementAgent *ipPathElemAgt, CATIProduct_var &ospiProduct);
//转换输入 ******TBD
void ExportedByGeneralClsM TransferSelect(CATPathElementAgent *pPathElementAgent,CATBaseUnknown_var &ospBUSelection, CATIProduct_var &ospProductSeletion);
//选择元素，转换成BaseUnknown，并同时返回所属Product(Instance)
void ExportedByGeneralClsM TransferSelectToBU(CATFeatureImportAgent *pFeatAgent,CATBaseUnknown *&opBUSelection, CATIProduct_var &ospProductSeletion);
//从BaseUnknown中获取特征
CATISpecObject_var ExportedByGeneralClsM TransferBUtoSpecObj(CATBaseUnknown_var ispBaseUnkn);

//在零件根目录下下创建PrtTool
HRESULT ExportedByGeneralClsM CreateNewPrtTool(CATIProduct_var ispiProd,CATUnicodeString istrName,CATISpecObject_var &ospiSpecPrtTool);
//在零件根目录下创建GeoSet，创建前先判断是否已经存在
HRESULT ExportedByGeneralClsM CreateNewGeoSet(CATIProduct_var ispiProd,CATUnicodeString istrName,CATISpecObject_var &ospiSpecGeoSet);

//修改线的颜色，线型，宽度
HRESULT ExportedByGeneralClsM SetCurveFormat(CATISpecObject_var ispSpeObj,unsigned short iMask,unsigned short iWeight,unsigned char iRed,unsigned char iGgren,unsigned char iBlue);
//修改面的颜色
HRESULT ExportedByGeneralClsM SetCurveFormat( CATISpecObject_var ispSpeObj,unsigned char iRed,unsigned char iGgren,unsigned char iBlue );

//获取单3D Geometrical Element ******TBD
void ExportedByGeneralClsM GetGeomElmFromGSetAndBody(CATISpecObject_var ispiGSet,vector<CATISpecObject_var>& ospiGeomElmList ,vector<CATISpecObject_var>& ospiGSMElmList ,vector<CATISpecObject_var>& ospiSolidElmList );
//根据名称获取几何集 ******TBD
HRESULT ExportedByGeneralClsM GetGeometricalSet(CATISpecObject_var ispSpecObject, CATUnicodeString istrGeometrySet, CATISpecObject_var &ospGeometrySet);
//根据名称获取元素 ******TBD
HRESULT ExportedByGeneralClsM GetFeatureOfGeometricalSet(CATISpecObject_var ispGeometricalSet, CATUnicodeString strFeatureName, CATISpecObject_var &ospFeature);

//获取Part下是否存在参数集，参数集下的参数值是否正确
HRESULT ExportedByGeneralClsM IsParameterExitFunc(CATISpecObject_var ispiMasterPart,CATUnicodeString istrCkeParameterSet,CATUnicodeString istrParameterName,CATUnicodeString istrParameterValue);
//获取Part下特定参数的double值
HRESULT ExportedByGeneralClsM GetParameterDoubleValueFunc(CATISpecObject_var ispiMasterPart,CATUnicodeString istrCkeParameterSet,CATUnicodeString istrParameterName,double& odblValue);
//获取Part下特定参数的string值
HRESULT ExportedByGeneralClsM GetParameterStringValueFunc( CATISpecObject_var ispiMasterPart,CATUnicodeString istrCkeParameterSet,CATUnicodeString istrParameterName,CATUnicodeString& ostrValue);
//设置Part下特定参数的double值
HRESULT ExportedByGeneralClsM SetParameterDoubleValueFunc(CATISpecObject_var ispiMasterPart,CATUnicodeString istrCkeParameterSet,CATUnicodeString istrParameterName,double idblValue);
//设置Part下特定参数的string值
HRESULT ExportedByGeneralClsM SetParameterDoubleValueFunc(CATISpecObject_var ispiMasterPart,CATUnicodeString istrCkeParameterSet,CATUnicodeString istrParameterName,CATUnicodeString istrValue);

//通过几何集与轴系名字获取轴系 ******TBD
CATISpecObject_var ExportedByGeneralClsM GetAxisFromPartFunc(CATISpecObject_var ispPro,CATUnicodeString istrAxisName,CATUnicodeString istrGeometricSet);

//获取绝对矩阵
CATMathTransformation ExportedByGeneralClsM GetAbsTransformation(CATISpecObject_var ispSpecOne);
//获取相对矩阵
CATMathTransformation ExportedByGeneralClsM GetMatrixTransformation(CATISpecObject_var spSpecOne, CATISpecObject_var spSpecTwo);
//body坐标变换(ispTargetProduct空时默认转化到绝对坐标系)
HRESULT ExportedByGeneralClsM GetTransformationBody(CATBody_var ispBody,CATIProduct_var ispOrginProduct,CATIProduct_var ispTargetProduct,CATBody_var& ospResultBody);

//获取特征的Body
CATBody_var ExportedByGeneralClsM GetBodyFromFeature( const CATBaseUnknown_var& ispFeature );
//获取part的最高级唯一body
HRESULT ExportedByGeneralClsM SelectBodyFromPartFunc(CATIPrtContainer_var ispiPartCont,CATBody_var& ospiBody);
//在模型树上的指定GeoSet中插入新建的对象
HRESULT ExportedByGeneralClsM InsertObjOnTree(CATIProduct_var ispProd,CATISpecObject_var ispiSpecGeoSet,CATUnicodeString istrObjName,CATBody *ipBody, CATISpecObject_var &ospiSpecObj);
//根据维数，从Cell转到body
ExportedByGeneralClsM CATBody*  CreateBodyFromCell(CATGeoFactory *ipGeoFactory, CATCell_var ispCell, int iDimension);

ExportedByGeneralClsM CATBody* CreateBodyFromDomain(CATGeoFactory *ipGeoFactory, CATDomain *ipDomain, int iDimension);
//Body根据3个方向获得6个极值点的Body---包围盒调用
void ExportedByGeneralClsM CreateExtremePoint(CATBody_var ispBody,CATGeoFactory_var ispGeoFac , CATMathVector iFirstVT,CATMathVector iSecondVT, CATMathVector iThirdVT,int iMaxOrMin,CATBody_var &ospPointBody);
//从曲线上一点走一段距离创建点Body
HRESULT ExportedByGeneralClsM CreatePointBodyOnCurve(CATIProduct_var ispiProductCurve,CATISpecObject_var ispiSpecCurve,CATMathPoint imathPointStart,double idblDistance,CATBody_var& ispPointBody);
//创建圆Body
HRESULT ExportedByGeneralClsM CreateCircle(CATGeoFactory_var spGeoFactory,CATTopData * topdata,CATMathPlane iMathPlane,double Radius,CATBody_var &ospBody);
//创建曲线的body
HRESULT ExportedByGeneralClsM CreateBodyFromCurveFunc(CATGeoFactory_var ispiGeoFactory,CATTopData * itopdata,CATCurve_var ispiCurve,CATBody_var &ospiBody);
//创建平面的body
CATBoolean ExportedByGeneralClsM CreatePlaneBody(CATGeoFactory_var spGeoFactory,CATTopData * topdata, CATMathPlane iMathPlane,CATBody_var &ospPlaneBody);
//获取线的中点
HRESULT ExportedByGeneralClsM GetMiddlePoint(CATBody_var spResultBody,CATGeoFactory* ipGeoFactory, CATTopData* itopdata,CATMathPoint &omiddlePoint);
//从body获取几何线
HRESULT ExportedByGeneralClsM GetCurveOfBody(CATBody_var spCurveBody,CATCurve_var &ospCurve);
//从对象获取几何线 ******TBD
HRESULT ExportedByGeneralClsM GetCurveOfSpecObject(CATISpecObject_var ispSpecOnCurve,CATCurve_var &ospCurve);
//从body获得数学点
HRESULT ExportedByGeneralClsM GetMathPtFromBody(CATBody_var ispPointBody,CATMathPoint& oMathPoint);
//从body获取数学点集合
HRESULT ExportedByGeneralClsM GetMathPtsFromBody(CATBody_var ispBody,CATLISTV(CATMathPoint) &oMathPtList);
//从body获取数学平面
HRESULT ExportedByGeneralClsM GetMathPlaneFromBody(CATBody_var ispBody,CATMathPlane& oMathPlane);

//获取数学面
CATMathPlane ExportedByGeneralClsM GetMathPlane(CATBaseUnknown_var ispiSpecObject);
//相交
ExportedByGeneralClsM CATBody*  CreateTopIntersect(CATGeoFactory* ipGeoFactory, CATTopData* itopdata,CATBody*iBody1,CATBody*iBody2);
HRESULT ExportedByGeneralClsM CreateTopAssembleLine(CATGeoFactory*ipGeoFactory,CATMathPoint iMathPoint,CATMathVector iMathVector,double idistance,CATBody_var &ospLineBody);
//投影
ExportedByGeneralClsM CATBody*  CreateTopProject(CATGeoFactory* ipGeoFactory, CATTopData* itopdata,CATBody* iBody1,CATBody* iBody2);
//元素相合
ExportedByGeneralClsM CATBody*  CreateTopAssembly(CATGeoFactory* ipGeoFactory,CATTopData* itopdata,CATLISTP(CATBody) ListOfBodyLst);
ExportedByGeneralClsM CATBody*  CreateNewTopAssembly(CATGeoFactory* ipGeoFactory,CATTopData* itopdata,CATLISTP(CATBody) ListOfBodyLst);

//获取投影元素 ******TBD
HRESULT  ExportedByGeneralClsM SortProjectionElements(CATListValCATISpecObject_var LstElem, CATListValCATISpecObject_var &LstRound2DH, CATUnicodeString strProdName);
HRESULT  ExportedByGeneralClsM SortProjectionElements(CATUnicodeString strProdName, CATListValCATISpecObject_var LstElem, CATListValCATISpecObject_var &oLstPrdCurve, CATListValCATISpecObject_var &oLstNoPrdCurve);

//获取元素中心位置  ******函数需修改
HRESULT ExportedByGeneralClsM GetCenterOfObject(CATIProduct_var ispPrd,CATISpecObject_var ispRefPrd,CATMathPoint &oCenterPt);
HRESULT ExportedByGeneralClsM GetCenterOfObject(CATIProduct_var ispPrd,CATISpecObject_var ispRefPrd,CATMathPoint &oCenterPt,double &odistance);
HRESULT ExportedByGeneralClsM GetCenterOfObject(CATIProduct_var ispPrd,CATISpecObject_var ispRefPrd,CATMathBox &oMathBox,CATMathPoint &oCenterPt);
//获取多段线的中点
HRESULT ExportedByGeneralClsM GetCenterPtOfCurves(CATLISTV(CATISpecObject_var) iListOfCurves,CATLISTV(CATISpecObject_var) iListOfCurvesPart,CATMathPoint &oMathPt);

//获取点坐标的字符
CATUnicodeString ExportedByGeneralClsM GetStringOfPointCoord(CATMathPoint imathPoint);
//从曲线上求三点
HRESULT ExportedByGeneralClsM GetThreePointsOnCurve(CATBody_var spResultBody,CATIProduct_var ispiBaseUnknownPro,CATMathPoint &oPoint1,CATMathPoint &oPoint2,CATMathPoint &oPoint3);
//通过3点求得圆的圆心和半径
void ExportedByGeneralClsM GetCenterAndRadius(CATMathPoint iPTA,CATMathPoint iPTB,CATMathPoint iPTC,CATMathPoint &oPT,double &oRadius);
//获取元素数学点
HRESULT ExportedByGeneralClsM GetMathPointFromPointSpec(CATISpecObject_var ispSpecOnPt,CATMathPoint &oMathPt);
//获取直线方向
HRESULT ExportedByGeneralClsM GetLineDirection(CATBaseUnknown_var ispiSpecObject,CATMathVector &oMathVec);
//获取轴系的原点和所有方向
HRESULT ExportedByGeneralClsM GetAxisOriginPoint(CATISpecObject_var ispAxiasObject, CATMathPoint &oMathPoint, CATMathVector &oFirstDirection, CATMathVector &oSecondDirection, CATMathVector &oThirdDirection);
//获取最小距离 ******TBD
void ExportedByGeneralClsM GetMinDistance(CATBaseUnknown_var spiSpec1, CATBaseUnknown_var spiSpec2, CATMathPoint &ioMathPoint1, CATMathPoint &ioMathPoint2, double &minDistance, CATBoolean &oissucess);
//获取面的中心点 *可能不准
HRESULT ExportedByGeneralClsM GetCenterOfSurface(CATBaseUnknown_var ispiSpecObject,CATMathPoint &omathOriginalPoint);
//求出一个点投影到某个直线上的位置
CATMathPoint ExportedByGeneralClsM PointProjectingOnLineAlongDirection(CATMathPoint iProjectingPoint, CATMathLine iLine, CATMathVector iDirection, double & oLength );
//求出一个空间点投影到某个平面上的位置
CATMathPoint ExportedByGeneralClsM PointProjectingOnViewAlongDirection( CATMathPoint ipoint, CATMathPoint viewOrg,CATMathVector viewXAxis,CATMathVector viewYAxis,CATMathVector iDirection );
//根据输入的三个向量，根据向量的长度，取前2个较长的作为输出方向
void ExportedByGeneralClsM GetTwoLongerDirections(double iarrDir1[3],double iarrDir2[3],double iarrDir3[3],double iarrPlane[3],double oarrDir1[3],double oarrDir2[3]);
//从直线中获取首尾端点坐标数组 ******TBD
void ExportedByGeneralClsM GetPointCoordFromLine( CATISpecObject_var spLine,double oStartPoint[3],double oEndPoint[3]);
//从顶点中获取坐标数组
void ExportedByGeneralClsM GetPointCoordFromVertex( CATVertex_var spVertex,double oPointCoord [3]);
//向量转换 ******TBD
CATMathPoint ExportedByGeneralClsM MathPointPositionTransformation(CATMathPoint mathPoint,CATMathTransformation mathTransf);
//向量转换
CATMathVector ExportedByGeneralClsM MathVectorPositionTransformation(CATMathVector mathVector,CATMathTransformation mathTransf);

//获取三维包围盒 *******************************
CATMathBox ExportedByGeneralClsM Get3DBoundingBox(CATISpecObject_var ispiSpecProd);
//求出Body的6个方向的极值，以此推导出包络体----------该方式求出的包络体较精确
HRESULT ExportedByGeneralClsM GetBodyBoxFromExtremePt(CATBody_var spBody, CATIProduct_var ispiProduct, CATMathVector VAxeX, CATMathVector VAxeY, CATMathVector VAxeZ, vector<CATMathPoint> &olstEtremePts);
void ExportedByGeneralClsM GetMathPointFromBody(CATBody*ipBody,CATLISTV(CATMathPoint) &LstMathPoint);
//获取对象的包围盒-------CATBody转成CATCell，再去获取
HRESULT ExportedByGeneralClsM Get3DBoundingBoxOfSinglePart(CATISpecObject_var ispiSpecProd,CATMathVector imathVecX,CATMathVector imathVecY,CATMathVector imathVecZ,vector<CATMathPoint> &olstBoundingPts);
HRESULT ExportedByGeneralClsM CenterGraphObject(CATISpecObject_var ispiSpecObject,int iMode,bool IfCenterTreeOnly);
HRESULT ExportedByGeneralClsM CenterGraphObject(CATISpecObject_var ispiSpecObject,int iMode,bool IfCenterTreeOnly,float ifRadius);
HRESULT ExportedByGeneralClsM SetColorOnObject(CATISpecObject_var ispiSpecOnObject,unsigned int iRed,unsigned int iGreen,unsigned int iBlue,CATVisGeomType iGeoType);
HRESULT ExportedByGeneralClsM GetColorOnObject(CATISpecObject_var ispiSpecOnObject,unsigned int &oRed,unsigned int &oGreen,unsigned int &oBlue);
void ExportedByGeneralClsM RefreshView3D(CATISpecObject_var ispSpec);
HRESULT ExportedByGeneralClsM CreateTopPointByXYZ(CATGeoFactory_var ispiGeoFactory,CATTopData iTopdata,CATMathPoint iMathPoint,CATBody_var &ospBodyPoint);
HRESULT ExportedByGeneralClsM MinDistanceBody(CATGeoFactory_var ispiGeoFactory, CATTopData iTopdata, CATBody_var ispSoildBody, CATBody_var ispPointBody, double &olength, CATMathPoint &oMathPoint1, CATMathPoint &oMathPoint2, CATCell_var& ospSupportCell1, CATCell_var& ospSupportCell2, CATBoolean &oissucess);
HRESULT ExportedByGeneralClsM MinDistanceCell(CATGeoFactory_var ispiGeoFactory, CATTopData iTopdata, CATCell_var ispCell1, CATCell_var ispCell2, double &olength, CATMathPoint &oMathPoint1, CATMathPoint &oMathPoint2, CATBoolean &oissucess);
HRESULT ExportedByGeneralClsM GetLstWeldPart(CATIProduct_var ispiProdNode,CATLISTV(CATISpecObject_var) &lstSpecWPParts);
CATBoolean ExportedByGeneralClsM GetPartList(CATIProduct_var spFatherProduct, CATLISTV(CATISpecObject_var) &ListOfObject, CATListValCATUnicodeString &LstPartNumber, CATListValCATUnicodeString &LstInstanceName);
CATBoolean ExportedByGeneralClsM CheckWPFile(CATIProduct_var ispiPrd);
CATICkeParm_var ExportedByGeneralClsM GetPrdParameter(bool isCreate,CATIProduct_var spPrd,CATUnicodeString strPropertiesName);
CATVolume_var ExportedByGeneralClsM GetBodyVolume(CATBody_var spBody);
int ExportedByGeneralClsM TestPtInVol(CATGeoFactory* piGeoFactory, CATTopData* pTopdata, CATBody_var spiBody, CATMathPoint ptIn);
HRESULT ExportedByGeneralClsM GetProjectPoint(CATGeoFactory_var ispiGeoFactory, CATTopData iTopdata, CATBody_var ispBodySupport, CATBody_var ispBodyToProject, double &olength, CATMathPoint &oMathPoint1, CATMathPoint &oMathPoint2, CATBoolean &oissucess);
HRESULT ExportedByGeneralClsM GetConnectionPartSurfaceNormal(CATISpecObject_var spWeldPoint, CATISpecObject_var spWeldPart, CATISpecObject_var spConnectionPart, CATBaseUnknown_var &ospObject, CATFace_var &ospFace, CATMathPoint &iMathPointOnSurface, CATMathVector &iMathVectorSurface);
HRESULT ExportedByGeneralClsM GetNormalInFaceList(CATGeoFactory *piGeoFactory, CATLISTP(CATCell) ListFaceCells, CATCell_var spPointCell, CATBody_var spPointBody, CATBaseUnknown_var spObject, CATMathPoint iMathConnectionPoint, CATBoolean isNeed, CATFace_var &ospFace, CATMathPoint &oMathPointOnSurface, CATMathVector &oMathVectorSurface);
HRESULT ExportedByGeneralClsM GetConnectionPartThickness(CATBaseUnknown_var spObject, CATMathPoint iMathPointOnSurface, CATMathVector iMathVectorSurface, double &odbThickness);
void ExportedByGeneralClsM ConvertFaceToBody(CATGeoFactory *iFactory,CATFace *ipFace,CATBody_var &ospBody);
HRESULT ExportedByGeneralClsM GetNearestSurf(CATGeoFactory_var spiGeoFactory, CATTopData Topdata, CATBody_var spSolidBody, CATCell_var spPointCell, CATFace_var &spResultFace, CATSurface_var &spResultSurface);
HRESULT ExportedByGeneralClsM GetNormalOnFace(CATGeoFactory_var ispiGeoFactory, CATBody_var spFaceBody, CATBody_var spPointBody, CATSurface_var spMinDisSurface, CATMathPoint &iMathPointOnSurafce, CATMathVector &minVector);
HRESULT ExportedByGeneralClsM GetNormaleOnSurf ( CATGeoFactory * piGeomFactory, CATBody * pBodySurf,CATMathPoint& pRefSurfacePnt , CATMathPoint& oPt,CATMathVector& oNormalVector);
CATBoolean ExportedByGeneralClsM GetDistanceFormDirection(CATMathPoint iMathPoint1, CATMathLine iMathLine1, CATISpecObject_var specPoint1, CATISpecObject_var spSpecWeldPart1, CATMathPoint iMathPoint2, CATMathLine iMathLine2, CATISpecObject_var specPoint2, CATISpecObject_var spSpecWeldPart2, double &odbdistance, CATMathPoint &oMathPoint1G, CATMathPoint &oMathPoint2G);
HRESULT ExportedByGeneralClsM InsertInGeoSet(CATBody_var iBody,CATIDatumFactory * ipDatumFactory , CATISpecObject_var &spTempSpec);
CATBoolean ExportedByGeneralClsM GetConnectorThickness(CATGeoFactory_var spiGeoFactory, CATTopData Topdata, CATMathPoint iMathPointOnSurface, CATMathVector iMathVectorSurface, CATBody_var spBody, double &odbThickness, CATMathPoint &oThicknessMathPoint1, CATMathPoint &oThicknessMathPoint2);
HRESULT ExportedByGeneralClsM GetInsectLength(CATBody_var spBody, CATLISTP(CATBody) iListLineBody, CATLISTV(CATMathPoint) &iLstMathPoint, CATMathPoint iRefMathPoint, double &odbength, CATMathPoint &oMathPoint1, CATMathPoint &oMathPoint2);
CATBoolean ExportedByGeneralClsM GetListConnector(CATListValCATUnicodeString LstPartNumber, CATListValCATUnicodeString LstInstanceName, CATLISTV(CATISpecObject_var) ListOfObject, CATListValCATUnicodeString ListConnectionPartNumbers, CATISpecObject_var spWeldPoint, CATISpecObject_var spWeldPart, CATLISTV(CATISpecObject_var) &LstConnectionPart, CATListOfDouble &LstConnectionDistance);
CATBoolean ExportedByGeneralClsM GetWeldPartDirectGset(CATISpecObject_var ispSpecPart, CATListValCATUnicodeString LstGsetName, CATListValCATISpecObject_var &oLstSurfBodies);
CATBoolean ExportedByGeneralClsM GetConnectorInfor(CATListValCATISpecObject_var LstConnectionPart, CATListOfDouble LstConnectionDistance, CATISpecObject_var specPoint, CATISpecObject_var spSpecWeldPart, CATMathPoint &oMathPointOnSurface, CATMathLine &oMathLineOnSurface, CATListOfDouble &LstdbConnectionThickness, CATLISTV(CATMathPoint) &oLstMathPointOnSurface, CATLISTV(CATMathLine) &oLstMathLineOnSurface);
CATBoolean ExportedByGeneralClsM GetWeldSpotFromGset(CATISpecObject_var ispSpec, CATListValCATISpecObject_var &spSpecPointList, CATListValCATISpecObject_var &spSpecBallList);
CATBoolean ExportedByGeneralClsM GetWeldSpotFromPart(CATISpecObject_var ispSpecPart, CATListValCATISpecObject_var &spSpecPointList, CATListValCATISpecObject_var &spSpecBallList);
HRESULT ExportedByGeneralClsM GetDistance(CATISpecObject_var ispiSpec1, CATIProduct_var ispiProd1, CATISpecObject_var ispiSpec2, CATIProduct_var ispiProd2, CATMathPoint &omathPt1, CATMathPoint &omathPt2, double &oDistance);
//求出一组空间点投影到某个平面上的2DBox包围盒
void ExportedByGeneralClsM PointsProjectingInTo2DBoxOnViewAlongDirection(vector <CATMathPoint> points,CATMathPoint viewOrg,CATMathVector viewXAxis,CATMathVector viewYAxis,CATMathVector iDirection ,CATMathPoint pro2dBox[4]);
//计算出一组点的3D包围盒，根据定义的轴系
void ExportedByGeneralClsM Create3DBoxWithAxis(vector <CATMathPoint> points,CATMathPoint viewOrg,CATMathVector viewXAxis,CATMathVector viewYAxis,CATMathVector viewZAxis,CATMathPoint onew3DBox[8] );

//获取单个零件Product的包围盒 ******TBD
HRESULT ExportedByGeneralClsM GetPartInstanceBoundingBox(CATIProduct_var spProduct,CATMathPoint oProductBox[8]);
//获取Part的包围盒 ******TBD
HRESULT ExportedByGeneralClsM GetPartBoundingBox(CATIProduct_var spPrtProduct,CATMathBox& oPartBoundingBox );

//在某个平面上，求出一组点的2D包围盒
void ExportedByGeneralClsM Get2DBoxOfPointsOnView(vector <CATMathPoint> points,CATMathPoint viewOrg,CATMathVector viewXAxis,CATMathVector viewYAxis,CATMathPoint points2dBox[4]);
//获取包围盒
HRESULT ExportedByGeneralClsM GetBodyBox(CATBody_var spBody, CATMathBox& oMathBox);

//
CATBoolean ExportedByGeneralClsM CreateFaceBody( CATGeoFactory_var spGeoFactory,CATTopData * topdata, CATFace_var ispFace,CATBody_var &ospSurfaceBody );
int ExportedByGeneralClsM IsSameCell(CATGeoFactory *ipGeoFactory, CATTopData *ipTopData, CATCell_var ispCell1,CATCell_var ispCell2,int iDimension);
HRESULT ExportedByGeneralClsM MinDistanceBetweenTwoCells(CATGeoFactory *ipGeoFactory, CATTopData *ipTopData, CATCell_var ispCell1,CATCell_var ispCell2,int iDimension,double &odblDistance);
HRESULT ExportedByGeneralClsM MinDistance(CATGeoFactory *ipGeoFactory, CATTopData *iTopdata, CATBody_var ispSoildBody, CATBody_var ispPointBody, double &olength);
HRESULT ExportedByGeneralClsM MinDistanceFromProject(CATGeoFactory *ipGeoFactory,CATTopData *ipTopData,CATBody_var ispBodyPoint,CATBody_var ispBodySupport,double &odblLength);
HRESULT ExportedByGeneralClsM GetMiddlePointFromCurveCell(CATGeoFactory *ipGeoFactory,CATTopData *ipTopData,CATCell_var ispCellCurve,CATBody *&opBodyPtMiddle);

//-----------------------------------------------------------------------

#endif
