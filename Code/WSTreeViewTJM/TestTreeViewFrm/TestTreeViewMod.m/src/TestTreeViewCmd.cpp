// COPYRIGHT Dassault Systemes 2020
//===================================================================
//
// TestTreeViewCmd.cpp
// The state chart based command: TestTreeViewCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2020  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "TestTreeViewCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TestTreeViewCmd);


#define  TreeControlID 0x0201

//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TestTreeViewCmd::TestTreeViewCmd() :
  CATStateCommand ("TestTreeViewCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,_pDlg(NULL)
{
	_pDlg = new TestTreeViewDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);
	_pDlg->GetDlgFrame()->SetVisibility(CATDlgHide);

	//CATIProduct_var spiProdRoot = NULL_var;
	//GetRootProduct(spiProdRoot);

	//this->InitTreeView(spiProdRoot);

}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TestTreeViewCmd::~TestTreeViewCmd()
{
	if (_pDlg != NULL)
	{
		_pDlg->RequestDelayedDestruction();
		_pDlg = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestTreeViewCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&TestTreeViewCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&TestTreeViewCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&TestTreeViewCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&TestTreeViewCmd::ActionOK,
		NULL);

	//树形结构只能在 GetWindSizeNotif的回调函数中才能实现 窗口打开的同时加载树形控件，
	//单纯的在构造函数中增加加载方法无法实现
	//同时，使用该回调函数，需要在dlg的cpp中构造中增加CATDlgWndNoResize
	//否则当更改窗口大小时，树形控件点击后无法展开
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindSizeNotification(),
		(CATCommandMethod)&TestTreeViewCmd::InitTreeView,
		NULL);
}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TestTreeViewCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

CATBoolean TestTreeViewCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
	return TRUE;
}

CATBoolean TestTreeViewCmd::ActionOK(void * data)
{
	//_pDlg->GetDlgFrame()->SetVisibility(CATDlgHide);
	//
	//CATIProduct_var spiProdRoot = NULL_var;
	//GetRootProduct(spiProdRoot);

	//this->InitTreeView(spiProdRoot);
	
	return TRUE;
}

/*
HRESULT TestTreeViewCmd::InitTreeView(CATIProduct_var ispiProd)
{
	HRESULT rc = S_OK;

	//
	if (ispiProd == NULL_var)
	{
		return E_FAIL;
	}
	//
	if (IsProduct(ispiProd))
	{
		DRECT drct1;
		_pDlg->GetDlgFrame()->GetRectDimensions(&drct1);

		CATUnicodeString strTitle = _pDlg->GetTitle();

		BSTR bstrTitle;
		strTitle.ConvertToBSTR(&bstrTitle);

		HWND hwnd = FindWindow(NULL, bstrTitle);
		if(hwnd==NULL)
			return E_FAIL;

		CWnd * pCWnd;
		pCWnd= CWnd::FromHandle(hwnd);

		RECT rct1;
		rct1.left=drct1.x+10;
		rct1.top=drct1.y+10;
		rct1.right=drct1.dx;
		rct1.bottom=drct1.dy+10;

		UINT Uid1=TreeControlID;

		BOOL flag1=m_testTree.Create(WS_VISIBLE | WS_TABSTOP | WS_CHILD | WS_BORDER
			| TVS_HASBUTTONS | TVS_LINESATROOT | TVS_HASLINES| TVS_DISABLEDRAGDROP 
			| TVS_NOTOOLTIPS |TVS_SHOWSELALWAYS ,rct1,pCWnd,Uid1);
		if(flag1)
		{
			TVINSERTSTRUCT tvRootInst;
			tvRootInst.item.mask = TVIF_TEXT;
			tvRootInst.hInsertAfter = TVI_LAST;
			tvRootInst.hParent = NULL;
			tvRootInst.item.pszText =L"Root";

			HTREEITEM hNodeRoot = m_testTree.InsertItem(&tvRootInst);
			if(hNodeRoot)
			{
				for(int ii=1;ii<5;ii++)
				{
					CATUnicodeString strII;
					strII.BuildFromNum(ii);

					BSTR bstrII;
					strII.ConvertToBSTR(&bstrII);

					TVINSERTSTRUCT tvChildInst;
					tvChildInst.item.mask = TVIF_TEXT;
					tvChildInst.hInsertAfter = TVI_LAST;
					tvChildInst.hParent = hNodeRoot;
					tvChildInst.item.pszText =bstrII;

					HTREEITEM hNodeFath1 = m_testTree.InsertItem(&tvChildInst);
					for(int jj=1;jj<5;jj++)
					{
						CATUnicodeString strjj;
						strjj.BuildFromNum(jj);
						strjj = strII+"."+strjj;

						BSTR bstrJJ;
						strjj.ConvertToBSTR(&bstrJJ);

						TVINSERTSTRUCT tvInst2;
						tvInst2.item.mask = TVIF_TEXT;
						tvInst2.hInsertAfter = TVI_LAST;
						tvInst2.hParent = hNodeFath1;
						tvInst2.item.pszText =bstrJJ;

						HTREEITEM hNodeFath2 = m_testTree.InsertItem(&tvInst2);
					}
				}
			}
		}
	} 
	else
	{
	}

	return rc;
}
*/

HRESULT TestTreeViewCmd::InitTreeView()
{
	HRESULT rc = S_OK;

	//
	//if (ispiProd == NULL_var)
	//{
	//	return E_FAIL;
	//}
	////
	//if (IsProduct(ispiProd))
	//{

	//} 
	//else
	//{
	//}

	DRECT drct1;
	_pDlg->GetDlgFrame()->GetRectDimensions(&drct1);

	CATUnicodeString strTitle = _pDlg->GetTitle();

	BSTR bstrTitle;
	strTitle.ConvertToBSTR(&bstrTitle);

	HWND hwnd = FindWindow(NULL, bstrTitle);
	if(hwnd==NULL)
		return E_FAIL;

	CWnd * pCWnd;
	pCWnd= CWnd::FromHandle(hwnd);

	RECT rct1;
	rct1.left=drct1.x+10;
	rct1.top=drct1.y+10;
	rct1.right=drct1.dx;
	rct1.bottom=drct1.dy+10;

	UINT Uid1=TreeControlID;

	BOOL flag1=m_testTree.Create(WS_VISIBLE | WS_TABSTOP | WS_CHILD | WS_BORDER
		| TVS_HASBUTTONS | TVS_LINESATROOT | TVS_HASLINES| TVS_DISABLEDRAGDROP 
		| TVS_NOTOOLTIPS |TVS_SHOWSELALWAYS ,rct1,pCWnd,Uid1);
	if(flag1)
	{
		TVINSERTSTRUCT tvRootInst;
		tvRootInst.item.mask = TVIF_TEXT;
		tvRootInst.hInsertAfter = TVI_LAST;
		tvRootInst.hParent = NULL;
		tvRootInst.item.pszText =L"Root";

		HTREEITEM hNodeRoot = m_testTree.InsertItem(&tvRootInst);
		if(hNodeRoot)
		{
			for(int ii=1;ii<5;ii++)
			{
				CATUnicodeString strII;
				strII.BuildFromNum(ii);

				BSTR bstrII;
				strII.ConvertToBSTR(&bstrII);

				TVINSERTSTRUCT tvChildInst;
				tvChildInst.item.mask = TVIF_TEXT;
				tvChildInst.hInsertAfter = TVI_LAST;
				tvChildInst.hParent = hNodeRoot;
				tvChildInst.item.pszText =bstrII;

				HTREEITEM hNodeFath1 = m_testTree.InsertItem(&tvChildInst);
				for(int jj=1;jj<5;jj++)
				{
					CATUnicodeString strjj;
					strjj.BuildFromNum(jj);
					strjj = strII+"."+strjj;

					BSTR bstrJJ;
					strjj.ConvertToBSTR(&bstrJJ);

					TVINSERTSTRUCT tvInst2;
					tvInst2.item.mask = TVIF_TEXT;
					tvInst2.hInsertAfter = TVI_LAST;
					tvInst2.hParent = hNodeFath1;
					tvInst2.item.pszText =bstrJJ;

					HTREEITEM hNodeFath2 = m_testTree.InsertItem(&tvInst2);
				}
			}
		}
	}

	return rc;
}