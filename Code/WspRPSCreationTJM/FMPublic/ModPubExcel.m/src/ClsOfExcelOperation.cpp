// COPYRIGHT Dassault Systemes 2014
//===================================================================
//
// ClsOfExcelOperation.cpp
// Header definition of ClsOfExcelOperation
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  May 2014  Creation: Code generated by the CAA wizard  rui.zhang
//===================================================================

//Local
#include "ClsOfExcelOperation.h"
#include "ExcelRW.h"
#include <afx.h>
#include "comutil.h"
 
//CATImplementClass( ClsOfExcelOperation, Implementation, CATBaseUnknown,CATNull );
 
//-----------------------------------------------------------------------------
// ClsOfExcelOperation : constructor
//-----------------------------------------------------------------------------


ClsOfExcelOperation::ClsOfExcelOperation():_pExcelOperation(NULL)
{
	
}

ClsOfExcelOperation::ClsOfExcelOperation(CATUnicodeString strFilePath):_pExcelOperation(NULL)
{
	
}

//-----------------------------------------------------------------------------
// ClsOfExcelOperation : destructor
//-----------------------------------------------------------------------------
ClsOfExcelOperation::~ClsOfExcelOperation()
{
	
}




HRESULT ClsOfExcelOperation::GetExcelInformation(CATUnicodeString strFilePath,
												 CATLISTV(CATUnicodeString) &listOfstrNo,
												 CATLISTV(CATUnicodeString) &listOfstrPartNum,
												 CATLISTV(CATUnicodeString) &listOfstrInst)
{
	HRESULT rc = E_FAIL;
	if (strFilePath == "")
	{
		return E_FAIL;
	}


	CExcelRW ExcelMain;
	const char* ExcelPath = strFilePath.ConvertToChar();
	if(!ExcelMain.Open(ExcelPath))
		return E_FAIL;

	if(!ExcelMain.OpenSheet(1))
		return E_FAIL;
	ExcelMain.GetAllRange();
	int nrow = 0,ncolumn = 0;
	ExcelMain.Get_Rows_Columns(nrow,ncolumn);
	int oRow = 0;
	int oColumn = 0;
	for (int i=1;i<=nrow;i++)
	{
		CString TestItem;
		TestItem = ExcelMain.GetItemText(i,1);
		CString TestItem1;
		TestItem1 = ExcelMain.GetItemText(i+1,1);
		if (TestItem==""&&TestItem1 == "")
		{
			oRow = i-1;
			break;
		}
	}
	for (int i=1;i<=ncolumn;i++)
	{
		CString TestItem;
		TestItem = ExcelMain.GetItemText(1,i); 
		if (TestItem=="")
		{
			oColumn = i-1;
			break;
		}
	}
	for (int i=2;i<=oRow;i++)
	{
		CString ItemNo;
		ItemNo = ExcelMain.GetItemText(i,1); 
		if (ItemNo=="")
		{
			break;
		}
		CATUnicodeString StrNo("");
		BSTR b = ItemNo.AllocSysString();
		StrNo.BuildFromBSTR(b);
		::SysFreeString(b);
		listOfstrNo.Append(StrNo);

		CString ItemPartNum;
		ItemPartNum = ExcelMain.GetItemText(i,2); 
		if (ItemPartNum=="")
		{
			break;
		}
		CATUnicodeString StrPartNum("");
		b = ItemPartNum.AllocSysString();
		StrPartNum.BuildFromBSTR(b);
		::SysFreeString(b);
		listOfstrPartNum.Append(StrPartNum);


		CString ItemInst;
		ItemInst = ExcelMain.GetItemText(i,3); 
		if (ItemInst=="")
		{
			break;
		}
		CATUnicodeString StrInst("");
		b = ItemInst.AllocSysString();
		StrInst.BuildFromBSTR(b);
		::SysFreeString(b);
		listOfstrInst.Append(StrInst);


	}


	ExcelMain.Exit();
	return S_OK ;	
}

//得到某一列的所有数据
HRESULT ClsOfExcelOperation::GetExcelInformationFromOneColumn(CATUnicodeString strFilePath,
												              int iColumn,
												              CATLISTV(CATUnicodeString) &listOfstrResult)
{
	HRESULT rc = S_OK;
	//
	if (strFilePath == "")
	{
		return E_FAIL;
	}
	//
	CExcelRW ExcelMain;
	const char* ExcelPath = strFilePath.ConvertToChar();
	if(!ExcelMain.Open(ExcelPath))
		return E_FAIL;
	if(!ExcelMain.OpenSheet(1))
		return E_FAIL;
	ExcelMain.GetAllRange();
	//获得当前所有行数
	int iCurrentRow = 0;
	rc = GetCurrentTotalRows(strFilePath,iCurrentRow);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	//
	//从第一行表头开始遍历，保证至少输出list不为空，方便后续判断
	for (int i=1; i <= iCurrentRow; i++)
	{
		CString ItemQuery;
		ItemQuery = ExcelMain.GetItemText(i,iColumn); 
		if (ItemQuery=="")
		{
			break;
		}
		CATUnicodeString strItemQuery("");
		BSTR b = ItemQuery.AllocSysString();
		strItemQuery.BuildFromBSTR(b);
		::SysFreeString(b);
		listOfstrResult.Append(strItemQuery);
	}

	ExcelMain.Exit();
	return rc;
}

//获得对应关键字下的所有行的信息
HRESULT ClsOfExcelOperation::GetExcelInformationFromKeyWord(CATUnicodeString strFilePath,
															CATUnicodeString istrKeyWord,
												            CATLISTV(CATUnicodeString) &listOfstrRPSName,
												            CATLISTV(CATUnicodeString) &listOfstrXCoord,
												            CATLISTV(CATUnicodeString) &listOfstrYCoord,
															CATLISTV(CATUnicodeString) &listOfstrZCoord)
{
	HRESULT rc = S_OK;
	//
	if (strFilePath == "")
	{
		return E_FAIL;
	}
	//
	CExcelRW ExcelMain;
	const char* ExcelPath = strFilePath.ConvertToChar();
	if(!ExcelMain.Open(ExcelPath))
		return E_FAIL;
	if(!ExcelMain.OpenSheet(1))
		return E_FAIL;
	ExcelMain.GetAllRange();
	//获取同一零件号出现了几次
	CATLISTV(CATUnicodeString) lstPartNum = NULL;
	rc = GetExcelInformationFromOneColumn(strFilePath,1,lstPartNum);
	if (lstPartNum == NULL)
	{
		return E_FAIL;
	}
	int iOccurCount = 0;
	iOccurCount = lstPartNum.NbOccur(istrKeyWord);
	if (iOccurCount == 0)
	{
		return E_FAIL;
	}
	//开始遍历，直到出现第一个符合的零件号停止循环，并返回行数
	int iBeginRow = 0;
	for (int iRow =2; iRow <= ExcelMain.GetRowS(); iRow++)
	{
		CString ItemQuery;
		ItemQuery = ExcelMain.GetItemText(iRow,1); 
		if (ItemQuery=="")
		{
			break;
		}
		CATUnicodeString strItemQuery("");
		BSTR b = ItemQuery.AllocSysString();
		strItemQuery.BuildFromBSTR(b);
		::SysFreeString(b);
		if (strItemQuery == istrKeyWord)
		{
			iBeginRow = iRow;
			break;
		}
	}
	//从iBeginRow开始，根据零件号出现的次数，遍历返回出对应的列表
	for (int i = iBeginRow; i <= iBeginRow + iOccurCount; i++)
	{
		//
		CString ItemCol2;
		ItemCol2 = ExcelMain.GetItemText(i,2); 
		if (ItemCol2=="")
		{
			break;
		}
		CATUnicodeString strItemCol2("");
		BSTR b = ItemCol2.AllocSysString();
		strItemCol2.BuildFromBSTR(b);
		::SysFreeString(b);
		listOfstrRPSName.Append(strItemCol2);

		//
		CString ItemCol3;
		ItemCol3 = ExcelMain.GetItemText(i,3); 
		if (ItemCol3=="")
		{
			break;
		}
		CATUnicodeString strItemCol3("");
		b = ItemCol3.AllocSysString();
		strItemCol3.BuildFromBSTR(b);
		::SysFreeString(b);
		listOfstrXCoord.Append(strItemCol3);

		//
		CString ItemCol4;
		ItemCol4 = ExcelMain.GetItemText(i,4); 
		if (ItemCol4=="")
		{
			break;
		}
		CATUnicodeString strItemCol4("");
		b = ItemCol4.AllocSysString();
		strItemCol4.BuildFromBSTR(b);
		::SysFreeString(b);
		listOfstrYCoord.Append(strItemCol4);

		//
		CString ItemCol5;
		ItemCol5 = ExcelMain.GetItemText(i,5); 
		if (ItemCol5=="")
		{
			break;
		}
		CATUnicodeString strItemCol5("");
		b = ItemCol5.AllocSysString();
		strItemCol5.BuildFromBSTR(b);
		::SysFreeString(b);
		listOfstrZCoord.Append(strItemCol5);
	}

	ExcelMain.Exit();
	return rc;
}

HRESULT ClsOfExcelOperation::WriteExcel(CATUnicodeString strSavePath,
										 CATLISTV(CATUnicodeString) listOfstrNo,
										 CATLISTV(CATUnicodeString) listOfstrPartNum,
										 CATLISTV(CATUnicodeString) listOfstrInst)
{




	HRESULT rc = E_FAIL;
	if (strSavePath=="")
	{
		return E_FAIL;
	}

	if (listOfstrNo == NULL||listOfstrPartNum == NULL ||listOfstrInst == NULL)
	{
		return E_FAIL;
	}
	CExcelRW ExcelMain;
	//CString SaveasFilePath = strSavePath.CastToCharPtr();	

	CString StrExcelTemplatePath = strSavePath.ConvertToChar();

	if(!ExcelMain.Open(StrExcelTemplatePath))
		return E_FAIL;

	if(!ExcelMain.OpenSheet(1))
		return E_FAIL;
	ExcelMain.GetAllRange();

	
	int Row =2;
	int Size = listOfstrNo.Size();
	for (int i=1;i<=Size;i++)
	{
		CATUnicodeString strNo = listOfstrNo[i];
		CString itemNo =   strNo.ConvertToChar();
		ExcelMain.SetItemText(i+1,1,itemNo);

		CATUnicodeString strPartNum = listOfstrPartNum[i];
		CString itemPartNum =   strPartNum.ConvertToChar();
		ExcelMain.SetItemText(i+1,2,itemPartNum);

		CATUnicodeString strInst = listOfstrInst[i];
		CString itemInst =   strInst.ConvertToChar();
		ExcelMain.SetItemText(i+1,3,itemInst);
	}
	

	ExcelMain.Save()	;

	ExcelMain.Exit();
	return S_OK;
}

//写入并另存为新文件
HRESULT ClsOfExcelOperation::WriteAsNewExcel(CATUnicodeString strTemplatePath,
											 CATUnicodeString strSavePath,
										     CATLISTV(CATUnicodeString) listOfstrNo,
										     CATLISTV(CATUnicodeString) listOfstrPartNum,
										     CATLISTV(CATUnicodeString) listOfstrInst)
{




	HRESULT rc = E_FAIL;
	if (strTemplatePath=="")
	{
		return E_FAIL;
	}

	if (listOfstrNo == NULL||listOfstrPartNum == NULL ||listOfstrInst == NULL)
	{
		return E_FAIL;
	}
	CExcelRW ExcelMain;
	//CString SaveasFilePath = strSavePath.CastToCharPtr();	

	CString StrExcelTemplatePath = strTemplatePath.ConvertToChar();

	if(!ExcelMain.Open(StrExcelTemplatePath))
		return E_FAIL;

	if(!ExcelMain.OpenSheet(1))
		return E_FAIL;
	ExcelMain.GetAllRange();


	int Row =2;
	int Size = listOfstrNo.Size();
	for (int i=1;i<=Size;i++)
	{
		CATUnicodeString strNo = listOfstrNo[i];
		CString itemNo =   strNo.ConvertToChar();
		ExcelMain.SetItemText(i+1,1,itemNo);

		CATUnicodeString strPartNum = listOfstrPartNum[i];
		CString itemPartNum =   strPartNum.ConvertToChar();
		ExcelMain.SetItemText(i+1,2,itemPartNum);

		CATUnicodeString strInst = listOfstrInst[i];
		CString itemInst =   strInst.ConvertToChar();
		ExcelMain.SetItemText(i+1,3,itemInst);
	}

	CString StrSaveAsPath = strSavePath.ConvertToChar();
	//ExcelMain.Save()	;
	ExcelMain.SaveAs(StrSaveAsPath);
	ExcelMain.Exit();
	return S_OK;
}


//持续写入Excel，不删除以前数据
HRESULT ClsOfExcelOperation::AddToExcel(CATUnicodeString strSavePath,
										CATUnicodeString istrPartNumber,
										CATLISTV(CATUnicodeString) ilistOfstrRPSName,
										CATLISTV(CATUnicodeString) ilistOfstrXCoord,
										CATLISTV(CATUnicodeString) ilistOfstrYCoord,
										CATLISTV(CATUnicodeString) ilistOfstrZCoord)
{




	HRESULT rc = E_FAIL;
	if (strSavePath=="")
	{
		return E_FAIL;
	}

	if (istrPartNumber == "" || ilistOfstrRPSName == NULL || ilistOfstrXCoord == NULL || ilistOfstrYCoord == NULL || ilistOfstrZCoord == NULL)
	{
		return E_FAIL;
	}
	CExcelRW ExcelMain;
	//CString SaveasFilePath = strSavePath.CastToCharPtr();	

	CString StrExcelTemplatePath = strSavePath.ConvertToChar();

	if(!ExcelMain.Open(StrExcelTemplatePath))
		return E_FAIL;

	if(!ExcelMain.OpenSheet(1))
		return E_FAIL;
	ExcelMain.GetAllRange();


	int iCurrentRow = 0;
	rc = GetCurrentTotalRows(strSavePath,iCurrentRow);
	int Size = ilistOfstrRPSName.Size();
	for (int i=1;i<=Size;i++)
	{
		CATUnicodeString strPartNum = istrPartNumber;
		CString itemPartNum =   strPartNum.ConvertToChar();
		ExcelMain.SetItemText(i+iCurrentRow,1,itemPartNum);

		CATUnicodeString strRPSName = ilistOfstrRPSName[i];
		CString itemRPSName =   strRPSName.ConvertToChar();
		ExcelMain.SetItemText(i+iCurrentRow,2,itemRPSName);

		CATUnicodeString strXCoord = ilistOfstrXCoord[i];
		CString itemXCoord =   strXCoord.ConvertToChar();
		ExcelMain.SetItemText(i+iCurrentRow,3,itemXCoord);

		CATUnicodeString strYCoord = ilistOfstrYCoord[i];
		CString itemYCoord =   strYCoord.ConvertToChar();
		ExcelMain.SetItemText(i+iCurrentRow,4,itemYCoord);

		CATUnicodeString strZCoord = ilistOfstrZCoord[i];
		CString itemZCoord =   strZCoord.ConvertToChar();
		ExcelMain.SetItemText(i+iCurrentRow,5,itemZCoord);

	}


	ExcelMain.Save()	;

	ExcelMain.Exit();
	return S_OK;
}

//获得当前Excel内已有内容的所有行数
HRESULT ClsOfExcelOperation::GetCurrentTotalRows(CATUnicodeString istrSavePath,int &oiTotalRows)
{
	HRESULT rc = S_OK;
	if (istrSavePath == "")
	{
		return E_FAIL;
	}
	CExcelRW ExcelMain;
	//CString SaveasFilePath = strSavePath.CastToCharPtr();	

	CString StrExcelTemplatePath = istrSavePath.ConvertToChar();

	if(!ExcelMain.Open(StrExcelTemplatePath))
		return E_FAIL;

	if(!ExcelMain.OpenSheet(1))
		return E_FAIL;
	ExcelMain.GetAllRange();
	
	long lRow = 1;
	long lCol = 1;
	long i = 0;
	oiTotalRows = 0;
	while (ExcelMain.GetItemText(lRow+i,lCol) != "")
	{
		oiTotalRows++;
		i++;
	}
	
	return rc;
}