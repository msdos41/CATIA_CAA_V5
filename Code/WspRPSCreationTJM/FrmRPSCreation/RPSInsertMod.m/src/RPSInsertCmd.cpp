// COPYRIGHT Dassault Systemes 2019
//===================================================================
//
// RPSInsertCmd.cpp
// The state chart based command: RPSInsertCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jan 2019  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "RPSInsertCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"






CATCreateClass( RPSInsertCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
RPSInsertCmd::RPSInsertCmd() :
  CATStateCommand ("RPSInsertCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_Indication(NULL)
{
	_pDlg = NULL;
	_pDlg = new RPSInsertDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_pFeaImpAgt = NULL;

	_pDlgAgt = NULL;

	_spProductSelect = NULL_var;

	_pEditor = CATFrmEditor::GetCurrentEditor();
	_pHSO = NULL;
	if (NULL != _pEditor)
	{
		_pHSO = _pEditor->GetHSO();
	}

	_strDBPath = "";
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
RPSInsertCmd::~RPSInsertCmd()
{
   if (_Indication != NULL) 
      _Indication->RequestDelayedDestruction();

   if (_pDlg != NULL)
   {
	   _pDlg->RequestDelayedDestruction();
	   _pDlg = NULL;
   }

   if (_pFeaImpAgt != NULL)
   {
	   _pFeaImpAgt->RequestDelayedDestruction();
	   _pFeaImpAgt = NULL;
   }

   if (_pDlgAgt != NULL)
   {
	   _pDlgAgt->RequestDelayedDestruction();
	   _pDlgAgt = NULL;
   }

   _pEditor = NULL;

   _pHSO = NULL;
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void RPSInsertCmd::BuildGraph()
{
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&RPSInsertCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&RPSInsertCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&RPSInsertCmd::ExitCmd,
		NULL);

	//Insert按钮的动作
	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&RPSInsertCmd::ActionInsert,
		NULL);

	//Query按钮的动作
	AddAnalyseNotificationCB(_pDlg->GetPushButtonQuery(),
		_pDlg->GetPushButtonQuery()->GetPushBActivateNotification(),
		(CATCommandMethod)&RPSInsertCmd::ActionQuery,
		NULL);

	//
	_pFeaImpAgt = new CATFeatureImportAgent("Select a Part");

	_pDlgAgt = new CATDialogAgent("Select Dialog Agent");

	//
	_pFeaImpAgt->SetOrderedElementType("CATIProduct");
	//增加选择过滤
	CATAcquisitionFilter *pFilterForPart = Filter((FilterMethod)&RPSInsertCmd::IsCATPart,(void*)NULL);
	_pFeaImpAgt->SetFilter(pFilterForPart);
	//
	_pFeaImpAgt->SetBehavior(CATDlgEngWithPrevaluation | CATDlgEngWithCSO     | CATDlgEngOneShot);
	//
	_pDlgAgt->AcceptOnNotify(_pDlg->GetSelectorListSelectPart(),_pDlg->GetSelectorListSelectPart()->GetListSelectNotification());

	//
	CATDialogState *pDlgState = GetInitialState("Select a Part");
	pDlgState->AddDialogAgent(_pFeaImpAgt);
	pDlgState->AddDialogAgent(_pDlgAgt);

	//
	AddTransition(pDlgState,pDlgState,
		IsOutputSetCondition(_pFeaImpAgt),
		Action((ActionMethod)& RPSInsertCmd::SelectPart));

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean RPSInsertCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

void RPSInsertCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
}

void RPSInsertCmd::ActionInsert(void * data)
{
	////Test Insert RPS
	//HRESULT rc = InsertRPS(_spProductSelect,"RPS","A1","100.06","200.1","333.33");
	//if (FAILED(rc))
	//{
	//	return;
	//}
	//先判断MultiList里面是否有选中参考零件号
	int iIsSelect = 0;
	iIsSelect = _pDlg->GetMultiListQueryResult()->GetSelectCount();
	if (iIsSelect == 0)
	{
		MessageBox (NULL ,_T("Please select one reference"),L"Information",MB_OK);
		return;
	}
	//返回MultiList选中的零件号
	int iTabRow[10];
	int iSelRow = 0;
	iSelRow = _pDlg->GetMultiListQueryResult()->GetSelect(iTabRow,1);
	CATUnicodeString strPartNumSel = "";
	_pDlg->GetMultiListQueryResult()->GetColumnItem(1,strPartNumSel,iTabRow[0]);

	//根据MultiList选取的零件号，从Excel中返回出相应的所有RPS点的信息
	ClsOfExcelOperation *pExcelOperation = new ClsOfExcelOperation(_strDBPath);
	if (pExcelOperation == NULL)
	{
		return;
	}
	CATListValCATUnicodeString lstRPSName = NULL;
	CATListValCATUnicodeString lstXCoord = NULL;
	CATListValCATUnicodeString lstYCoord = NULL;
	CATListValCATUnicodeString lstZCoord = NULL;
	HRESULT  rc = pExcelOperation->GetExcelInformationFromKeyWord(_strDBPath,strPartNumSel,lstRPSName,lstXCoord,lstYCoord,lstZCoord);
	if (lstRPSName == NULL || lstXCoord == NULL || lstYCoord == NULL || lstZCoord == NULL)
	{
		return;
	}
	//插入所选的Part中
	for (int i =1; i <= lstRPSName.Size(); i++)
	{
		rc = InsertRPS(_spProductSelect,"RPS",lstRPSName[i],lstXCoord[i],lstYCoord[i],lstZCoord[i]);
		if (FAILED(rc))
		{
			MessageBox (NULL ,_T("Insert RPS Failed"),L"Information",MB_OK);
			return;
		}
	}
	//
	if (pExcelOperation != NULL)
	{
		delete pExcelOperation;
		pExcelOperation = NULL;
	}
	return;
}

void RPSInsertCmd::ActionQuery(void * data)
{
	//先清空MultiList
	_pDlg->GetMultiListQueryResult()->ClearLine();
	//判断零件号是否有输入
	CATUnicodeString strPartNumQuery = "";
	strPartNumQuery = _pDlg->GetEditorRefPartNumber()->GetText();
	if (strPartNumQuery == "")
	{
		MessageBox (NULL ,_T("Please input Part Number"),L"Information",MB_OK);
		return;
	}
	//开始查询
	//首先获得数据库存放位置
	CATUnicodeString strFolderName = "DataBase";
	CATUnicodeString strFileName = "DataBase.xlsx";
	CATUnicodeString strSavePath = "";
	HRESULT rc = GetResourseFile(strSavePath,strFileName,strFolderName);
	if (FAILED(rc))
	{
		return;
	}
	_strDBPath = strSavePath;

	//比对输入字符与excel数据库内是否存在相同的零件号
	CATListValCATUnicodeString lstQueryResult = NULL;
	rc = GetQueryResult(strSavePath,strPartNumQuery,lstQueryResult);
	if (lstQueryResult == NULL)
	{
		MessageBox (NULL ,_T("Query no result"),L"Information",MB_OK);
		return;
	}
	//输出到MultiList中
	for (int i =1; i <= lstQueryResult.Size(); i++)
	{
		CATUnicodeString strIndex = "";
		int iCovert = strIndex.BuildFromNum(i);
		_pDlg->GetMultiListQueryResult()->SetColumnItem(0,strIndex,-1,CATDlgDataAdd);
		_pDlg->GetMultiListQueryResult()->SetColumnItem(1,lstQueryResult[i],-1,CATDlgDataAdd);
	}
	return;
}

void RPSInsertCmd::SelectPart(void * data)
{
	if (_pHSO != NULL)
	{
		_pHSO->Empty();
	}
	//
	SelectTransfer(_pFeaImpAgt,_spProductSelect);
	//
	CATUnicodeString strPartNum = _spProductSelect->GetPartNumber();
	_pDlg->GetSelectorListSelectPart()->ClearLine();
	_pDlg->GetSelectorListSelectPart()->SetLine(strPartNum,-1,CATDlgDataAdd);
	//
	SetHighlight(_pFeaImpAgt);
	//
	_pFeaImpAgt->InitializeAcquisition();
	return;
}

HRESULT RPSInsertCmd::InsertRPS(CATIProduct_var ispProductTarget,
								CATUnicodeString istrGSName,
								CATUnicodeString istrRPSName,
								CATUnicodeString istrXCoord,
								CATUnicodeString istrYCoord,
								CATUnicodeString istrZCoord)
{
	HRESULT rc = S_OK;
	//判断是否存在RPS几何图形集

	//直接新建一个RPS的几何图形集
	CATILinkableObject *piLinkableObjOnChild = NULL;
	rc = ispProductTarget->QueryInterface(IID_CATILinkableObject,(void**)&piLinkableObjOnChild);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATDocument *pDocOnChild = NULL;
	pDocOnChild = piLinkableObjOnChild->GetDocument();
	if (NULL == pDocOnChild)
	{
		return E_FAIL;
	}
	CATIContainerOfDocument_var spContOfDocOnChild = pDocOnChild;
	CATIContainer *piSpecContainerOnChild = NULL;
	rc = spContOfDocOnChild->GetSpecContainer(piSpecContainerOnChild);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATIPrtContainer *piPrtContainerOnChild = NULL;
	rc = piSpecContainerOnChild->QueryInterface(IID_CATIPrtContainer,(void**)&piPrtContainerOnChild);
	piSpecContainerOnChild->Release();
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATIPrtPart_var spPartOnChild = piPrtContainerOnChild->GetPart();
	piPrtContainerOnChild->Release();
	if (NULL_var == spPartOnChild)
	{
		return E_FAIL;
	}

	//先判断有没有RPS几何图形集
	CATIPartRequest *pPartAsRequest = NULL;
	rc = spPartOnChild->QueryInterface(IID_CATIPartRequest, (void**)&pPartAsRequest);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	//遍历所有GS
	CATLISTV(CATBaseUnknown_var) lstGeomSet = NULL;
	pPartAsRequest->GetSurfBodies("", lstGeomSet);
	//如果没有GS，则直接建立
	if (lstGeomSet == NULL)
	{
		//获得几何图形集创建的父级，该处为最外层根下
		CATISpecObject_var spParentTool = spPartOnChild;
		//
		CATIMechanicalRootFactory_var spMechRootFactory = piSpecContainerOnChild;
		//
		CATISpecObject_var spChildTool = NULL_var;
		rc = spMechRootFactory->CreateGeometricalSet(istrGSName,spParentTool,spChildTool,-1);
		if (FAILED(rc))
		{
			return E_FAIL;
		}
		//定义到新建的几何图形集下
		spPartOnChild->SetCurrentFeature(spChildTool);
	}
	//有GS，则遍历GS，并判断是否含有RPS几何图形集
	else
	{
		CATBoolean boolExistGS = FALSE;
		for (int i=1; i <= lstGeomSet.Size(); i++)
		{
			CATBaseUnknown_var spCurrentSet = lstGeomSet[i];
			if (spCurrentSet == NULL_var)
			{
				continue;
			}
			CATIAlias_var spAliasOnCurrentSet = spCurrentSet;
			CATUnicodeString strAliasOnCurrentSet = spAliasOnCurrentSet->GetAlias();
			//如果存在，则直接定义到该图形集
			if (strAliasOnCurrentSet == istrGSName)
			{
				CATISpecObject_var spChildTool = spCurrentSet;
				spPartOnChild->SetCurrentFeature(spChildTool);
				boolExistGS = TRUE;
				break;
			}
		}
		//不存在，则新建图形集
		if (boolExistGS == FALSE)
		{
		    //获得几何图形集创建的父级，该处为最外层根下
			CATISpecObject_var spParentTool = spPartOnChild;
			//
			CATIMechanicalRootFactory_var spMechRootFactory = piSpecContainerOnChild;
			//
			CATISpecObject_var spChildTool = NULL_var;
			rc = spMechRootFactory->CreateGeometricalSet(istrGSName,spParentTool,spChildTool,-1);
			if (FAILED(rc))
			{
				return E_FAIL;
			}
			//定义到新建的几何图形集下
			spPartOnChild->SetCurrentFeature(spChildTool);
		}
	}
	//开始创建点
	CATIGSMFactory_var spiGSMFactory = piSpecContainerOnChild;
	int iSucceedConvert = 0;
	double dblXCoord = 0;
	double dblYCoord = 0;
	double dblZCoord = 0;
	iSucceedConvert = istrXCoord.ConvertToNum(&dblXCoord);
	if (iSucceedConvert == 0)
	{
		cout<<"coordinate convert failed"<<endl;
		return E_FAIL;
	}
	iSucceedConvert = istrYCoord.ConvertToNum(&dblYCoord);
	if (iSucceedConvert == 0)
	{
		return E_FAIL;
	}
	iSucceedConvert = istrZCoord.ConvertToNum(&dblZCoord);
	if (iSucceedConvert == 0)
	{
		return E_FAIL;
	}
	double dblCoord[3] = {dblXCoord,dblYCoord,dblZCoord};
	CATIGSMPoint_var spRPSpoint = spiGSMFactory->CreatePoint(dblCoord);
	//命名点
	CATIAlias_var spAliasOnCurrent = spRPSpoint;
	spAliasOnCurrent->SetAlias(istrRPSName);
	//
	CATIGSMProceduralView_var spGSMProView = spRPSpoint;
	spGSMProView->InsertInProceduralView();
	//刷新
	CATISpecObject_var spParentTool = spPartOnChild;
	spParentTool->Update();

	return rc;
}

//模型树上选择Part，转换成CATIProduct
void RPSInsertCmd::SelectTransfer(CATFeatureImportAgent *pFeatAgent,CATIProduct_var &ospProductSelect)
{
	HRESULT rc = E_FAIL;

	if (pFeatAgent == NULL)
	{
		return;
	}
	CATIProduct *piProductSel = NULL;
	CATBaseUnknown *pSelection = pFeatAgent->GetElementValue(pFeatAgent->GetValue());
	if (NULL != pSelection)
	{
		rc = pSelection->QueryInterface(IID_CATIProduct,(void**)&piProductSel);
		if (FAILED(rc))
		{
			return;
		}
	    ospProductSelect = piProductSel->GetReferenceProduct();
	}
	piProductSel->Release();
	piProductSel = NULL;
}

//高亮
void RPSInsertCmd::SetHighlight(CATFeatureImportAgent *ipFeatImpAgt)
{

	CATPathElement* pPathEle = NULL;
	pPathEle = ipFeatImpAgt->GetValue();
	if (pPathEle != NULL)
	{
		_pHSO->Empty();
		_pHSO->AddElements(pPathEle);
		_pHSO->EndAddElements();
	}
}

//根据输入字符，返回Excel中存在的所有字符组
HRESULT RPSInsertCmd::GetQueryResult(CATUnicodeString istrFilePath, CATUnicodeString istrQueryWord, CATListValCATUnicodeString &olstQueryResult)
{
	HRESULT rc = S_OK;
	//
	ClsOfExcelOperation *pExcelOperation = new ClsOfExcelOperation(istrFilePath);
	if (pExcelOperation == NULL)
	{
		return E_FAIL;
	}
	//获得第一列的所有字符信息
	CATListValCATUnicodeString lstQueryResult = NULL;
	rc = pExcelOperation->GetExcelInformationFromOneColumn(istrFilePath,1,lstQueryResult);
	if (lstQueryResult == NULL)
	{
		return E_FAIL;
	}
	//去除重复
	for (int i = 1; i<=lstQueryResult.Size(); i++)
	{
		for (int j = lstQueryResult.Size(); j>i; j--)
		{
			if (lstQueryResult[i] == lstQueryResult[j])
			{
				lstQueryResult.RemovePosition(j);
			}
		}
	}
	//和关键字比较，返回带有关键字的字符
	for (int i=1; i <= lstQueryResult.Size(); i++)
	{
		int iSearchSubString = 0;
		iSearchSubString = lstQueryResult[i].SearchSubString(istrQueryWord);
		if (iSearchSubString != -1)
		{
			olstQueryResult.Append(lstQueryResult[i]);
		}
	}
	//
	if (pExcelOperation != NULL)
	{
		delete pExcelOperation;
		pExcelOperation = NULL;
	}
	return rc;
}

HRESULT RPSInsertCmd::GetRootProduct(CATIProduct *&opiRootProduct)
{
	//获取Document
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor == NULL)
	{
		return E_FAIL;
	}
	CATDocument *pDoc = pEditor->GetDocument();
	if (pDoc == NULL)
	{
		return E_FAIL;
	}

	//获取根元素集合的第一个，就是根product,最终要转到CATIProduct
	CATIDocRoots *piDocRootsOnDoc = NULL;
	HRESULT rc = pDoc->QueryInterface(IID_CATIDocRoots,(void**)&piDocRootsOnDoc);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATListValCATBaseUnknown_var *pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct = NULL_var;
	if (pRootProducts->Size())
	{
		spRootProduct = (*pRootProducts)[1];
		delete pRootProducts;
		pRootProducts = NULL;
	}

	piDocRootsOnDoc->Release();

	//CATIProduct *piProductOnRoot = NULL;
	rc = spRootProduct->QueryInterface(IID_CATIProduct, (void**)&opiRootProduct);
	if (FAILED(rc) || piDocRootsOnDoc == NULL)
	{
		return E_FAIL;
	}

	return S_OK;
}

//判断是Product还是Part
CATBoolean RPSInsertCmd::IsCATPart(CATFeatureImportAgent *ipFeatImpAgt)
{
	HRESULT rc = S_OK;

	CATIProduct_var spiPrd = NULL_var;
	SelectTransfer(ipFeatImpAgt,spiPrd);

	CATBoolean isCATPart=TRUE;

	CATIProduct *piPrd=NULL;
	rc = spiPrd->QueryInterface(IID_CATIProduct,(void **)&piPrd);

	CATIProduct_var spRefPrd=spiPrd->GetReferenceProduct();
	piPrd->Release();  piPrd = NULL;

	if (spRefPrd==NULL_var)
	{
		isCATPart = FALSE;
		cout<<"==>Get ReferenceProduct failed"<<endl;
		return isCATPart;
	}

	CATILinkableObject *piLinkObj=NULL;
	rc=spRefPrd->QueryInterface(IID_CATILinkableObject,(void **)&piLinkObj);
	if( FAILED(rc) || !piLinkObj ) 
	{
		cout << "==> Get CATILinkableObject error !" << endl;
		return isCATPart;
	}

	CATDocument *pDoc=piLinkObj->GetDocument();
	piLinkObj->Release();  piLinkObj = NULL;
	if( !pDoc ) 
	{
		cout << "==> Get CATDocument error !" << endl;
		return isCATPart;
	}

	CATIDocId *pDocID;
	CATUnicodeString typeDoc="";
	rc = pDoc->GetDocId(&pDocID);
	if( !(FAILED(rc)) )
		rc = pDocID->GetType(typeDoc);
	//cout << " ==> The type of document is: " << typeDoc << endl;

	if( typeDoc == "CATProduct" )
		isCATPart = FALSE;

	return isCATPart;
}

//获取Excel数据库的路径
HRESULT RPSInsertCmd::GetResourseFile(CATUnicodeString &CATEnvPath,CATUnicodeString FileFullName,CATUnicodeString folderName)
{
	if(CATUnicodeString("") == FileFullName)
	{
		return E_FAIL;
	}

	//从环境变量中获取路径
	CATUnicodeString strSearchPath("");
	char* value = NULL;
	if ( CATLibSuccess == CATGetEnvValue("CATGraphicPath", &value ))//通过读取环境变量中参数值
	{
		strSearchPath = value;
		CATUnicodeString strName = "";
		strName.Append(folderName);
		strName.Append("\\");
		strName.Append(FileFullName);
		const char * pFilePath = ::CATFindPath(strName,value);	  

		if (value!=NULL)
		{
			delete value;
			value = NULL;
		}
		CATEnvPath = pFilePath;
		return S_OK;
	}
	else
	{		 
		return E_FAIL;
	}
}