// COPYRIGHT Dassault Systemes 2019
//===================================================================
//
// UpdateDataBaseCmd.cpp
// The state chart based command: UpdateDataBaseCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jan 2019  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "UpdateDataBaseCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"





CATCreateClass( UpdateDataBaseCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
UpdateDataBaseCmd::UpdateDataBaseCmd() :
  CATStateCommand ("UpdateDataBaseCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_Indication(NULL)
{
	_pDlg = NULL;
	_pDlg = new UpdateDataBaseDlg();
	_pDlg->Build();
	_pDlg->SetVisibility(CATDlgShow);

	_lstSubParts = NULL;

	_strDBPath = "";
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
UpdateDataBaseCmd::~UpdateDataBaseCmd()
{
   if (_Indication != NULL) 
      _Indication->RequestDelayedDestruction();

   if (_pDlg != NULL)
   {
	   _pDlg->RequestDelayedDestruction();
	   _pDlg = NULL;
   }

   if (_lstSubParts.Size() != 0)
   {
	   _lstSubParts.RemoveAll();
   }
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void UpdateDataBaseCmd::BuildGraph()
{

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&UpdateDataBaseCmd::ExitCmd,
		NULL);

	AddAnalyseNotificationCB(_pDlg,
		_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&UpdateDataBaseCmd::ExitCmd,
		NULL);
	
	//刷新列表按钮的动作
	AddAnalyseNotificationCB(_pDlg->GetPushButtonRefresh(),
		_pDlg->GetPushButtonRefresh()->GetPushBActivateNotification(),
		(CATCommandMethod)&UpdateDataBaseCmd::RefreshPartList,
		NULL);

	//双击列表中yes和no的动作
	AddAnalyseNotificationCB(_pDlg->GetMultiListPartList(),
		_pDlg->GetMultiListPartList()->GetListActivateNotification(),
		(CATCommandMethod)&UpdateDataBaseCmd::ChangeStatus,
		NULL);

	//写入Excel的动作
	AddAnalyseNotificationCB(_pDlg->GetPushButtonWriteExcel(),
		_pDlg->GetPushButtonWriteExcel()->GetPushBActivateNotification(),
		(CATCommandMethod)&UpdateDataBaseCmd::WriteExcel,
		NULL);


}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean UpdateDataBaseCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

void UpdateDataBaseCmd::ExitCmd(void * data)
{
	this->RequestDelayedDestruction();
}

void UpdateDataBaseCmd::RefreshPartList(void * data)
{
	//先清空列表
	_pDlg->GetMultiListPartList()->ClearLine();
	//清空全局的列表
	if (_lstSubParts.Size() != 0)
	{
			_lstSubParts.RemoveAll();
			_lstSubParts = NULL;
	}
	//为了和Excel中的数据比较，先获得Excel储存地址
	CATUnicodeString strFolderName = "DataBase";
	CATUnicodeString strFileName = "DataBase.xlsx";
	CATUnicodeString strSavePath = "";
	HRESULT rc = GetResourseFile(strSavePath,strFileName,strFolderName);
	if (FAILED(rc))
	{
		return;
	}
	_strDBPath =  strSavePath;
	//开始过滤列表
	//如果列表为空，则弹出提示
	CATUnicodeString strKeyWord = "RPS";
	FilterPartList(strKeyWord,_lstSubParts);
	if (_lstSubParts == NULL)
	{
		MessageBox (NULL ,_T("No RPS"),L"Information",MB_OK);
		return;
	}
	//过滤出列表，显示在MultiList中
	for (int i = 1; i<= _lstSubParts.Size(); i++)
	{
		CATUnicodeString strPartNumber = _lstSubParts[i]->GetPartNumber();
		_pDlg->GetMultiListPartList()->SetColumnItem(0,strPartNumber,-1,CATDlgDataAdd);
		_pDlg->GetMultiListPartList()->SetColumnItem(1,"yes",-1,CATDlgDataAdd);
		//测试打印坐标
		CATListValCATUnicodeString lstXCoord = NULL;
		CATListValCATUnicodeString lstYCoord = NULL;
		CATListValCATUnicodeString lstZCoord = NULL;
		CATListValCATUnicodeString lstRPSName = NULL;
		GetRPSCoord(_lstSubParts[i],strKeyWord,lstRPSName,lstXCoord,lstYCoord,lstZCoord);
		for (int j =1; j<= lstRPSName.Size();j++)
		{
			cout<<strPartNumber<<"  "<<lstRPSName[j]<<"  "<<lstXCoord[j]<<"  "<<lstYCoord[j]<<"  "<<lstZCoord[j]<<endl;
		}
	}
	return;
}

void UpdateDataBaseCmd::WriteExcel(void * data)
{
	//先判断MultiList中是否有列表
	int iLineCount = _pDlg->GetMultiListPartList()->GetLineCount();
	if (iLineCount == 0)
	{
		MessageBox (NULL ,_T("Refresh List First!"),L"Information",MB_OK);
		return;
	}
	//根据yes和no的选择返回出最新列表
	CATLISTP(CATIProduct) lstSelectParts = NULL;
	HRESULT rc = GetPartListFromMultiList(_lstSubParts,lstSelectParts);
	if (FAILED(rc))
	{
		return;
	}
	//判断是否都选了no
	if (lstSelectParts == NULL)
	{
		MessageBox (NULL ,_T("No Selection"),L"Information",MB_OK);
		return;
	}
	////获取数据库Excel的保存路径
	//CATUnicodeString strFolderName = "DataBase";
	//CATUnicodeString strFileName = "DataBase.xlsx";
	//CATUnicodeString strSavePath = "";
	//rc = GetResourseFile(strSavePath,strFileName,strFolderName);
	//if (FAILED(rc))
	//{
	//	return;
	//}
	//
	ClsOfExcelOperation *pExcelOperation = new ClsOfExcelOperation(_strDBPath);
	if (pExcelOperation == NULL)
	{
		return;
	}
	for (int i = 1; i <= lstSelectParts.Size(); i++)
	{
		CATListValCATUnicodeString lstXCoord = NULL;
		CATListValCATUnicodeString lstYCoord = NULL;
		CATListValCATUnicodeString lstZCoord = NULL;
		CATListValCATUnicodeString lstRPSName = NULL;
		CATUnicodeString strPartNum = lstSelectParts[i]->GetPartNumber();
		cout<<strPartNum<<endl;
		rc = GetRPSCoord(lstSelectParts[i],"RPS",lstRPSName,lstXCoord,lstYCoord,lstZCoord);
		if (FAILED(rc))
		{
			cout<<strPartNum<<" get RPS failed"<<endl;
			continue;
		}

		//数据库中写入当前Part下的所有RPS点信息
		rc = pExcelOperation->AddToExcel(_strDBPath,strPartNum,lstRPSName,lstXCoord,lstYCoord,lstZCoord);
	}
	//
	if (pExcelOperation != NULL)
	{
		delete pExcelOperation;
		pExcelOperation = NULL;
	}
	return;
}

void UpdateDataBaseCmd::ChangeStatus(void * data)
{
	//yes 和 no之间的切换
	int iTabRow[10];
	int iSelRow = 0;
	iSelRow = _pDlg->GetMultiListPartList()->GetSelect(iTabRow,1);
	CATUnicodeString strColItem = "";
	_pDlg->GetMultiListPartList()->GetColumnItem(1,strColItem,iTabRow[0]);
	if (strColItem == "yes")
	{
		int iRow = _pDlg->GetMultiListPartList()->SetColumnItem(1,"no",iTabRow[0],CATDlgDataModify);
	}
	else
	{
		int iRow = _pDlg->GetMultiListPartList()->SetColumnItem(1,"yes",iTabRow[0],CATDlgDataModify);
	}
	return;
}

//过滤出含有RPS几何图形集的Part
HRESULT UpdateDataBaseCmd::FilterPartList(CATUnicodeString istrKeyWord, CATLISTP(CATIProduct) &olstSubParts)
{
	HRESULT rc = S_OK;
	//获取Root Product
	CATIProduct *piProductOnRoot = NULL;
	rc = GetRootProduct(piProductOnRoot);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	//判断打开的是Product还是Part
	CATBoolean boolIsProduct = TRUE;
	boolIsProduct = IsProduct(piProductOnRoot);
	//是Part文件
	if (boolIsProduct == FALSE)
	{
		//
		cout<<"you open a CATPart file"<<endl;
		//先和Excel中的数据比对
		//若Excel中已经存在有该零件号，则直接返回，不需要输出
		ClsOfExcelOperation *pExcelOperation = new ClsOfExcelOperation(_strDBPath);
		if (pExcelOperation == NULL)
		{
			return E_FAIL;
		}
		CATListValCATUnicodeString lstExistPartNum = NULL;
		rc = pExcelOperation->GetExcelInformationFromOneColumn(_strDBPath,1,lstExistPartNum);
		if (lstExistPartNum == NULL)
		{
			return E_FAIL;
		}
		CATUnicodeString strPartNumCurrent = "";
		strPartNumCurrent = piProductOnRoot->GetPartNumber();
		int iOccurCount = 0;
		iOccurCount = lstExistPartNum.NbOccur(strPartNumCurrent);
		if (iOccurCount != 0)
		{
			return S_OK;
		}
		//Excel中不存在，则继续
		CATILinkableObject *piLinkableObjOnChild = NULL;
		HRESULT rc = piProductOnRoot->QueryInterface(IID_CATILinkableObject,(void**)&piLinkableObjOnChild);
		if (FAILED(rc))
		{
			return E_FAIL;
		}
		CATDocument *pDocOnChild = NULL;
		pDocOnChild = piLinkableObjOnChild->GetDocument();
		if (NULL == pDocOnChild)
		{
			return E_FAIL;
		}
		CATIContainerOfDocument_var spContOfDocOnChild = pDocOnChild;
		CATIContainer *piSpecContainerOnChild = NULL;
		rc = spContOfDocOnChild->GetSpecContainer(piSpecContainerOnChild);
		if (FAILED(rc))
		{
			return E_FAIL;
		}
		CATIPrtContainer *piPrtContainerOnChild = NULL;
		rc = piSpecContainerOnChild->QueryInterface(IID_CATIPrtContainer,(void**)&piPrtContainerOnChild);
		piSpecContainerOnChild->Release();
		if (FAILED(rc))
		{
			return E_FAIL;
		}
		CATIPrtPart_var spPartOnChild = piPrtContainerOnChild->GetPart();
		piPrtContainerOnChild->Release();
		if (NULL_var == spPartOnChild)
		{
			return E_FAIL;
		}
		CATIPartRequest *pPartAsRequest = NULL;
		rc = spPartOnChild->QueryInterface(IID_CATIPartRequest, (void**)&pPartAsRequest);
		if (FAILED(rc))
		{
			return E_FAIL;
		}
		//遍历所有GS
		CATLISTV(CATBaseUnknown_var) lstGeomSet = NULL;
		pPartAsRequest->GetSurfBodies("", lstGeomSet);
		//如果没有GS，则返回
		if (lstGeomSet == NULL)
		{
			return E_FAIL;
		}
		for (int j = 1; j<=lstGeomSet.Size(); j++)
		{
			CATBaseUnknown_var spCurrentSet = lstGeomSet[j];
			if (spCurrentSet == NULL_var)
			{
				break;
			}
			CATIAlias_var spAliasOnCurrentSet = spCurrentSet;
			CATUnicodeString strAliasOnCurrentSet = spAliasOnCurrentSet->GetAlias();
			if (strAliasOnCurrentSet == istrKeyWord)
			{
				olstSubParts.Append(piProductOnRoot);
				//olstRPSGeomSet.Append(spCurrentSet);
				break;
			}
		}
		//
		if (pExcelOperation != NULL)
		{
			delete pExcelOperation;
			pExcelOperation = NULL;
		}
	}
	else
	//是Product文件，获得CATProduct下的所有Children
	{
		CATListValCATBaseUnknown_var *lstChildren = piProductOnRoot->GetAllChildren();
		if (lstChildren == NULL)
		{
			return E_FAIL;
		}
		//过滤出Part
		CATIProduct_var spChild = NULL_var;
		CATLISTP(CATIProduct) lstRefProduct = NULL;
		for (int i = 1; i <= lstChildren->Size(); i++)
		{
			spChild = (*lstChildren)[i];
			if (IsProduct(spChild))
			{	
				continue;
			}
			CATIProduct_var spRefProduct = spChild->GetReferenceProduct(); 
			lstRefProduct.Append(spRefProduct);
		}
		cout<<"All Children Part counts:  "<<lstRefProduct.Size()<<endl;
		//过滤重复Part
		for (int i = 1; i<=lstRefProduct.Size(); i++)
		{
			for (int j = lstRefProduct.Size(); j>i; j--)
			{
				if (lstRefProduct[i] == lstRefProduct[j])
				{
					lstRefProduct.RemovePosition(j);
				}
			}
		}
		cout<<"Filter duplicate Part counts: "<<lstRefProduct.Size()<<endl;
		//打印出过滤出的Part的零件号以及总数量
		for (int i = 1; i<= lstRefProduct.Size(); i++)
		{
			cout<<lstRefProduct[i]->GetPartNumber()<<endl;
		}
		cout<<lstRefProduct.Size()<<endl;

		////先和Excel中的数据比对
		//若Excel中已经存在有该零件号，则直接返回，不需要输出
		ClsOfExcelOperation *pExcelOperation = new ClsOfExcelOperation(_strDBPath);
		if (pExcelOperation == NULL)
		{
			return E_FAIL;
		}
		CATListValCATUnicodeString lstExistPartNum = NULL;
		rc = pExcelOperation->GetExcelInformationFromOneColumn(_strDBPath,1,lstExistPartNum);
		if (lstExistPartNum == NULL)
		{
			return E_FAIL;
		}
		//循环遍历和Excel中的零件号判断，去除Excel中已经存在的
		for (int i=1; i<= lstRefProduct.Size(); i++)
		{
			CATUnicodeString strPartNumCurrent = "";
			strPartNumCurrent = lstRefProduct[i]->GetPartNumber();
			int iOccurCount = 0;
			iOccurCount = lstExistPartNum.NbOccur(strPartNumCurrent);
			if (iOccurCount != 0)
			{
				lstRefProduct.RemovePosition(i);
				i--;
			}
		}
		cout<<"Filter existed in XLS Part Count: "<<lstRefProduct.Size()<<endl;
		/////开始过滤每个Part内
		//遍历Part内的几何图形集
		for (int i = 1; i<= lstRefProduct.Size(); i++)
		{
			CATILinkableObject *piLinkableObjOnChild = NULL;
			HRESULT rc = lstRefProduct[i]->QueryInterface(IID_CATILinkableObject,(void**)&piLinkableObjOnChild);
			if (FAILED(rc))
			{
				continue;
			}
			CATDocument *pDocOnChild = NULL;
			pDocOnChild = piLinkableObjOnChild->GetDocument();
			if (NULL == pDocOnChild)
			{
				continue;
			}
			CATIContainerOfDocument_var spContOfDocOnChild = pDocOnChild;
			CATIContainer *piSpecContainerOnChild = NULL;
			rc = spContOfDocOnChild->GetSpecContainer(piSpecContainerOnChild);
			if (FAILED(rc))
			{
				continue;
			}
			CATIPrtContainer *piPrtContainerOnChild = NULL;
			rc = piSpecContainerOnChild->QueryInterface(IID_CATIPrtContainer,(void**)&piPrtContainerOnChild);
			piSpecContainerOnChild->Release();
			if (FAILED(rc))
			{
				continue;
			}
			CATIPrtPart_var spPartOnChild = piPrtContainerOnChild->GetPart();
			piPrtContainerOnChild->Release();
			if (NULL_var == spPartOnChild)
			{
				continue;
			}
			//CATIDescendants *pDescendantsOnChild = NULL;
			//rc = spPartOnChild->QueryInterface(IID_CATIDescendants,(void**)&pDescendantsOnChild);
			//if (FAILED(rc))
			//{
			//	continue;
			//}
			//CATLISTV(CATISpecObject_var) lstGeomSetList;
			//pDescendantsOnChild->GetAllChildren("CATIMmiNonOrderedGeometricalSet",lstGeomSetList);
			//pDescendantsOnChild->Release();
			//pDescendantsOnChild = NULL;

			//CATBoolean existRPS = FALSE;
			//cout<<"GS numbers:  "<<lstGeomSetList.Size()<<endl;
			//for (int j = 1; j<= lstGeomSetList.Size(); j++)
			//{
			//	CATIAlias_var spiAliasOnGS = lstGeomSetList[j];
			//	CATUnicodeString strGSName = spiAliasOnGS->GetAlias();
			//	if (strGSName == "RPS")
			//	{
			//		cout<<lstRefProduct[i]->GetPartNumber()<<"  has RPS GS"<<endl;
			//		existRPS = TRUE;
			//		break;
			//	}
			//}
			//if (existRPS == FALSE)
			//{
			//	cout<<lstRefProduct[i]->GetPartNumber()<<"  has no RPS"<<endl;
			//}
			CATIPartRequest *pPartAsRequest = NULL;
			rc = spPartOnChild->QueryInterface(IID_CATIPartRequest, (void**)&pPartAsRequest);
			if (FAILED(rc))
			{
				continue;
			}
			//遍历所有GS
			CATLISTV(CATBaseUnknown_var) lstGeomSet = NULL;
			pPartAsRequest->GetSurfBodies("", lstGeomSet);
			//如果没有GS，则继续遍历下一个Part
			if (lstGeomSet == NULL)
			{
				continue;
			}
			for (int j = 1; j<=lstGeomSet.Size(); j++)
			{
				CATBaseUnknown_var spCurrentSet = lstGeomSet[j];
				if (spCurrentSet == NULL_var)
				{
					break;
				}
				CATIAlias_var spAliasOnCurrentSet = spCurrentSet;
				CATUnicodeString strAliasOnCurrentSet = spAliasOnCurrentSet->GetAlias();
				if (strAliasOnCurrentSet == istrKeyWord)
				{
					olstSubParts.Append(lstRefProduct[i]);
					//olstRPSGeomSet.Append(spCurrentSet);
					break;
				}
			}
		}
		//
		if (pExcelOperation != NULL)
		{
			delete pExcelOperation;
			pExcelOperation = NULL;
		}
	}
	

	return rc;
}

//获取RPS几何图形集内的所有点的名称和坐标
HRESULT UpdateDataBaseCmd::GetRPSCoord(CATIProduct_var ispProduct,
									   CATUnicodeString istrGSName,
									   CATListValCATUnicodeString &lstRPSName, 
									   CATListValCATUnicodeString &lstXCoord,
									   CATListValCATUnicodeString &lstYCoord,
									   CATListValCATUnicodeString &lstZCoord)
{
	HRESULT rc = S_OK;
	CATILinkableObject *piLinkableObjOnChild = NULL;
	rc = ispProduct->QueryInterface(IID_CATILinkableObject,(void**)&piLinkableObjOnChild);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATDocument *pDocOnChild = NULL;
	pDocOnChild = piLinkableObjOnChild->GetDocument();
	if (NULL == pDocOnChild)
	{
		return E_FAIL;
	}
	CATIContainerOfDocument_var spContOfDocOnChild = pDocOnChild;
	CATIContainer *piSpecContainerOnChild = NULL;
	rc = spContOfDocOnChild->GetSpecContainer(piSpecContainerOnChild);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATIPrtContainer *piPrtContainerOnChild = NULL;
	rc = piSpecContainerOnChild->QueryInterface(IID_CATIPrtContainer,(void**)&piPrtContainerOnChild);
	piSpecContainerOnChild->Release();
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATIPrtPart_var spPartOnChild = piPrtContainerOnChild->GetPart();
	piPrtContainerOnChild->Release();
	if (NULL_var == spPartOnChild)
	{
		return E_FAIL;
	}
	CATIPartRequest *pPartAsRequest = NULL;
	rc = spPartOnChild->QueryInterface(IID_CATIPartRequest, (void**)&pPartAsRequest);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	//遍历所有GS
	CATLISTV(CATBaseUnknown_var) lstGeomSet = NULL;
	pPartAsRequest->GetSurfBodies("", lstGeomSet);
	//如果没有GS，则继续遍历下一个Part
	if (lstGeomSet == NULL)
	{
		return E_FAIL;
	}
	for (int j = 1; j<=lstGeomSet.Size(); j++)
	{
		CATBaseUnknown_var spCurrentSet = lstGeomSet[j];
		if (spCurrentSet == NULL_var)
		{
			continue;
		}
		CATIAlias_var spAliasOnCurrentSet = spCurrentSet;
		CATUnicodeString strAliasOnCurrentSet = spAliasOnCurrentSet->GetAlias();
		if (strAliasOnCurrentSet == istrGSName)
		{
			CATIBodyRequest *piBodyRequestOnCurrentSet = NULL;
			rc = spCurrentSet->QueryInterface(IID_CATIBodyRequest, (void**)&piBodyRequestOnCurrentSet);
			if (FAILED(rc))
			{
				return E_FAIL;
			}
			CATLISTV(CATBaseUnknown_var) lstResults = NULL;
			rc = piBodyRequestOnCurrentSet->GetResults("", lstResults);
			if (FAILED(rc) || lstResults == NULL)
			{
				MessageBox (NULL ,_T("No RPS inside"),L"Information",MB_OK);
				return E_FAIL;
			}
			for (int iCurrent =1; iCurrent <= lstResults.Size(); iCurrent++)
			{
				CATBaseUnknown_var spCurrentResult = lstResults[iCurrent];
				//过滤出点，以防几何图形集内有其他元素
				CATISpecObject_var spCurrentFeature = spCurrentResult;
				CATUnicodeString strType = spCurrentFeature->GetType();
				cout<<strType<<endl;
				if (strType != "GSMPoint")
				{
					continue;
				}
				//
				CATIAlias_var spAliasOnCurrent = spCurrentResult;
				CATUnicodeString strAliasOnCurrent = spAliasOnCurrent->GetAlias();
				//
				CATIGeometricalElement *piGeomElemOnCurrent = NULL;
				rc = spCurrentResult->QueryInterface(IID_CATIGeometricalElement,(void**)&piGeomElemOnCurrent);
				if (FAILED(rc))
				{
					return E_FAIL;
				}
				CATBody_var spResultBody = piGeomElemOnCurrent->GetBodyResult();
				CATLISTP(CATCell) lstCells = NULL;
				spResultBody->GetAllCells(lstCells,0);
				if (lstCells == NULL)
				{
					return E_FAIL;
				}
				for (int i=1; i<= lstCells.Size();i++)
				{
					CATGeometry *pGeometry = lstCells[i]->GetGeometry();
					if (pGeometry == NULL)
					{
						continue;
					}
					CATPoint *pCurrentPoint = (CATPoint*)pGeometry;
					double dblXCoord = 0;
					double dblYCoord = 0;
					double dblZCoord = 0;
					pCurrentPoint->GetCoord(dblXCoord,dblYCoord,dblZCoord);
					CATUnicodeString strXCoord = "";
					CATUnicodeString strYCoord = "";
					CATUnicodeString strZCoord = "";
					int iSucceed = strXCoord.BuildFromNum(dblXCoord);
					iSucceed = strYCoord.BuildFromNum(dblYCoord);
					iSucceed = strZCoord.BuildFromNum(dblZCoord);
					//
					lstRPSName.Append(strAliasOnCurrent);
					lstXCoord.Append(strXCoord);
					lstYCoord.Append(strYCoord);
					lstZCoord.Append(strZCoord);
				}
			}
			break;
		}
	}


	return rc;
}

HRESULT UpdateDataBaseCmd::GetRootProduct(CATIProduct *&opiRootProduct)
{
	//获取Document
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	if (pEditor == NULL)
	{
		return E_FAIL;
	}
	CATDocument *pDoc = pEditor->GetDocument();
	if (pDoc == NULL)
	{
		return E_FAIL;
	}

	//获取根元素集合的第一个，就是根product,最终要转到CATIProduct
	CATIDocRoots *piDocRootsOnDoc = NULL;
	HRESULT rc = pDoc->QueryInterface(IID_CATIDocRoots,(void**)&piDocRootsOnDoc);
	if (FAILED(rc))
	{
		return E_FAIL;
	}
	CATListValCATBaseUnknown_var *pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct = NULL_var;
	if (pRootProducts->Size())
	{
		spRootProduct = (*pRootProducts)[1];
		delete pRootProducts;
		pRootProducts = NULL;
	}

	piDocRootsOnDoc->Release();

	//CATIProduct *piProductOnRoot = NULL;
	rc = spRootProduct->QueryInterface(IID_CATIProduct, (void**)&opiRootProduct);
	if (FAILED(rc) || piDocRootsOnDoc == NULL)
	{
		return E_FAIL;
	}

	return S_OK;
}

//判断是Product还是Part
CATBoolean UpdateDataBaseCmd::IsProduct(CATIProduct_var ispiPrd)
{
	HRESULT rc = S_OK;

	CATBoolean isProduct=FALSE;

	CATIProduct *piPrd=NULL;
	rc = ispiPrd->QueryInterface(IID_CATIProduct,(void **)&piPrd);

	CATIProduct_var spRefPrd=ispiPrd->GetReferenceProduct();
	piPrd->Release();  piPrd = NULL;

	if (spRefPrd==NULL_var)
	{
		isProduct = TRUE;
		cout<<"==>Get ReferenceProduct failed"<<endl;
		return isProduct;
	}

	CATILinkableObject *piLinkObj=NULL;
	rc=spRefPrd->QueryInterface(IID_CATILinkableObject,(void **)&piLinkObj);
	if( FAILED(rc) || !piLinkObj ) 
	{
		cout << "==> Get CATILinkableObject error !" << endl;
		return isProduct;
	}

	CATDocument *pDoc=piLinkObj->GetDocument();
	piLinkObj->Release();  piLinkObj = NULL;
	if( !pDoc ) 
	{
		cout << "==> Get CATDocument error !" << endl;
		return isProduct;
	}

	CATIDocId *pDocID;
	CATUnicodeString typeDoc="";
	rc = pDoc->GetDocId(&pDocID);
	if( !(FAILED(rc)) )
		rc = pDocID->GetType(typeDoc);
	//cout << " ==> The type of document is: " << typeDoc << endl;

	if( typeDoc == "CATProduct" )
		isProduct = TRUE;

	return isProduct;
}

//对MultiList过滤，把选择否去除掉，获得剩余PartList
HRESULT UpdateDataBaseCmd::GetPartListFromMultiList(CATLISTP(CATIProduct) ilstProduct,CATLISTP(CATIProduct) &olstProductSelected)
{
	HRESULT rc = S_OK;
	CATListValCATUnicodeString lstPartList = NULL;
	//获得当前MultiList内的列表行数
	int iLineCount = _pDlg->GetMultiListPartList()->GetLineCount();
	//获得第二列是yes的零件号
	for (int i=0; i<iLineCount;i++)
	{
		CATUnicodeString strIsSelect = "";
		_pDlg->GetMultiListPartList()->GetColumnItem(1,strIsSelect,i);
		if (strIsSelect == "yes")
		{
			CATUnicodeString strPartNo = "";
			_pDlg->GetMultiListPartList()->GetColumnItem(0,strPartNo,i);
			lstPartList.Append(strPartNo);
		}
	}
	//与输入的product列表比较
	for (int j=1; j <= ilstProduct.Size(); j++)
	{
		CATUnicodeString strPartNum = ilstProduct[j]->GetPartNumber();
		int iOccur = lstPartList.NbOccur(strPartNum);
		if (iOccur != 0)
		{
			olstProductSelected.Append(ilstProduct[j]);
		}
	}
	return rc;
}

//获取Excel数据库的路径
HRESULT UpdateDataBaseCmd::GetResourseFile(CATUnicodeString &CATEnvPath,CATUnicodeString FileFullName,CATUnicodeString folderName)
{
	if(CATUnicodeString("") == FileFullName)
	{
		return E_FAIL;
	}

	//从环境变量中获取路径
	CATUnicodeString strSearchPath("");
	char* value = NULL;
	if ( CATLibSuccess == CATGetEnvValue("CATGraphicPath", &value ))//通过读取环境变量中参数值
	{
		strSearchPath = value;
		CATUnicodeString strName = "";
		strName.Append(folderName);
		strName.Append("\\");
		strName.Append(FileFullName);
		const char * pFilePath = ::CATFindPath(strName,value);	  

		if (value!=NULL)
		{
			delete value;
			value = NULL;
		}
		CATEnvPath = pFilePath;
		return S_OK;
	}
	else
	{		 
		return E_FAIL;
	}
}